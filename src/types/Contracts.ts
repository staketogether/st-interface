// Generated by @wagmi/cli@1.3.0 on 6/27/2023 at 5:11:26 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Rewards
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const rewardsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'oracle', internalType: 'address', type: 'address', indexed: false }],
    name: 'AddOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'batchReportHash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'BatchConsensusApprove'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'singleReportHash', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'report',
        internalType: 'struct Rewards.SingleReport',
        type: 'tuple',
        components: [
          { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
          { name: 'batchReports', internalType: 'uint256', type: 'uint256' },
          { name: 'lossAmount', internalType: 'uint256', type: 'uint256' },
          {
            name: 'shares',
            internalType: 'struct Rewards.Shares',
            type: 'tuple',
            components: [
              { name: 'total', internalType: 'uint256', type: 'uint256' },
              { name: 'stakeTogether', internalType: 'uint256', type: 'uint256' },
              { name: 'operators', internalType: 'uint256', type: 'uint256' },
              { name: 'pools', internalType: 'uint256', type: 'uint256' }
            ]
          },
          {
            name: 'amounts',
            internalType: 'struct Rewards.Amounts',
            type: 'tuple',
            components: [
              { name: 'total', internalType: 'uint256', type: 'uint256' },
              { name: 'stakeTogether', internalType: 'uint256', type: 'uint256' },
              { name: 'operators', internalType: 'uint256', type: 'uint256' },
              { name: 'pools', internalType: 'uint256', type: 'uint256' }
            ]
          },
          {
            name: 'poolBatches',
            internalType: 'struct Rewards.PoolBatches',
            type: 'tuple',
            components: [
              { name: 'total', internalType: 'uint256', type: 'uint256' },
              { name: 'totalSubmitted', internalType: 'uint256', type: 'uint256' },
              { name: 'totalSharesSubmitted', internalType: 'uint256', type: 'uint256' }
            ]
          },
          {
            name: 'validatorBatches',
            internalType: 'struct Rewards.ValidatorBatches',
            type: 'tuple',
            components: [
              { name: 'total', internalType: 'uint256', type: 'uint256' },
              { name: 'totalSubmitted', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: 'BatchConsensusReject'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'EtherReceived'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: false },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'batchNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'batchReportHash', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'report',
        internalType: 'struct Rewards.BatchReport',
        type: 'tuple',
        components: [
          { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
          { name: 'batchNumber', internalType: 'uint256', type: 'uint256' },
          { name: 'singleReportHash', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'pools',
            internalType: 'struct Rewards.Pool[]',
            type: 'tuple[]',
            components: [
              { name: 'account', internalType: 'address', type: 'address' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' },
              { name: 'sharesAmount', internalType: 'uint256', type: 'uint256' }
            ]
          },
          {
            name: 'validators',
            internalType: 'struct Rewards.Validator[]',
            type: 'tuple[]',
            components: [
              { name: 'publicKey', internalType: 'bytes', type: 'bytes' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: 'ExecuteBatchReport'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: false },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'singleReportHash', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'report',
        internalType: 'struct Rewards.SingleReport',
        type: 'tuple',
        components: [
          { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
          { name: 'batchReports', internalType: 'uint256', type: 'uint256' },
          { name: 'lossAmount', internalType: 'uint256', type: 'uint256' },
          {
            name: 'shares',
            internalType: 'struct Rewards.Shares',
            type: 'tuple',
            components: [
              { name: 'total', internalType: 'uint256', type: 'uint256' },
              { name: 'stakeTogether', internalType: 'uint256', type: 'uint256' },
              { name: 'operators', internalType: 'uint256', type: 'uint256' },
              { name: 'pools', internalType: 'uint256', type: 'uint256' }
            ]
          },
          {
            name: 'amounts',
            internalType: 'struct Rewards.Amounts',
            type: 'tuple',
            components: [
              { name: 'total', internalType: 'uint256', type: 'uint256' },
              { name: 'stakeTogether', internalType: 'uint256', type: 'uint256' },
              { name: 'operators', internalType: 'uint256', type: 'uint256' },
              { name: 'pools', internalType: 'uint256', type: 'uint256' }
            ]
          },
          {
            name: 'poolBatches',
            internalType: 'struct Rewards.PoolBatches',
            type: 'tuple',
            components: [
              { name: 'total', internalType: 'uint256', type: 'uint256' },
              { name: 'totalSubmitted', internalType: 'uint256', type: 'uint256' },
              { name: 'totalSharesSubmitted', internalType: 'uint256', type: 'uint256' }
            ]
          },
          {
            name: 'validatorBatches',
            internalType: 'struct Rewards.ValidatorBatches',
            type: 'tuple',
            components: [
              { name: 'total', internalType: 'uint256', type: 'uint256' },
              { name: 'totalSubmitted', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: 'ExecuteSingleReport'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'actionKey', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'action', internalType: 'string', type: 'string', indexed: false }
    ],
    name: 'ExecuteTimeLockAction'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'OwnershipTransferred'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reportType', internalType: 'enum Rewards.ReportType', type: 'uint8', indexed: false },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'removed', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'PenalizeOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'actionKey', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'action', internalType: 'string', type: 'string', indexed: false },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'target', internalType: 'address', type: 'address', indexed: false },
      { name: 'executionTime', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ProposeTimeLockAction'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'oracle', internalType: 'address', type: 'address', indexed: false }],
    name: 'RemoveOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: false },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'ReportExecuted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newLimit', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetBlockReportGrowthLimit'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'bunkerMode', internalType: 'bool', type: 'bool', indexed: false }],
    name: 'SetBunkerMode'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newLimit', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetOraclePenalizeLimit'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newQuorum', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetOracleQuorum'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'reportFrequency', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetReportFrequency'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'reportGrowthLimit', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetReportGrowthLimit'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newDuration', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetTimeLockDuration'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'reportHash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'SingleAndBatchesConsensusApprove'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'singleReportHash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'SingleConsensusApprove'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'reportHash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'SingleConsensusReject'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'batchNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'batchReportHash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'SubmitBatchReport'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'reportHash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'SubmitSingleReport'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'oracle', internalType: 'address', type: 'address' }],
    name: 'addOracle',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'batchOracleReport',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'batchReportConsensus',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'batchReportsOracles',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'batchReportsVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bunkerMode',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'cleanedReports',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'cleanupReport',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_batchReport',
        internalType: 'struct Rewards.BatchReport',
        type: 'tuple',
        components: [
          { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
          { name: 'batchNumber', internalType: 'uint256', type: 'uint256' },
          { name: 'singleReportHash', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'pools',
            internalType: 'struct Rewards.Pool[]',
            type: 'tuple[]',
            components: [
              { name: 'account', internalType: 'address', type: 'address' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' },
              { name: 'sharesAmount', internalType: 'uint256', type: 'uint256' }
            ]
          },
          {
            name: 'validators',
            internalType: 'struct Rewards.Validator[]',
            type: 'tuple[]',
            components: [
              { name: 'publicKey', internalType: 'bytes', type: 'bytes' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ]
      }
    ],
    name: 'executeBatchReport',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_singleReport',
        internalType: 'struct Rewards.SingleReport',
        type: 'tuple',
        components: [
          { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
          { name: 'batchReports', internalType: 'uint256', type: 'uint256' },
          { name: 'lossAmount', internalType: 'uint256', type: 'uint256' },
          {
            name: 'shares',
            internalType: 'struct Rewards.Shares',
            type: 'tuple',
            components: [
              { name: 'total', internalType: 'uint256', type: 'uint256' },
              { name: 'stakeTogether', internalType: 'uint256', type: 'uint256' },
              { name: 'operators', internalType: 'uint256', type: 'uint256' },
              { name: 'pools', internalType: 'uint256', type: 'uint256' }
            ]
          },
          {
            name: 'amounts',
            internalType: 'struct Rewards.Amounts',
            type: 'tuple',
            components: [
              { name: 'total', internalType: 'uint256', type: 'uint256' },
              { name: 'stakeTogether', internalType: 'uint256', type: 'uint256' },
              { name: 'operators', internalType: 'uint256', type: 'uint256' },
              { name: 'pools', internalType: 'uint256', type: 'uint256' }
            ]
          },
          {
            name: 'poolBatches',
            internalType: 'struct Rewards.PoolBatches',
            type: 'tuple',
            components: [
              { name: 'total', internalType: 'uint256', type: 'uint256' },
              { name: 'totalSubmitted', internalType: 'uint256', type: 'uint256' },
              { name: 'totalSharesSubmitted', internalType: 'uint256', type: 'uint256' }
            ]
          },
          {
            name: 'validatorBatches',
            internalType: 'struct Rewards.ValidatorBatches',
            type: 'tuple',
            components: [
              { name: 'total', internalType: 'uint256', type: 'uint256' },
              { name: 'totalSubmitted', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ]
      }
    ],
    name: 'executeSingleReport',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'action', internalType: 'string', type: 'string' },
      { name: 'target', internalType: 'address', type: 'address' }
    ],
    name: 'executeTimeLockAction',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'executedBatchReportsForBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'executedReports',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'executedSingleReports',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'executionPending',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracles',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_oracle', internalType: 'address', type: 'address' }],
    name: 'isOracle',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'action', internalType: 'string', type: 'string' },
      { name: 'target', internalType: 'address', type: 'address' }
    ],
    name: 'isProposalReady',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'oraclePenalizeLimit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'oracleQuorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'oraclesBlacklist',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'action', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'target', internalType: 'address', type: 'address' }
    ],
    name: 'proposeTimeLockAction',
    outputs: []
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reportFrequency',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reportGrowthLimit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reportLastBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reportNextBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_stakeTogether', internalType: 'address', type: 'address' }],
    name: 'setStakeTogether',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'singleOracleReport',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'singleReportConsensus',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'singleReportOracles',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'singleReportsVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogether',
    outputs: [{ name: '', internalType: 'contract StakeTogether', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_batchNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_singleReportHash', internalType: 'bytes32', type: 'bytes32' },
      { name: '_batchReportHash', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'submitBatchReports',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_reportHash', internalType: 'bytes32', type: 'bytes32' },
      { name: '_batchesReports', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'submitSingleReport',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'submittedBatchReportsForBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'timeLockDuration',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'timeLockedProposals',
    outputs: [
      { name: 'action', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'executionTime', internalType: 'uint256', type: 'uint256' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'totalBatchReportsForBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  },
  { stateMutability: 'payable', type: 'receive' }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StakeTogether
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stakeTogetherABI = [
  {
    stateMutability: 'payable',
    type: 'constructor',
    inputs: [
      { name: '_rewardsContract', internalType: 'address', type: 'address' },
      { name: '_depositContract', internalType: 'address', type: 'address' }
    ]
  },
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'AddPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: false },
      { name: 'balance', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Bootstrap'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnPoolShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'creator', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'publicKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'withdrawalCredentials', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'signature', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'depositDataRoot', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'CreateValidator'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'DepositLimitReached'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'DepositLiquidityBuffer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'delegated', internalType: 'address', type: 'address', indexed: false },
      { name: 'referral', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'DepositPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'donor', internalType: 'address', type: 'address', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'delegated', internalType: 'address', type: 'address', indexed: false },
      { name: 'referral', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'DonationDepositPool'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'EtherReceived'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintLoss'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintPoolShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'rewardType', internalType: 'enum SETH.RewardType', type: 'uint8', indexed: false }
    ],
    name: 'MintRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'OwnershipTransferred'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'RemovePool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'publicKey', internalType: 'bytes', type: 'bytes', indexed: false }
    ],
    name: 'RemoveValidator'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'blocksInterval', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetBlocksInterval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newLimit', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetDepositLimit'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetLiquidityFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'maxPools', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetMaxPools'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetMinDepositPoolAmount'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newPoolFee', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetNewPoolFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetNewPoolFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetOperatorFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetOperatorFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetPoolFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetPoolModuleAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetPoolSize'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetStakeTogetherFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetStakeTogetherFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newFee', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetValidatorFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetValidatorFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetValidatorModuleAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newValidatorSize', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetValidatorSize'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newLimit', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetWalletDepositLimit'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'withdrawalCredentials', internalType: 'bytes', type: 'bytes', indexed: false }],
    name: 'SetWithdrawalCredentials'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newLimit', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetWithdrawalLimit'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferPoolShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'WalletDepositLimitReached'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'WithdrawLiquidityBuffer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'delegated', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'WithdrawPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'WithdrawalLimitReached'
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'addPool',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'basisPoints',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'beaconBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'blocksPerDay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_publicKey', internalType: 'bytes', type: 'bytes' },
      { name: '_signature', internalType: 'bytes', type: 'bytes' },
      { name: '_depositDataRoot', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'createValidator',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_pool', internalType: 'address', type: 'address' }
    ],
    name: 'delegationSharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'depositContract',
    outputs: [{ name: '', internalType: 'contract IDepositContract', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'depositLimit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'depositLiquidityBuffer',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_delegated', internalType: 'address', type: 'address' },
      { name: '_referral', internalType: 'address', type: 'address' }
    ],
    name: 'depositPool',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_delegated', internalType: 'address', type: 'address' },
      { name: '_referral', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' }
    ],
    name: 'donationDepositPool',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPools',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_ethAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'getSharesByPooledEth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_publicKey', internalType: 'bytes', type: 'bytes' }],
    name: 'isValidator',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastResetBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidityBufferBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidityFeeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxDelegations',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxPools',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minDepositAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_lossAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'mintLoss',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'rewardAddress', internalType: 'address', type: 'address' },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'mintRewards',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'newPoolFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'newPoolFeeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorFeeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poolBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poolFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poolModuleAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'poolSharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poolSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'pooledEthByShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'removePool',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: '_publicKey', internalType: 'bytes', type: 'bytes' }],
    name: 'removeValidator',
    outputs: []
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rewardsContract',
    outputs: [{ name: '', internalType: 'contract Rewards', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newBlocksInterval', internalType: 'uint256', type: 'uint256' }],
    name: 'setBlocksInterval',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newLimit', internalType: 'uint256', type: 'uint256' }],
    name: 'setDepositLimit',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setLiquidityFeeAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_maxPools', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxPools',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinDepositPoolAmount',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newFee', internalType: 'uint256', type: 'uint256' }],
    name: 'setNewPoolFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setOperatorFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setOperatorFeeAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setPoolFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setPoolFeeAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setPoolModuleAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setPoolSize',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setStakeTogetherFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setStakeTogetherFeeAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newFee', internalType: 'uint256', type: 'uint256' }],
    name: 'setValidatorFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setValidatorFeeAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setValidatorModuleAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newSize', internalType: 'uint256', type: 'uint256' }],
    name: 'setValidatorSize',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newLimit', internalType: 'uint256', type: 'uint256' }],
    name: 'setWalletDepositLimit',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_withdrawalCredentials', internalType: 'bytes', type: 'bytes' }],
    name: 'setWithdrawalCredentials',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newLimit', internalType: 'uint256', type: 'uint256' }],
    name: 'setWithdrawalLimit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'sharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogetherFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogetherFeeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalDeposited',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalEtherSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalPoolShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalPooledEther',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalValidators',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalWithdrawn',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferPoolShares',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferSharesFrom',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'validatorFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'validatorFeeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'validatorModuleAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'validatorSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    name: 'validators',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'walletDepositLimit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdrawLiquidityBuffer',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_pool', internalType: 'address', type: 'address' }
    ],
    name: 'withdrawPool',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawalCredentials',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawalLimit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawalsBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'payable', type: 'receive' }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SETH
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const sethABI = [
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'AddPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: false },
      { name: 'balance', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Bootstrap'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnPoolShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnShares'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintLoss'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintPoolShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'rewardType', internalType: 'enum SETH.RewardType', type: 'uint8', indexed: false }
    ],
    name: 'MintRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'OwnershipTransferred'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'RemovePool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetLiquidityFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'maxPools', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetMaxPools'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newPoolFee', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetNewPoolFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetNewPoolFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetOperatorFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetOperatorFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetPoolFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetPoolModuleAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetStakeTogetherFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetStakeTogetherFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newFee', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetValidatorFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetValidatorFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetValidatorModuleAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferPoolShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'addPool',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'basisPoints',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'beaconBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_pool', internalType: 'address', type: 'address' }
    ],
    name: 'delegationSharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPools',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_ethAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'getSharesByPooledEth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidityFeeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxDelegations',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxPools',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_lossAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'mintLoss',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'rewardAddress', internalType: 'address', type: 'address' },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'mintRewards',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'newPoolFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'newPoolFeeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorFeeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poolFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poolModuleAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'poolSharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'pooledEthByShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'removePool',
    outputs: []
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rewardsContract',
    outputs: [{ name: '', internalType: 'contract Rewards', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setLiquidityFeeAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_maxPools', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxPools',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newFee', internalType: 'uint256', type: 'uint256' }],
    name: 'setNewPoolFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setOperatorFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setOperatorFeeAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setPoolFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setPoolFeeAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setPoolModuleAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setStakeTogetherFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setStakeTogetherFeeAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newFee', internalType: 'uint256', type: 'uint256' }],
    name: 'setValidatorFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setValidatorFeeAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setValidatorModuleAddress',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'sharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogetherFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogetherFeeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalPoolShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalPooledEther',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferPoolShares',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferSharesFrom',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'validatorFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'validatorFeeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'validatorModuleAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDepositContract
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iDepositContractABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'pubkey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'withdrawal_credentials', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'amount', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'signature', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'index', internalType: 'bytes', type: 'bytes', indexed: false }
    ],
    name: 'DepositEvent'
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'pubkey', internalType: 'bytes', type: 'bytes' },
      { name: 'withdrawal_credentials', internalType: 'bytes', type: 'bytes' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
      { name: 'deposit_data_root', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'deposit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'get_deposit_count',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'get_deposit_root',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'OwnershipTransferred'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC5267
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc5267ABI = [
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pausable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pausableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ShortStrings
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const shortStringsABI = [
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' }
    ]
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EIP712
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eip712ABI = [
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Burnable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20BurnableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'burnFrom',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20PermitABI = [
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__.
 */
export function useRewardsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: rewardsABI, ...config } as UseContractReadConfig<
    typeof rewardsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"batchOracleReport"`.
 */
export function useRewardsBatchOracleReport<
  TFunctionName extends 'batchOracleReport',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'batchOracleReport',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"batchReportConsensus"`.
 */
export function useRewardsBatchReportConsensus<
  TFunctionName extends 'batchReportConsensus',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'batchReportConsensus',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"batchReportsOracles"`.
 */
export function useRewardsBatchReportsOracles<
  TFunctionName extends 'batchReportsOracles',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'batchReportsOracles',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"batchReportsVotes"`.
 */
export function useRewardsBatchReportsVotes<
  TFunctionName extends 'batchReportsVotes',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'batchReportsVotes',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"bunkerMode"`.
 */
export function useRewardsBunkerMode<
  TFunctionName extends 'bunkerMode',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'bunkerMode',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"cleanedReports"`.
 */
export function useRewardsCleanedReports<
  TFunctionName extends 'cleanedReports',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'cleanedReports',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"executedBatchReportsForBlock"`.
 */
export function useRewardsExecutedBatchReportsForBlock<
  TFunctionName extends 'executedBatchReportsForBlock',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'executedBatchReportsForBlock',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"executedReports"`.
 */
export function useRewardsExecutedReports<
  TFunctionName extends 'executedReports',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'executedReports',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"executedSingleReports"`.
 */
export function useRewardsExecutedSingleReports<
  TFunctionName extends 'executedSingleReports',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'executedSingleReports',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"executionPending"`.
 */
export function useRewardsExecutionPending<
  TFunctionName extends 'executionPending',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'executionPending',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"getOracles"`.
 */
export function useRewardsGetOracles<
  TFunctionName extends 'getOracles',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'getOracles',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"isOracle"`.
 */
export function useRewardsIsOracle<
  TFunctionName extends 'isOracle',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'isOracle',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"isProposalReady"`.
 */
export function useRewardsIsProposalReady<
  TFunctionName extends 'isProposalReady',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'isProposalReady',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"oraclePenalizeLimit"`.
 */
export function useRewardsOraclePenalizeLimit<
  TFunctionName extends 'oraclePenalizeLimit',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'oraclePenalizeLimit',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"oracleQuorum"`.
 */
export function useRewardsOracleQuorum<
  TFunctionName extends 'oracleQuorum',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'oracleQuorum',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"oraclesBlacklist"`.
 */
export function useRewardsOraclesBlacklist<
  TFunctionName extends 'oraclesBlacklist',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'oraclesBlacklist',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"owner"`.
 */
export function useRewardsOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: rewardsABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof rewardsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"paused"`.
 */
export function useRewardsPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: rewardsABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof rewardsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"reportFrequency"`.
 */
export function useRewardsReportFrequency<
  TFunctionName extends 'reportFrequency',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'reportFrequency',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"reportGrowthLimit"`.
 */
export function useRewardsReportGrowthLimit<
  TFunctionName extends 'reportGrowthLimit',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'reportGrowthLimit',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"reportLastBlock"`.
 */
export function useRewardsReportLastBlock<
  TFunctionName extends 'reportLastBlock',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'reportLastBlock',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"reportNextBlock"`.
 */
export function useRewardsReportNextBlock<
  TFunctionName extends 'reportNextBlock',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'reportNextBlock',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"singleOracleReport"`.
 */
export function useRewardsSingleOracleReport<
  TFunctionName extends 'singleOracleReport',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'singleOracleReport',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"singleReportConsensus"`.
 */
export function useRewardsSingleReportConsensus<
  TFunctionName extends 'singleReportConsensus',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'singleReportConsensus',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"singleReportOracles"`.
 */
export function useRewardsSingleReportOracles<
  TFunctionName extends 'singleReportOracles',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'singleReportOracles',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"singleReportsVotes"`.
 */
export function useRewardsSingleReportsVotes<
  TFunctionName extends 'singleReportsVotes',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'singleReportsVotes',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"stakeTogether"`.
 */
export function useRewardsStakeTogether<
  TFunctionName extends 'stakeTogether',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'stakeTogether',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"submittedBatchReportsForBlock"`.
 */
export function useRewardsSubmittedBatchReportsForBlock<
  TFunctionName extends 'submittedBatchReportsForBlock',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'submittedBatchReportsForBlock',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"timeLockDuration"`.
 */
export function useRewardsTimeLockDuration<
  TFunctionName extends 'timeLockDuration',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'timeLockDuration',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"timeLockedProposals"`.
 */
export function useRewardsTimeLockedProposals<
  TFunctionName extends 'timeLockedProposals',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'timeLockedProposals',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"totalBatchReportsForBlock"`.
 */
export function useRewardsTotalBatchReportsForBlock<
  TFunctionName extends 'totalBatchReportsForBlock',
  TSelectData = ReadContractResult<typeof rewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: rewardsABI,
    functionName: 'totalBatchReportsForBlock',
    ...config
  } as UseContractReadConfig<typeof rewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardsABI}__.
 */
export function useRewardsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof rewardsABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof rewardsABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof rewardsABI, TFunctionName, TMode>({ abi: rewardsABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"addOracle"`.
 */
export function useRewardsAddOracle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof rewardsABI, 'addOracle'>['request']['abi'],
        'addOracle',
        TMode
      > & { functionName?: 'addOracle' }
    : UseContractWriteConfig<typeof rewardsABI, 'addOracle', TMode> & {
        abi?: never
        functionName?: 'addOracle'
      } = {} as any
) {
  return useContractWrite<typeof rewardsABI, 'addOracle', TMode>({
    abi: rewardsABI,
    functionName: 'addOracle',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"cleanupReport"`.
 */
export function useRewardsCleanupReport<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof rewardsABI, 'cleanupReport'>['request']['abi'],
        'cleanupReport',
        TMode
      > & { functionName?: 'cleanupReport' }
    : UseContractWriteConfig<typeof rewardsABI, 'cleanupReport', TMode> & {
        abi?: never
        functionName?: 'cleanupReport'
      } = {} as any
) {
  return useContractWrite<typeof rewardsABI, 'cleanupReport', TMode>({
    abi: rewardsABI,
    functionName: 'cleanupReport',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"executeBatchReport"`.
 */
export function useRewardsExecuteBatchReport<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof rewardsABI, 'executeBatchReport'>['request']['abi'],
        'executeBatchReport',
        TMode
      > & { functionName?: 'executeBatchReport' }
    : UseContractWriteConfig<typeof rewardsABI, 'executeBatchReport', TMode> & {
        abi?: never
        functionName?: 'executeBatchReport'
      } = {} as any
) {
  return useContractWrite<typeof rewardsABI, 'executeBatchReport', TMode>({
    abi: rewardsABI,
    functionName: 'executeBatchReport',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"executeSingleReport"`.
 */
export function useRewardsExecuteSingleReport<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof rewardsABI, 'executeSingleReport'>['request']['abi'],
        'executeSingleReport',
        TMode
      > & { functionName?: 'executeSingleReport' }
    : UseContractWriteConfig<typeof rewardsABI, 'executeSingleReport', TMode> & {
        abi?: never
        functionName?: 'executeSingleReport'
      } = {} as any
) {
  return useContractWrite<typeof rewardsABI, 'executeSingleReport', TMode>({
    abi: rewardsABI,
    functionName: 'executeSingleReport',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"executeTimeLockAction"`.
 */
export function useRewardsExecuteTimeLockAction<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof rewardsABI, 'executeTimeLockAction'>['request']['abi'],
        'executeTimeLockAction',
        TMode
      > & { functionName?: 'executeTimeLockAction' }
    : UseContractWriteConfig<typeof rewardsABI, 'executeTimeLockAction', TMode> & {
        abi?: never
        functionName?: 'executeTimeLockAction'
      } = {} as any
) {
  return useContractWrite<typeof rewardsABI, 'executeTimeLockAction', TMode>({
    abi: rewardsABI,
    functionName: 'executeTimeLockAction',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"proposeTimeLockAction"`.
 */
export function useRewardsProposeTimeLockAction<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof rewardsABI, 'proposeTimeLockAction'>['request']['abi'],
        'proposeTimeLockAction',
        TMode
      > & { functionName?: 'proposeTimeLockAction' }
    : UseContractWriteConfig<typeof rewardsABI, 'proposeTimeLockAction', TMode> & {
        abi?: never
        functionName?: 'proposeTimeLockAction'
      } = {} as any
) {
  return useContractWrite<typeof rewardsABI, 'proposeTimeLockAction', TMode>({
    abi: rewardsABI,
    functionName: 'proposeTimeLockAction',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useRewardsRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof rewardsABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof rewardsABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof rewardsABI, 'renounceOwnership', TMode>({
    abi: rewardsABI,
    functionName: 'renounceOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function useRewardsSetStakeTogether<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof rewardsABI, 'setStakeTogether'>['request']['abi'],
        'setStakeTogether',
        TMode
      > & { functionName?: 'setStakeTogether' }
    : UseContractWriteConfig<typeof rewardsABI, 'setStakeTogether', TMode> & {
        abi?: never
        functionName?: 'setStakeTogether'
      } = {} as any
) {
  return useContractWrite<typeof rewardsABI, 'setStakeTogether', TMode>({
    abi: rewardsABI,
    functionName: 'setStakeTogether',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"submitBatchReports"`.
 */
export function useRewardsSubmitBatchReports<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof rewardsABI, 'submitBatchReports'>['request']['abi'],
        'submitBatchReports',
        TMode
      > & { functionName?: 'submitBatchReports' }
    : UseContractWriteConfig<typeof rewardsABI, 'submitBatchReports', TMode> & {
        abi?: never
        functionName?: 'submitBatchReports'
      } = {} as any
) {
  return useContractWrite<typeof rewardsABI, 'submitBatchReports', TMode>({
    abi: rewardsABI,
    functionName: 'submitBatchReports',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"submitSingleReport"`.
 */
export function useRewardsSubmitSingleReport<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof rewardsABI, 'submitSingleReport'>['request']['abi'],
        'submitSingleReport',
        TMode
      > & { functionName?: 'submitSingleReport' }
    : UseContractWriteConfig<typeof rewardsABI, 'submitSingleReport', TMode> & {
        abi?: never
        functionName?: 'submitSingleReport'
      } = {} as any
) {
  return useContractWrite<typeof rewardsABI, 'submitSingleReport', TMode>({
    abi: rewardsABI,
    functionName: 'submitSingleReport',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useRewardsTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof rewardsABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof rewardsABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof rewardsABI, 'transferOwnership', TMode>({
    abi: rewardsABI,
    functionName: 'transferOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardsABI}__.
 */
export function usePrepareRewardsWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof rewardsABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: rewardsABI, ...config } as UsePrepareContractWriteConfig<
    typeof rewardsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"addOracle"`.
 */
export function usePrepareRewardsAddOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardsABI, 'addOracle'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: rewardsABI,
    functionName: 'addOracle',
    ...config
  } as UsePrepareContractWriteConfig<typeof rewardsABI, 'addOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"cleanupReport"`.
 */
export function usePrepareRewardsCleanupReport(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardsABI, 'cleanupReport'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: rewardsABI,
    functionName: 'cleanupReport',
    ...config
  } as UsePrepareContractWriteConfig<typeof rewardsABI, 'cleanupReport'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"executeBatchReport"`.
 */
export function usePrepareRewardsExecuteBatchReport(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardsABI, 'executeBatchReport'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: rewardsABI,
    functionName: 'executeBatchReport',
    ...config
  } as UsePrepareContractWriteConfig<typeof rewardsABI, 'executeBatchReport'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"executeSingleReport"`.
 */
export function usePrepareRewardsExecuteSingleReport(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardsABI, 'executeSingleReport'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: rewardsABI,
    functionName: 'executeSingleReport',
    ...config
  } as UsePrepareContractWriteConfig<typeof rewardsABI, 'executeSingleReport'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"executeTimeLockAction"`.
 */
export function usePrepareRewardsExecuteTimeLockAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardsABI, 'executeTimeLockAction'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: rewardsABI,
    functionName: 'executeTimeLockAction',
    ...config
  } as UsePrepareContractWriteConfig<typeof rewardsABI, 'executeTimeLockAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"proposeTimeLockAction"`.
 */
export function usePrepareRewardsProposeTimeLockAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardsABI, 'proposeTimeLockAction'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: rewardsABI,
    functionName: 'proposeTimeLockAction',
    ...config
  } as UsePrepareContractWriteConfig<typeof rewardsABI, 'proposeTimeLockAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareRewardsRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardsABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: rewardsABI,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof rewardsABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function usePrepareRewardsSetStakeTogether(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardsABI, 'setStakeTogether'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: rewardsABI,
    functionName: 'setStakeTogether',
    ...config
  } as UsePrepareContractWriteConfig<typeof rewardsABI, 'setStakeTogether'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"submitBatchReports"`.
 */
export function usePrepareRewardsSubmitBatchReports(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardsABI, 'submitBatchReports'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: rewardsABI,
    functionName: 'submitBatchReports',
    ...config
  } as UsePrepareContractWriteConfig<typeof rewardsABI, 'submitBatchReports'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"submitSingleReport"`.
 */
export function usePrepareRewardsSubmitSingleReport(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardsABI, 'submitSingleReport'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: rewardsABI,
    functionName: 'submitSingleReport',
    ...config
  } as UsePrepareContractWriteConfig<typeof rewardsABI, 'submitSingleReport'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareRewardsTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardsABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: rewardsABI,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof rewardsABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__.
 */
export function useRewardsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof rewardsABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: rewardsABI, ...config } as UseContractEventConfig<
    typeof rewardsABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"AddOracle"`.
 */
export function useRewardsAddOracleEvent(
  config: Omit<UseContractEventConfig<typeof rewardsABI, 'AddOracle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'AddOracle',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'AddOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"BatchConsensusApprove"`.
 */
export function useRewardsBatchConsensusApproveEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'BatchConsensusApprove'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'BatchConsensusApprove',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'BatchConsensusApprove'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"BatchConsensusReject"`.
 */
export function useRewardsBatchConsensusRejectEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'BatchConsensusReject'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'BatchConsensusReject',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'BatchConsensusReject'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"EtherReceived"`.
 */
export function useRewardsEtherReceivedEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'EtherReceived'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'EtherReceived',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'EtherReceived'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"ExecuteBatchReport"`.
 */
export function useRewardsExecuteBatchReportEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'ExecuteBatchReport'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'ExecuteBatchReport',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'ExecuteBatchReport'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"ExecuteSingleReport"`.
 */
export function useRewardsExecuteSingleReportEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'ExecuteSingleReport'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'ExecuteSingleReport',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'ExecuteSingleReport'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"ExecuteTimeLockAction"`.
 */
export function useRewardsExecuteTimeLockActionEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'ExecuteTimeLockAction'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'ExecuteTimeLockAction',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'ExecuteTimeLockAction'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useRewardsOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"Paused"`.
 */
export function useRewardsPausedEvent(
  config: Omit<UseContractEventConfig<typeof rewardsABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: rewardsABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof rewardsABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"PenalizeOracle"`.
 */
export function useRewardsPenalizeOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'PenalizeOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'PenalizeOracle',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'PenalizeOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"ProposeTimeLockAction"`.
 */
export function useRewardsProposeTimeLockActionEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'ProposeTimeLockAction'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'ProposeTimeLockAction',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'ProposeTimeLockAction'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"RemoveOracle"`.
 */
export function useRewardsRemoveOracleEvent(
  config: Omit<UseContractEventConfig<typeof rewardsABI, 'RemoveOracle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'RemoveOracle',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'RemoveOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"ReportExecuted"`.
 */
export function useRewardsReportExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'ReportExecuted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'ReportExecuted',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'ReportExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"SetBlockReportGrowthLimit"`.
 */
export function useRewardsSetBlockReportGrowthLimitEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'SetBlockReportGrowthLimit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'SetBlockReportGrowthLimit',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'SetBlockReportGrowthLimit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"SetBunkerMode"`.
 */
export function useRewardsSetBunkerModeEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'SetBunkerMode'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'SetBunkerMode',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'SetBunkerMode'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"SetOraclePenalizeLimit"`.
 */
export function useRewardsSetOraclePenalizeLimitEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'SetOraclePenalizeLimit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'SetOraclePenalizeLimit',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'SetOraclePenalizeLimit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"SetOracleQuorum"`.
 */
export function useRewardsSetOracleQuorumEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'SetOracleQuorum'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'SetOracleQuorum',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'SetOracleQuorum'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"SetReportFrequency"`.
 */
export function useRewardsSetReportFrequencyEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'SetReportFrequency'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'SetReportFrequency',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'SetReportFrequency'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"SetReportGrowthLimit"`.
 */
export function useRewardsSetReportGrowthLimitEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'SetReportGrowthLimit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'SetReportGrowthLimit',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'SetReportGrowthLimit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useRewardsSetStakeTogetherEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'SetStakeTogether'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"SetTimeLockDuration"`.
 */
export function useRewardsSetTimeLockDurationEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'SetTimeLockDuration'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'SetTimeLockDuration',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'SetTimeLockDuration'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"SingleAndBatchesConsensusApprove"`.
 */
export function useRewardsSingleAndBatchesConsensusApproveEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'SingleAndBatchesConsensusApprove'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'SingleAndBatchesConsensusApprove',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'SingleAndBatchesConsensusApprove'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"SingleConsensusApprove"`.
 */
export function useRewardsSingleConsensusApproveEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'SingleConsensusApprove'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'SingleConsensusApprove',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'SingleConsensusApprove'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"SingleConsensusReject"`.
 */
export function useRewardsSingleConsensusRejectEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'SingleConsensusReject'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'SingleConsensusReject',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'SingleConsensusReject'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"SubmitBatchReport"`.
 */
export function useRewardsSubmitBatchReportEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'SubmitBatchReport'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'SubmitBatchReport',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'SubmitBatchReport'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"SubmitSingleReport"`.
 */
export function useRewardsSubmitSingleReportEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardsABI, 'SubmitSingleReport'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: rewardsABI,
    eventName: 'SubmitSingleReport',
    ...config
  } as UseContractEventConfig<typeof rewardsABI, 'SubmitSingleReport'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardsABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useRewardsUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof rewardsABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: rewardsABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof rewardsABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function useStakeTogetherRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useStakeTogetherDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"allowance"`.
 */
export function useStakeTogetherAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useStakeTogetherBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"basisPoints"`.
 */
export function useStakeTogetherBasisPoints<
  TFunctionName extends 'basisPoints',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'basisPoints',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"beaconBalance"`.
 */
export function useStakeTogetherBeaconBalance<
  TFunctionName extends 'beaconBalance',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'beaconBalance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"blocksPerDay"`.
 */
export function useStakeTogetherBlocksPerDay<
  TFunctionName extends 'blocksPerDay',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'blocksPerDay',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"contractBalance"`.
 */
export function useStakeTogetherContractBalance<
  TFunctionName extends 'contractBalance',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'contractBalance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"decimals"`.
 */
export function useStakeTogetherDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"delegationSharesOf"`.
 */
export function useStakeTogetherDelegationSharesOf<
  TFunctionName extends 'delegationSharesOf',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'delegationSharesOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositContract"`.
 */
export function useStakeTogetherDepositContract<
  TFunctionName extends 'depositContract',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'depositContract',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositLimit"`.
 */
export function useStakeTogetherDepositLimit<
  TFunctionName extends 'depositLimit',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'depositLimit',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useStakeTogetherEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getPools"`.
 */
export function useStakeTogetherGetPools<
  TFunctionName extends 'getPools',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getPools',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getSharesByPooledEth"`.
 */
export function useStakeTogetherGetSharesByPooledEth<
  TFunctionName extends 'getSharesByPooledEth',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getSharesByPooledEth',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"isValidator"`.
 */
export function useStakeTogetherIsValidator<
  TFunctionName extends 'isValidator',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'isValidator',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"lastResetBlock"`.
 */
export function useStakeTogetherLastResetBlock<
  TFunctionName extends 'lastResetBlock',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'lastResetBlock',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"liquidityBufferBalance"`.
 */
export function useStakeTogetherLiquidityBufferBalance<
  TFunctionName extends 'liquidityBufferBalance',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'liquidityBufferBalance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"liquidityFeeAddress"`.
 */
export function useStakeTogetherLiquidityFeeAddress<
  TFunctionName extends 'liquidityFeeAddress',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'liquidityFeeAddress',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"maxDelegations"`.
 */
export function useStakeTogetherMaxDelegations<
  TFunctionName extends 'maxDelegations',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'maxDelegations',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"maxPools"`.
 */
export function useStakeTogetherMaxPools<
  TFunctionName extends 'maxPools',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'maxPools',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"minDepositAmount"`.
 */
export function useStakeTogetherMinDepositAmount<
  TFunctionName extends 'minDepositAmount',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'minDepositAmount',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"name"`.
 */
export function useStakeTogetherName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"newPoolFee"`.
 */
export function useStakeTogetherNewPoolFee<
  TFunctionName extends 'newPoolFee',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'newPoolFee',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"newPoolFeeAddress"`.
 */
export function useStakeTogetherNewPoolFeeAddress<
  TFunctionName extends 'newPoolFeeAddress',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'newPoolFeeAddress',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"nonces"`.
 */
export function useStakeTogetherNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'nonces',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"operatorFee"`.
 */
export function useStakeTogetherOperatorFee<
  TFunctionName extends 'operatorFee',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'operatorFee',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"operatorFeeAddress"`.
 */
export function useStakeTogetherOperatorFeeAddress<
  TFunctionName extends 'operatorFeeAddress',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'operatorFeeAddress',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"owner"`.
 */
export function useStakeTogetherOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'owner',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"paused"`.
 */
export function useStakeTogetherPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'paused',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"poolBalance"`.
 */
export function useStakeTogetherPoolBalance<
  TFunctionName extends 'poolBalance',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'poolBalance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"poolFee"`.
 */
export function useStakeTogetherPoolFee<
  TFunctionName extends 'poolFee',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'poolFee',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"poolModuleAddress"`.
 */
export function useStakeTogetherPoolModuleAddress<
  TFunctionName extends 'poolModuleAddress',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'poolModuleAddress',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"poolSharesOf"`.
 */
export function useStakeTogetherPoolSharesOf<
  TFunctionName extends 'poolSharesOf',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'poolSharesOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"poolSize"`.
 */
export function useStakeTogetherPoolSize<
  TFunctionName extends 'poolSize',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'poolSize',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"pooledEthByShares"`.
 */
export function useStakeTogetherPooledEthByShares<
  TFunctionName extends 'pooledEthByShares',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'pooledEthByShares',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"rewardsContract"`.
 */
export function useStakeTogetherRewardsContract<
  TFunctionName extends 'rewardsContract',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'rewardsContract',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"sharesOf"`.
 */
export function useStakeTogetherSharesOf<
  TFunctionName extends 'sharesOf',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'sharesOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"stakeTogetherFee"`.
 */
export function useStakeTogetherStakeTogetherFee<
  TFunctionName extends 'stakeTogetherFee',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'stakeTogetherFee',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"stakeTogetherFeeAddress"`.
 */
export function useStakeTogetherStakeTogetherFeeAddress<
  TFunctionName extends 'stakeTogetherFeeAddress',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'stakeTogetherFeeAddress',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"symbol"`.
 */
export function useStakeTogetherSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalDeposited"`.
 */
export function useStakeTogetherTotalDeposited<
  TFunctionName extends 'totalDeposited',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalDeposited',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalEtherSupply"`.
 */
export function useStakeTogetherTotalEtherSupply<
  TFunctionName extends 'totalEtherSupply',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalEtherSupply',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalPoolShares"`.
 */
export function useStakeTogetherTotalPoolShares<
  TFunctionName extends 'totalPoolShares',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalPoolShares',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalPooledEther"`.
 */
export function useStakeTogetherTotalPooledEther<
  TFunctionName extends 'totalPooledEther',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalPooledEther',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalShares"`.
 */
export function useStakeTogetherTotalShares<
  TFunctionName extends 'totalShares',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalShares',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useStakeTogetherTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalValidators"`.
 */
export function useStakeTogetherTotalValidators<
  TFunctionName extends 'totalValidators',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalValidators',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalWithdrawn"`.
 */
export function useStakeTogetherTotalWithdrawn<
  TFunctionName extends 'totalWithdrawn',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalWithdrawn',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"validatorFee"`.
 */
export function useStakeTogetherValidatorFee<
  TFunctionName extends 'validatorFee',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'validatorFee',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"validatorFeeAddress"`.
 */
export function useStakeTogetherValidatorFeeAddress<
  TFunctionName extends 'validatorFeeAddress',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'validatorFeeAddress',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"validatorModuleAddress"`.
 */
export function useStakeTogetherValidatorModuleAddress<
  TFunctionName extends 'validatorModuleAddress',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'validatorModuleAddress',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"validatorSize"`.
 */
export function useStakeTogetherValidatorSize<
  TFunctionName extends 'validatorSize',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'validatorSize',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"validators"`.
 */
export function useStakeTogetherValidators<
  TFunctionName extends 'validators',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'validators',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"walletDepositLimit"`.
 */
export function useStakeTogetherWalletDepositLimit<
  TFunctionName extends 'walletDepositLimit',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'walletDepositLimit',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawalCredentials"`.
 */
export function useStakeTogetherWithdrawalCredentials<
  TFunctionName extends 'withdrawalCredentials',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'withdrawalCredentials',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawalLimit"`.
 */
export function useStakeTogetherWithdrawalLimit<
  TFunctionName extends 'withdrawalLimit',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'withdrawalLimit',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawalsBalance"`.
 */
export function useStakeTogetherWithdrawalsBalance<
  TFunctionName extends 'withdrawalsBalance',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'withdrawalsBalance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function useStakeTogetherWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof stakeTogetherABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, TFunctionName, TMode>({
    abi: stakeTogetherABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"addPool"`.
 */
export function useStakeTogetherAddPool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'addPool'>['request']['abi'],
        'addPool',
        TMode
      > & { functionName?: 'addPool' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'addPool', TMode> & {
        abi?: never
        functionName?: 'addPool'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'addPool', TMode>({
    abi: stakeTogetherABI,
    functionName: 'addPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"approve"`.
 */
export function useStakeTogetherApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'approve', TMode>({
    abi: stakeTogetherABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"createValidator"`.
 */
export function useStakeTogetherCreateValidator<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'createValidator'>['request']['abi'],
        'createValidator',
        TMode
      > & { functionName?: 'createValidator' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'createValidator', TMode> & {
        abi?: never
        functionName?: 'createValidator'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'createValidator', TMode>({
    abi: stakeTogetherABI,
    functionName: 'createValidator',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useStakeTogetherDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'decreaseAllowance', TMode>({
    abi: stakeTogetherABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositLiquidityBuffer"`.
 */
export function useStakeTogetherDepositLiquidityBuffer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'depositLiquidityBuffer'>['request']['abi'],
        'depositLiquidityBuffer',
        TMode
      > & { functionName?: 'depositLiquidityBuffer' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'depositLiquidityBuffer', TMode> & {
        abi?: never
        functionName?: 'depositLiquidityBuffer'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'depositLiquidityBuffer', TMode>({
    abi: stakeTogetherABI,
    functionName: 'depositLiquidityBuffer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositPool"`.
 */
export function useStakeTogetherDepositPool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'depositPool'>['request']['abi'],
        'depositPool',
        TMode
      > & { functionName?: 'depositPool' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'depositPool', TMode> & {
        abi?: never
        functionName?: 'depositPool'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'depositPool', TMode>({
    abi: stakeTogetherABI,
    functionName: 'depositPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"donationDepositPool"`.
 */
export function useStakeTogetherDonationDepositPool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'donationDepositPool'>['request']['abi'],
        'donationDepositPool',
        TMode
      > & { functionName?: 'donationDepositPool' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'donationDepositPool', TMode> & {
        abi?: never
        functionName?: 'donationDepositPool'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'donationDepositPool', TMode>({
    abi: stakeTogetherABI,
    functionName: 'donationDepositPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useStakeTogetherIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'increaseAllowance', TMode>({
    abi: stakeTogetherABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"mintLoss"`.
 */
export function useStakeTogetherMintLoss<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'mintLoss'>['request']['abi'],
        'mintLoss',
        TMode
      > & { functionName?: 'mintLoss' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'mintLoss', TMode> & {
        abi?: never
        functionName?: 'mintLoss'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'mintLoss', TMode>({
    abi: stakeTogetherABI,
    functionName: 'mintLoss',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"mintRewards"`.
 */
export function useStakeTogetherMintRewards<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'mintRewards'>['request']['abi'],
        'mintRewards',
        TMode
      > & { functionName?: 'mintRewards' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'mintRewards', TMode> & {
        abi?: never
        functionName?: 'mintRewards'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'mintRewards', TMode>({
    abi: stakeTogetherABI,
    functionName: 'mintRewards',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"pause"`.
 */
export function useStakeTogetherPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'pause', TMode>({
    abi: stakeTogetherABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"permit"`.
 */
export function useStakeTogetherPermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'permit', TMode>({
    abi: stakeTogetherABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"removePool"`.
 */
export function useStakeTogetherRemovePool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'removePool'>['request']['abi'],
        'removePool',
        TMode
      > & { functionName?: 'removePool' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'removePool', TMode> & {
        abi?: never
        functionName?: 'removePool'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'removePool', TMode>({
    abi: stakeTogetherABI,
    functionName: 'removePool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"removeValidator"`.
 */
export function useStakeTogetherRemoveValidator<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'removeValidator'>['request']['abi'],
        'removeValidator',
        TMode
      > & { functionName?: 'removeValidator' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'removeValidator', TMode> & {
        abi?: never
        functionName?: 'removeValidator'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'removeValidator', TMode>({
    abi: stakeTogetherABI,
    functionName: 'removeValidator',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useStakeTogetherRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'renounceOwnership', TMode>({
    abi: stakeTogetherABI,
    functionName: 'renounceOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setBlocksInterval"`.
 */
export function useStakeTogetherSetBlocksInterval<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setBlocksInterval'>['request']['abi'],
        'setBlocksInterval',
        TMode
      > & { functionName?: 'setBlocksInterval' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setBlocksInterval', TMode> & {
        abi?: never
        functionName?: 'setBlocksInterval'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setBlocksInterval', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setBlocksInterval',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setDepositLimit"`.
 */
export function useStakeTogetherSetDepositLimit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setDepositLimit'>['request']['abi'],
        'setDepositLimit',
        TMode
      > & { functionName?: 'setDepositLimit' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setDepositLimit', TMode> & {
        abi?: never
        functionName?: 'setDepositLimit'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setDepositLimit', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setDepositLimit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setLiquidityFeeAddress"`.
 */
export function useStakeTogetherSetLiquidityFeeAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setLiquidityFeeAddress'>['request']['abi'],
        'setLiquidityFeeAddress',
        TMode
      > & { functionName?: 'setLiquidityFeeAddress' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setLiquidityFeeAddress', TMode> & {
        abi?: never
        functionName?: 'setLiquidityFeeAddress'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setLiquidityFeeAddress', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setLiquidityFeeAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setMaxPools"`.
 */
export function useStakeTogetherSetMaxPools<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setMaxPools'>['request']['abi'],
        'setMaxPools',
        TMode
      > & { functionName?: 'setMaxPools' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setMaxPools', TMode> & {
        abi?: never
        functionName?: 'setMaxPools'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setMaxPools', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setMaxPools',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setMinDepositPoolAmount"`.
 */
export function useStakeTogetherSetMinDepositPoolAmount<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setMinDepositPoolAmount'>['request']['abi'],
        'setMinDepositPoolAmount',
        TMode
      > & { functionName?: 'setMinDepositPoolAmount' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setMinDepositPoolAmount', TMode> & {
        abi?: never
        functionName?: 'setMinDepositPoolAmount'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setMinDepositPoolAmount', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setMinDepositPoolAmount',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setNewPoolFee"`.
 */
export function useStakeTogetherSetNewPoolFee<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setNewPoolFee'>['request']['abi'],
        'setNewPoolFee',
        TMode
      > & { functionName?: 'setNewPoolFee' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setNewPoolFee', TMode> & {
        abi?: never
        functionName?: 'setNewPoolFee'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setNewPoolFee', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setNewPoolFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setOperatorFee"`.
 */
export function useStakeTogetherSetOperatorFee<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setOperatorFee'>['request']['abi'],
        'setOperatorFee',
        TMode
      > & { functionName?: 'setOperatorFee' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setOperatorFee', TMode> & {
        abi?: never
        functionName?: 'setOperatorFee'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setOperatorFee', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setOperatorFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setOperatorFeeAddress"`.
 */
export function useStakeTogetherSetOperatorFeeAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setOperatorFeeAddress'>['request']['abi'],
        'setOperatorFeeAddress',
        TMode
      > & { functionName?: 'setOperatorFeeAddress' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setOperatorFeeAddress', TMode> & {
        abi?: never
        functionName?: 'setOperatorFeeAddress'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setOperatorFeeAddress', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setOperatorFeeAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setPoolFee"`.
 */
export function useStakeTogetherSetPoolFee<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setPoolFee'>['request']['abi'],
        'setPoolFee',
        TMode
      > & { functionName?: 'setPoolFee' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setPoolFee', TMode> & {
        abi?: never
        functionName?: 'setPoolFee'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setPoolFee', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setPoolFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setPoolFeeAddress"`.
 */
export function useStakeTogetherSetPoolFeeAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setPoolFeeAddress'>['request']['abi'],
        'setPoolFeeAddress',
        TMode
      > & { functionName?: 'setPoolFeeAddress' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setPoolFeeAddress', TMode> & {
        abi?: never
        functionName?: 'setPoolFeeAddress'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setPoolFeeAddress', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setPoolFeeAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setPoolModuleAddress"`.
 */
export function useStakeTogetherSetPoolModuleAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setPoolModuleAddress'>['request']['abi'],
        'setPoolModuleAddress',
        TMode
      > & { functionName?: 'setPoolModuleAddress' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setPoolModuleAddress', TMode> & {
        abi?: never
        functionName?: 'setPoolModuleAddress'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setPoolModuleAddress', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setPoolModuleAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setPoolSize"`.
 */
export function useStakeTogetherSetPoolSize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setPoolSize'>['request']['abi'],
        'setPoolSize',
        TMode
      > & { functionName?: 'setPoolSize' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setPoolSize', TMode> & {
        abi?: never
        functionName?: 'setPoolSize'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setPoolSize', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setPoolSize',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setStakeTogetherFee"`.
 */
export function useStakeTogetherSetStakeTogetherFee<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setStakeTogetherFee'>['request']['abi'],
        'setStakeTogetherFee',
        TMode
      > & { functionName?: 'setStakeTogetherFee' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setStakeTogetherFee', TMode> & {
        abi?: never
        functionName?: 'setStakeTogetherFee'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setStakeTogetherFee', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setStakeTogetherFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setStakeTogetherFeeAddress"`.
 */
export function useStakeTogetherSetStakeTogetherFeeAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakeTogetherABI,
          'setStakeTogetherFeeAddress'
        >['request']['abi'],
        'setStakeTogetherFeeAddress',
        TMode
      > & { functionName?: 'setStakeTogetherFeeAddress' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setStakeTogetherFeeAddress', TMode> & {
        abi?: never
        functionName?: 'setStakeTogetherFeeAddress'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setStakeTogetherFeeAddress', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setStakeTogetherFeeAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setValidatorFee"`.
 */
export function useStakeTogetherSetValidatorFee<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setValidatorFee'>['request']['abi'],
        'setValidatorFee',
        TMode
      > & { functionName?: 'setValidatorFee' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setValidatorFee', TMode> & {
        abi?: never
        functionName?: 'setValidatorFee'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setValidatorFee', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setValidatorFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setValidatorFeeAddress"`.
 */
export function useStakeTogetherSetValidatorFeeAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setValidatorFeeAddress'>['request']['abi'],
        'setValidatorFeeAddress',
        TMode
      > & { functionName?: 'setValidatorFeeAddress' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setValidatorFeeAddress', TMode> & {
        abi?: never
        functionName?: 'setValidatorFeeAddress'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setValidatorFeeAddress', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setValidatorFeeAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setValidatorModuleAddress"`.
 */
export function useStakeTogetherSetValidatorModuleAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakeTogetherABI,
          'setValidatorModuleAddress'
        >['request']['abi'],
        'setValidatorModuleAddress',
        TMode
      > & { functionName?: 'setValidatorModuleAddress' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setValidatorModuleAddress', TMode> & {
        abi?: never
        functionName?: 'setValidatorModuleAddress'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setValidatorModuleAddress', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setValidatorModuleAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setValidatorSize"`.
 */
export function useStakeTogetherSetValidatorSize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setValidatorSize'>['request']['abi'],
        'setValidatorSize',
        TMode
      > & { functionName?: 'setValidatorSize' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setValidatorSize', TMode> & {
        abi?: never
        functionName?: 'setValidatorSize'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setValidatorSize', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setValidatorSize',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setWalletDepositLimit"`.
 */
export function useStakeTogetherSetWalletDepositLimit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setWalletDepositLimit'>['request']['abi'],
        'setWalletDepositLimit',
        TMode
      > & { functionName?: 'setWalletDepositLimit' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setWalletDepositLimit', TMode> & {
        abi?: never
        functionName?: 'setWalletDepositLimit'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setWalletDepositLimit', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setWalletDepositLimit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setWithdrawalCredentials"`.
 */
export function useStakeTogetherSetWithdrawalCredentials<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setWithdrawalCredentials'>['request']['abi'],
        'setWithdrawalCredentials',
        TMode
      > & { functionName?: 'setWithdrawalCredentials' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setWithdrawalCredentials', TMode> & {
        abi?: never
        functionName?: 'setWithdrawalCredentials'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setWithdrawalCredentials', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setWithdrawalCredentials',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setWithdrawalLimit"`.
 */
export function useStakeTogetherSetWithdrawalLimit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setWithdrawalLimit'>['request']['abi'],
        'setWithdrawalLimit',
        TMode
      > & { functionName?: 'setWithdrawalLimit' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setWithdrawalLimit', TMode> & {
        abi?: never
        functionName?: 'setWithdrawalLimit'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setWithdrawalLimit', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setWithdrawalLimit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transfer"`.
 */
export function useStakeTogetherTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'transfer', TMode>({
    abi: stakeTogetherABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useStakeTogetherTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'transferFrom', TMode>({
    abi: stakeTogetherABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useStakeTogetherTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'transferOwnership', TMode>({
    abi: stakeTogetherABI,
    functionName: 'transferOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferPoolShares"`.
 */
export function useStakeTogetherTransferPoolShares<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferPoolShares'>['request']['abi'],
        'transferPoolShares',
        TMode
      > & { functionName?: 'transferPoolShares' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'transferPoolShares', TMode> & {
        abi?: never
        functionName?: 'transferPoolShares'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'transferPoolShares', TMode>({
    abi: stakeTogetherABI,
    functionName: 'transferPoolShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferShares"`.
 */
export function useStakeTogetherTransferShares<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferShares'>['request']['abi'],
        'transferShares',
        TMode
      > & { functionName?: 'transferShares' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'transferShares', TMode> & {
        abi?: never
        functionName?: 'transferShares'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'transferShares', TMode>({
    abi: stakeTogetherABI,
    functionName: 'transferShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferSharesFrom"`.
 */
export function useStakeTogetherTransferSharesFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferSharesFrom'>['request']['abi'],
        'transferSharesFrom',
        TMode
      > & { functionName?: 'transferSharesFrom' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'transferSharesFrom', TMode> & {
        abi?: never
        functionName?: 'transferSharesFrom'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'transferSharesFrom', TMode>({
    abi: stakeTogetherABI,
    functionName: 'transferSharesFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"unpause"`.
 */
export function useStakeTogetherUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'unpause', TMode>({
    abi: stakeTogetherABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawLiquidityBuffer"`.
 */
export function useStakeTogetherWithdrawLiquidityBuffer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'withdrawLiquidityBuffer'>['request']['abi'],
        'withdrawLiquidityBuffer',
        TMode
      > & { functionName?: 'withdrawLiquidityBuffer' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'withdrawLiquidityBuffer', TMode> & {
        abi?: never
        functionName?: 'withdrawLiquidityBuffer'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'withdrawLiquidityBuffer', TMode>({
    abi: stakeTogetherABI,
    functionName: 'withdrawLiquidityBuffer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawPool"`.
 */
export function useStakeTogetherWithdrawPool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'withdrawPool'>['request']['abi'],
        'withdrawPool',
        TMode
      > & { functionName?: 'withdrawPool' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'withdrawPool', TMode> & {
        abi?: never
        functionName?: 'withdrawPool'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'withdrawPool', TMode>({
    abi: stakeTogetherABI,
    functionName: 'withdrawPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function usePrepareStakeTogetherWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof stakeTogetherABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: stakeTogetherABI, ...config } as UsePrepareContractWriteConfig<
    typeof stakeTogetherABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"addPool"`.
 */
export function usePrepareStakeTogetherAddPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'addPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'addPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'addPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareStakeTogetherApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"createValidator"`.
 */
export function usePrepareStakeTogetherCreateValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'createValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'createValidator',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'createValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareStakeTogetherDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositLiquidityBuffer"`.
 */
export function usePrepareStakeTogetherDepositLiquidityBuffer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'depositLiquidityBuffer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'depositLiquidityBuffer',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'depositLiquidityBuffer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositPool"`.
 */
export function usePrepareStakeTogetherDepositPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'depositPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'depositPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'depositPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"donationDepositPool"`.
 */
export function usePrepareStakeTogetherDonationDepositPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'donationDepositPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'donationDepositPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'donationDepositPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareStakeTogetherIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"mintLoss"`.
 */
export function usePrepareStakeTogetherMintLoss(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'mintLoss'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'mintLoss',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'mintLoss'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"mintRewards"`.
 */
export function usePrepareStakeTogetherMintRewards(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'mintRewards'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'mintRewards',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'mintRewards'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareStakeTogetherPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareStakeTogetherPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"removePool"`.
 */
export function usePrepareStakeTogetherRemovePool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'removePool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'removePool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'removePool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"removeValidator"`.
 */
export function usePrepareStakeTogetherRemoveValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'removeValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'removeValidator',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'removeValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareStakeTogetherRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setBlocksInterval"`.
 */
export function usePrepareStakeTogetherSetBlocksInterval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setBlocksInterval'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setBlocksInterval',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setBlocksInterval'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setDepositLimit"`.
 */
export function usePrepareStakeTogetherSetDepositLimit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setDepositLimit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setDepositLimit',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setDepositLimit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setLiquidityFeeAddress"`.
 */
export function usePrepareStakeTogetherSetLiquidityFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setLiquidityFeeAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setLiquidityFeeAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setLiquidityFeeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setMaxPools"`.
 */
export function usePrepareStakeTogetherSetMaxPools(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setMaxPools'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setMaxPools',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setMaxPools'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setMinDepositPoolAmount"`.
 */
export function usePrepareStakeTogetherSetMinDepositPoolAmount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setMinDepositPoolAmount'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setMinDepositPoolAmount',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setMinDepositPoolAmount'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setNewPoolFee"`.
 */
export function usePrepareStakeTogetherSetNewPoolFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setNewPoolFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setNewPoolFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setNewPoolFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setOperatorFee"`.
 */
export function usePrepareStakeTogetherSetOperatorFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setOperatorFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setOperatorFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setOperatorFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setOperatorFeeAddress"`.
 */
export function usePrepareStakeTogetherSetOperatorFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setOperatorFeeAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setOperatorFeeAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setOperatorFeeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setPoolFee"`.
 */
export function usePrepareStakeTogetherSetPoolFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setPoolFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setPoolFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setPoolFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setPoolFeeAddress"`.
 */
export function usePrepareStakeTogetherSetPoolFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setPoolFeeAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setPoolFeeAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setPoolFeeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setPoolModuleAddress"`.
 */
export function usePrepareStakeTogetherSetPoolModuleAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setPoolModuleAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setPoolModuleAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setPoolModuleAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setPoolSize"`.
 */
export function usePrepareStakeTogetherSetPoolSize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setPoolSize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setPoolSize',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setPoolSize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setStakeTogetherFee"`.
 */
export function usePrepareStakeTogetherSetStakeTogetherFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setStakeTogetherFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setStakeTogetherFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setStakeTogetherFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setStakeTogetherFeeAddress"`.
 */
export function usePrepareStakeTogetherSetStakeTogetherFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setStakeTogetherFeeAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setStakeTogetherFeeAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setStakeTogetherFeeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setValidatorFee"`.
 */
export function usePrepareStakeTogetherSetValidatorFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setValidatorFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setValidatorFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setValidatorFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setValidatorFeeAddress"`.
 */
export function usePrepareStakeTogetherSetValidatorFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setValidatorFeeAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setValidatorFeeAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setValidatorFeeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setValidatorModuleAddress"`.
 */
export function usePrepareStakeTogetherSetValidatorModuleAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setValidatorModuleAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setValidatorModuleAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setValidatorModuleAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setValidatorSize"`.
 */
export function usePrepareStakeTogetherSetValidatorSize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setValidatorSize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setValidatorSize',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setValidatorSize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setWalletDepositLimit"`.
 */
export function usePrepareStakeTogetherSetWalletDepositLimit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setWalletDepositLimit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setWalletDepositLimit',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setWalletDepositLimit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setWithdrawalCredentials"`.
 */
export function usePrepareStakeTogetherSetWithdrawalCredentials(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setWithdrawalCredentials'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setWithdrawalCredentials',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setWithdrawalCredentials'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setWithdrawalLimit"`.
 */
export function usePrepareStakeTogetherSetWithdrawalLimit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setWithdrawalLimit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setWithdrawalLimit',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setWithdrawalLimit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareStakeTogetherTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareStakeTogetherTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareStakeTogetherTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferPoolShares"`.
 */
export function usePrepareStakeTogetherTransferPoolShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferPoolShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferPoolShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferPoolShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferShares"`.
 */
export function usePrepareStakeTogetherTransferShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferSharesFrom"`.
 */
export function usePrepareStakeTogetherTransferSharesFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferSharesFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferSharesFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferSharesFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareStakeTogetherUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawLiquidityBuffer"`.
 */
export function usePrepareStakeTogetherWithdrawLiquidityBuffer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawLiquidityBuffer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'withdrawLiquidityBuffer',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawLiquidityBuffer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawPool"`.
 */
export function usePrepareStakeTogetherWithdrawPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'withdrawPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function useStakeTogetherEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: stakeTogetherABI, ...config } as UseContractEventConfig<
    typeof stakeTogetherABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"AddPool"`.
 */
export function useStakeTogetherAddPoolEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'AddPool'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'AddPool',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'AddPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Approval"`.
 */
export function useStakeTogetherApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Bootstrap"`.
 */
export function useStakeTogetherBootstrapEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'Bootstrap'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Bootstrap',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Bootstrap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"BurnPoolShares"`.
 */
export function useStakeTogetherBurnPoolSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'BurnPoolShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'BurnPoolShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'BurnPoolShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"BurnShares"`.
 */
export function useStakeTogetherBurnSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'BurnShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'BurnShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'BurnShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"CreateValidator"`.
 */
export function useStakeTogetherCreateValidatorEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'CreateValidator'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'CreateValidator',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'CreateValidator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"DepositLimitReached"`.
 */
export function useStakeTogetherDepositLimitReachedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'DepositLimitReached'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'DepositLimitReached',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'DepositLimitReached'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"DepositLiquidityBuffer"`.
 */
export function useStakeTogetherDepositLiquidityBufferEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'DepositLiquidityBuffer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'DepositLiquidityBuffer',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'DepositLiquidityBuffer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"DepositPool"`.
 */
export function useStakeTogetherDepositPoolEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'DepositPool'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'DepositPool',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'DepositPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"DonationDepositPool"`.
 */
export function useStakeTogetherDonationDepositPoolEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'DonationDepositPool'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'DonationDepositPool',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'DonationDepositPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useStakeTogetherEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"EtherReceived"`.
 */
export function useStakeTogetherEtherReceivedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'EtherReceived'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'EtherReceived',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'EtherReceived'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintLoss"`.
 */
export function useStakeTogetherMintLossEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'MintLoss'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintLoss',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintLoss'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintPoolShares"`.
 */
export function useStakeTogetherMintPoolSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'MintPoolShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintPoolShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintPoolShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintRewards"`.
 */
export function useStakeTogetherMintRewardsEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'MintRewards'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintRewards',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintShares"`.
 */
export function useStakeTogetherMintSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'MintShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useStakeTogetherOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Paused"`.
 */
export function useStakeTogetherPausedEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Paused',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"RemovePool"`.
 */
export function useStakeTogetherRemovePoolEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'RemovePool'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'RemovePool',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'RemovePool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"RemoveValidator"`.
 */
export function useStakeTogetherRemoveValidatorEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'RemoveValidator'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'RemoveValidator',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'RemoveValidator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetBlocksInterval"`.
 */
export function useStakeTogetherSetBlocksIntervalEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetBlocksInterval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetBlocksInterval',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetBlocksInterval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetDepositLimit"`.
 */
export function useStakeTogetherSetDepositLimitEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetDepositLimit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetDepositLimit',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetDepositLimit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetLiquidityFeeAddress"`.
 */
export function useStakeTogetherSetLiquidityFeeAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetLiquidityFeeAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetLiquidityFeeAddress',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetLiquidityFeeAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetMaxPools"`.
 */
export function useStakeTogetherSetMaxPoolsEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetMaxPools'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetMaxPools',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetMaxPools'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetMinDepositPoolAmount"`.
 */
export function useStakeTogetherSetMinDepositPoolAmountEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetMinDepositPoolAmount'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetMinDepositPoolAmount',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetMinDepositPoolAmount'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetNewPoolFee"`.
 */
export function useStakeTogetherSetNewPoolFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetNewPoolFee'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetNewPoolFee',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetNewPoolFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetNewPoolFeeAddress"`.
 */
export function useStakeTogetherSetNewPoolFeeAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetNewPoolFeeAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetNewPoolFeeAddress',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetNewPoolFeeAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetOperatorFee"`.
 */
export function useStakeTogetherSetOperatorFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetOperatorFee'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetOperatorFee',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetOperatorFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetOperatorFeeAddress"`.
 */
export function useStakeTogetherSetOperatorFeeAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetOperatorFeeAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetOperatorFeeAddress',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetOperatorFeeAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetPoolFee"`.
 */
export function useStakeTogetherSetPoolFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetPoolFee'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetPoolFee',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetPoolFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetPoolModuleAddress"`.
 */
export function useStakeTogetherSetPoolModuleAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetPoolModuleAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetPoolModuleAddress',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetPoolModuleAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetPoolSize"`.
 */
export function useStakeTogetherSetPoolSizeEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetPoolSize'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetPoolSize',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetPoolSize'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetStakeTogetherFee"`.
 */
export function useStakeTogetherSetStakeTogetherFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetStakeTogetherFee'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetStakeTogetherFee',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetStakeTogetherFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetStakeTogetherFeeAddress"`.
 */
export function useStakeTogetherSetStakeTogetherFeeAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetStakeTogetherFeeAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetStakeTogetherFeeAddress',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetStakeTogetherFeeAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetValidatorFee"`.
 */
export function useStakeTogetherSetValidatorFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetValidatorFee'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetValidatorFee',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetValidatorFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetValidatorFeeAddress"`.
 */
export function useStakeTogetherSetValidatorFeeAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetValidatorFeeAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetValidatorFeeAddress',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetValidatorFeeAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetValidatorModuleAddress"`.
 */
export function useStakeTogetherSetValidatorModuleAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetValidatorModuleAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetValidatorModuleAddress',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetValidatorModuleAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetValidatorSize"`.
 */
export function useStakeTogetherSetValidatorSizeEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetValidatorSize'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetValidatorSize',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetValidatorSize'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetWalletDepositLimit"`.
 */
export function useStakeTogetherSetWalletDepositLimitEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetWalletDepositLimit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetWalletDepositLimit',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetWalletDepositLimit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetWithdrawalCredentials"`.
 */
export function useStakeTogetherSetWithdrawalCredentialsEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetWithdrawalCredentials'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetWithdrawalCredentials',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetWithdrawalCredentials'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetWithdrawalLimit"`.
 */
export function useStakeTogetherSetWithdrawalLimitEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetWithdrawalLimit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetWithdrawalLimit',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetWithdrawalLimit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Transfer"`.
 */
export function useStakeTogetherTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"TransferPoolShares"`.
 */
export function useStakeTogetherTransferPoolSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'TransferPoolShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'TransferPoolShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'TransferPoolShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"TransferShares"`.
 */
export function useStakeTogetherTransferSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'TransferShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'TransferShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'TransferShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useStakeTogetherUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Unpaused',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"WalletDepositLimitReached"`.
 */
export function useStakeTogetherWalletDepositLimitReachedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'WalletDepositLimitReached'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'WalletDepositLimitReached',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'WalletDepositLimitReached'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"WithdrawLiquidityBuffer"`.
 */
export function useStakeTogetherWithdrawLiquidityBufferEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawLiquidityBuffer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'WithdrawLiquidityBuffer',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawLiquidityBuffer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"WithdrawPool"`.
 */
export function useStakeTogetherWithdrawPoolEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawPool'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'WithdrawPool',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"WithdrawalLimitReached"`.
 */
export function useStakeTogetherWithdrawalLimitReachedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawalLimitReached'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'WithdrawalLimitReached',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawalLimitReached'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__.
 */
export function useSethRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: sethABI, ...config } as UseContractReadConfig<
    typeof sethABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useSethDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"allowance"`.
 */
export function useSethAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof sethABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useSethBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof sethABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"basisPoints"`.
 */
export function useSethBasisPoints<
  TFunctionName extends 'basisPoints',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'basisPoints',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"beaconBalance"`.
 */
export function useSethBeaconBalance<
  TFunctionName extends 'beaconBalance',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'beaconBalance',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"contractBalance"`.
 */
export function useSethContractBalance<
  TFunctionName extends 'contractBalance',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'contractBalance',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"decimals"`.
 */
export function useSethDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof sethABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"delegationSharesOf"`.
 */
export function useSethDelegationSharesOf<
  TFunctionName extends 'delegationSharesOf',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'delegationSharesOf',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useSethEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"getPools"`.
 */
export function useSethGetPools<
  TFunctionName extends 'getPools',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'getPools', ...config } as UseContractReadConfig<
    typeof sethABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"getSharesByPooledEth"`.
 */
export function useSethGetSharesByPooledEth<
  TFunctionName extends 'getSharesByPooledEth',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'getSharesByPooledEth',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"liquidityFeeAddress"`.
 */
export function useSethLiquidityFeeAddress<
  TFunctionName extends 'liquidityFeeAddress',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'liquidityFeeAddress',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"maxDelegations"`.
 */
export function useSethMaxDelegations<
  TFunctionName extends 'maxDelegations',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'maxDelegations',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"maxPools"`.
 */
export function useSethMaxPools<
  TFunctionName extends 'maxPools',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'maxPools', ...config } as UseContractReadConfig<
    typeof sethABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"name"`.
 */
export function useSethName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof sethABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"newPoolFee"`.
 */
export function useSethNewPoolFee<
  TFunctionName extends 'newPoolFee',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'newPoolFee', ...config } as UseContractReadConfig<
    typeof sethABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"newPoolFeeAddress"`.
 */
export function useSethNewPoolFeeAddress<
  TFunctionName extends 'newPoolFeeAddress',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'newPoolFeeAddress',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"nonces"`.
 */
export function useSethNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'nonces', ...config } as UseContractReadConfig<
    typeof sethABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"operatorFee"`.
 */
export function useSethOperatorFee<
  TFunctionName extends 'operatorFee',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'operatorFee',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"operatorFeeAddress"`.
 */
export function useSethOperatorFeeAddress<
  TFunctionName extends 'operatorFeeAddress',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'operatorFeeAddress',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"owner"`.
 */
export function useSethOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof sethABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"paused"`.
 */
export function useSethPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof sethABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"poolFee"`.
 */
export function useSethPoolFee<
  TFunctionName extends 'poolFee',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'poolFee', ...config } as UseContractReadConfig<
    typeof sethABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"poolModuleAddress"`.
 */
export function useSethPoolModuleAddress<
  TFunctionName extends 'poolModuleAddress',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'poolModuleAddress',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"poolSharesOf"`.
 */
export function useSethPoolSharesOf<
  TFunctionName extends 'poolSharesOf',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'poolSharesOf',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"pooledEthByShares"`.
 */
export function useSethPooledEthByShares<
  TFunctionName extends 'pooledEthByShares',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'pooledEthByShares',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"rewardsContract"`.
 */
export function useSethRewardsContract<
  TFunctionName extends 'rewardsContract',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'rewardsContract',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"sharesOf"`.
 */
export function useSethSharesOf<
  TFunctionName extends 'sharesOf',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'sharesOf', ...config } as UseContractReadConfig<
    typeof sethABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"stakeTogetherFee"`.
 */
export function useSethStakeTogetherFee<
  TFunctionName extends 'stakeTogetherFee',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'stakeTogetherFee',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"stakeTogetherFeeAddress"`.
 */
export function useSethStakeTogetherFeeAddress<
  TFunctionName extends 'stakeTogetherFeeAddress',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'stakeTogetherFeeAddress',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"symbol"`.
 */
export function useSethSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof sethABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"totalPoolShares"`.
 */
export function useSethTotalPoolShares<
  TFunctionName extends 'totalPoolShares',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'totalPoolShares',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"totalPooledEther"`.
 */
export function useSethTotalPooledEther<
  TFunctionName extends 'totalPooledEther',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'totalPooledEther',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"totalShares"`.
 */
export function useSethTotalShares<
  TFunctionName extends 'totalShares',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'totalShares',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useSethTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"validatorFee"`.
 */
export function useSethValidatorFee<
  TFunctionName extends 'validatorFee',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'validatorFee',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"validatorFeeAddress"`.
 */
export function useSethValidatorFeeAddress<
  TFunctionName extends 'validatorFeeAddress',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'validatorFeeAddress',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"validatorModuleAddress"`.
 */
export function useSethValidatorModuleAddress<
  TFunctionName extends 'validatorModuleAddress',
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'validatorModuleAddress',
    ...config
  } as UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__.
 */
export function useSethWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof sethABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof sethABI, TFunctionName, TMode>({ abi: sethABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"addPool"`.
 */
export function useSethAddPool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'addPool'>['request']['abi'],
        'addPool',
        TMode
      > & { functionName?: 'addPool' }
    : UseContractWriteConfig<typeof sethABI, 'addPool', TMode> & {
        abi?: never
        functionName?: 'addPool'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'addPool', TMode>({
    abi: sethABI,
    functionName: 'addPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"approve"`.
 */
export function useSethApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof sethABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'approve', TMode>({
    abi: sethABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useSethDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof sethABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'decreaseAllowance', TMode>({
    abi: sethABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useSethIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof sethABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'increaseAllowance', TMode>({
    abi: sethABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"mintLoss"`.
 */
export function useSethMintLoss<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'mintLoss'>['request']['abi'],
        'mintLoss',
        TMode
      > & { functionName?: 'mintLoss' }
    : UseContractWriteConfig<typeof sethABI, 'mintLoss', TMode> & {
        abi?: never
        functionName?: 'mintLoss'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'mintLoss', TMode>({
    abi: sethABI,
    functionName: 'mintLoss',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"mintRewards"`.
 */
export function useSethMintRewards<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'mintRewards'>['request']['abi'],
        'mintRewards',
        TMode
      > & { functionName?: 'mintRewards' }
    : UseContractWriteConfig<typeof sethABI, 'mintRewards', TMode> & {
        abi?: never
        functionName?: 'mintRewards'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'mintRewards', TMode>({
    abi: sethABI,
    functionName: 'mintRewards',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"pause"`.
 */
export function useSethPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof sethABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'pause', TMode>({
    abi: sethABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"permit"`.
 */
export function useSethPermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof sethABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'permit', TMode>({
    abi: sethABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"removePool"`.
 */
export function useSethRemovePool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'removePool'>['request']['abi'],
        'removePool',
        TMode
      > & { functionName?: 'removePool' }
    : UseContractWriteConfig<typeof sethABI, 'removePool', TMode> & {
        abi?: never
        functionName?: 'removePool'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'removePool', TMode>({
    abi: sethABI,
    functionName: 'removePool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useSethRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof sethABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'renounceOwnership', TMode>({
    abi: sethABI,
    functionName: 'renounceOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setLiquidityFeeAddress"`.
 */
export function useSethSetLiquidityFeeAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'setLiquidityFeeAddress'>['request']['abi'],
        'setLiquidityFeeAddress',
        TMode
      > & { functionName?: 'setLiquidityFeeAddress' }
    : UseContractWriteConfig<typeof sethABI, 'setLiquidityFeeAddress', TMode> & {
        abi?: never
        functionName?: 'setLiquidityFeeAddress'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'setLiquidityFeeAddress', TMode>({
    abi: sethABI,
    functionName: 'setLiquidityFeeAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setMaxPools"`.
 */
export function useSethSetMaxPools<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'setMaxPools'>['request']['abi'],
        'setMaxPools',
        TMode
      > & { functionName?: 'setMaxPools' }
    : UseContractWriteConfig<typeof sethABI, 'setMaxPools', TMode> & {
        abi?: never
        functionName?: 'setMaxPools'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'setMaxPools', TMode>({
    abi: sethABI,
    functionName: 'setMaxPools',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setNewPoolFee"`.
 */
export function useSethSetNewPoolFee<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'setNewPoolFee'>['request']['abi'],
        'setNewPoolFee',
        TMode
      > & { functionName?: 'setNewPoolFee' }
    : UseContractWriteConfig<typeof sethABI, 'setNewPoolFee', TMode> & {
        abi?: never
        functionName?: 'setNewPoolFee'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'setNewPoolFee', TMode>({
    abi: sethABI,
    functionName: 'setNewPoolFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setOperatorFee"`.
 */
export function useSethSetOperatorFee<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'setOperatorFee'>['request']['abi'],
        'setOperatorFee',
        TMode
      > & { functionName?: 'setOperatorFee' }
    : UseContractWriteConfig<typeof sethABI, 'setOperatorFee', TMode> & {
        abi?: never
        functionName?: 'setOperatorFee'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'setOperatorFee', TMode>({
    abi: sethABI,
    functionName: 'setOperatorFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setOperatorFeeAddress"`.
 */
export function useSethSetOperatorFeeAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'setOperatorFeeAddress'>['request']['abi'],
        'setOperatorFeeAddress',
        TMode
      > & { functionName?: 'setOperatorFeeAddress' }
    : UseContractWriteConfig<typeof sethABI, 'setOperatorFeeAddress', TMode> & {
        abi?: never
        functionName?: 'setOperatorFeeAddress'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'setOperatorFeeAddress', TMode>({
    abi: sethABI,
    functionName: 'setOperatorFeeAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setPoolFee"`.
 */
export function useSethSetPoolFee<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'setPoolFee'>['request']['abi'],
        'setPoolFee',
        TMode
      > & { functionName?: 'setPoolFee' }
    : UseContractWriteConfig<typeof sethABI, 'setPoolFee', TMode> & {
        abi?: never
        functionName?: 'setPoolFee'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'setPoolFee', TMode>({
    abi: sethABI,
    functionName: 'setPoolFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setPoolFeeAddress"`.
 */
export function useSethSetPoolFeeAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'setPoolFeeAddress'>['request']['abi'],
        'setPoolFeeAddress',
        TMode
      > & { functionName?: 'setPoolFeeAddress' }
    : UseContractWriteConfig<typeof sethABI, 'setPoolFeeAddress', TMode> & {
        abi?: never
        functionName?: 'setPoolFeeAddress'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'setPoolFeeAddress', TMode>({
    abi: sethABI,
    functionName: 'setPoolFeeAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setPoolModuleAddress"`.
 */
export function useSethSetPoolModuleAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'setPoolModuleAddress'>['request']['abi'],
        'setPoolModuleAddress',
        TMode
      > & { functionName?: 'setPoolModuleAddress' }
    : UseContractWriteConfig<typeof sethABI, 'setPoolModuleAddress', TMode> & {
        abi?: never
        functionName?: 'setPoolModuleAddress'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'setPoolModuleAddress', TMode>({
    abi: sethABI,
    functionName: 'setPoolModuleAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setStakeTogetherFee"`.
 */
export function useSethSetStakeTogetherFee<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'setStakeTogetherFee'>['request']['abi'],
        'setStakeTogetherFee',
        TMode
      > & { functionName?: 'setStakeTogetherFee' }
    : UseContractWriteConfig<typeof sethABI, 'setStakeTogetherFee', TMode> & {
        abi?: never
        functionName?: 'setStakeTogetherFee'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'setStakeTogetherFee', TMode>({
    abi: sethABI,
    functionName: 'setStakeTogetherFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setStakeTogetherFeeAddress"`.
 */
export function useSethSetStakeTogetherFeeAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'setStakeTogetherFeeAddress'>['request']['abi'],
        'setStakeTogetherFeeAddress',
        TMode
      > & { functionName?: 'setStakeTogetherFeeAddress' }
    : UseContractWriteConfig<typeof sethABI, 'setStakeTogetherFeeAddress', TMode> & {
        abi?: never
        functionName?: 'setStakeTogetherFeeAddress'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'setStakeTogetherFeeAddress', TMode>({
    abi: sethABI,
    functionName: 'setStakeTogetherFeeAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setValidatorFee"`.
 */
export function useSethSetValidatorFee<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'setValidatorFee'>['request']['abi'],
        'setValidatorFee',
        TMode
      > & { functionName?: 'setValidatorFee' }
    : UseContractWriteConfig<typeof sethABI, 'setValidatorFee', TMode> & {
        abi?: never
        functionName?: 'setValidatorFee'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'setValidatorFee', TMode>({
    abi: sethABI,
    functionName: 'setValidatorFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setValidatorFeeAddress"`.
 */
export function useSethSetValidatorFeeAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'setValidatorFeeAddress'>['request']['abi'],
        'setValidatorFeeAddress',
        TMode
      > & { functionName?: 'setValidatorFeeAddress' }
    : UseContractWriteConfig<typeof sethABI, 'setValidatorFeeAddress', TMode> & {
        abi?: never
        functionName?: 'setValidatorFeeAddress'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'setValidatorFeeAddress', TMode>({
    abi: sethABI,
    functionName: 'setValidatorFeeAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setValidatorModuleAddress"`.
 */
export function useSethSetValidatorModuleAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'setValidatorModuleAddress'>['request']['abi'],
        'setValidatorModuleAddress',
        TMode
      > & { functionName?: 'setValidatorModuleAddress' }
    : UseContractWriteConfig<typeof sethABI, 'setValidatorModuleAddress', TMode> & {
        abi?: never
        functionName?: 'setValidatorModuleAddress'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'setValidatorModuleAddress', TMode>({
    abi: sethABI,
    functionName: 'setValidatorModuleAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transfer"`.
 */
export function useSethTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof sethABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'transfer', TMode>({
    abi: sethABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useSethTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof sethABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'transferFrom', TMode>({
    abi: sethABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useSethTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof sethABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'transferOwnership', TMode>({
    abi: sethABI,
    functionName: 'transferOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferPoolShares"`.
 */
export function useSethTransferPoolShares<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'transferPoolShares'>['request']['abi'],
        'transferPoolShares',
        TMode
      > & { functionName?: 'transferPoolShares' }
    : UseContractWriteConfig<typeof sethABI, 'transferPoolShares', TMode> & {
        abi?: never
        functionName?: 'transferPoolShares'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'transferPoolShares', TMode>({
    abi: sethABI,
    functionName: 'transferPoolShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferShares"`.
 */
export function useSethTransferShares<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'transferShares'>['request']['abi'],
        'transferShares',
        TMode
      > & { functionName?: 'transferShares' }
    : UseContractWriteConfig<typeof sethABI, 'transferShares', TMode> & {
        abi?: never
        functionName?: 'transferShares'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'transferShares', TMode>({
    abi: sethABI,
    functionName: 'transferShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferSharesFrom"`.
 */
export function useSethTransferSharesFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'transferSharesFrom'>['request']['abi'],
        'transferSharesFrom',
        TMode
      > & { functionName?: 'transferSharesFrom' }
    : UseContractWriteConfig<typeof sethABI, 'transferSharesFrom', TMode> & {
        abi?: never
        functionName?: 'transferSharesFrom'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'transferSharesFrom', TMode>({
    abi: sethABI,
    functionName: 'transferSharesFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"unpause"`.
 */
export function useSethUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sethABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof sethABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof sethABI, 'unpause', TMode>({
    abi: sethABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__.
 */
export function usePrepareSethWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof sethABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: sethABI, ...config } as UsePrepareContractWriteConfig<
    typeof sethABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"addPool"`.
 */
export function usePrepareSethAddPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'addPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'addPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'addPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareSethApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareSethDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareSethIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"mintLoss"`.
 */
export function usePrepareSethMintLoss(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'mintLoss'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'mintLoss',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'mintLoss'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"mintRewards"`.
 */
export function usePrepareSethMintRewards(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'mintRewards'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'mintRewards',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'mintRewards'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareSethPause(
  config: Omit<UsePrepareContractWriteConfig<typeof sethABI, 'pause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareSethPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"removePool"`.
 */
export function usePrepareSethRemovePool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'removePool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'removePool',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'removePool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareSethRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setLiquidityFeeAddress"`.
 */
export function usePrepareSethSetLiquidityFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setLiquidityFeeAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setLiquidityFeeAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setLiquidityFeeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setMaxPools"`.
 */
export function usePrepareSethSetMaxPools(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setMaxPools'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setMaxPools',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setMaxPools'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setNewPoolFee"`.
 */
export function usePrepareSethSetNewPoolFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setNewPoolFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setNewPoolFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setNewPoolFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setOperatorFee"`.
 */
export function usePrepareSethSetOperatorFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setOperatorFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setOperatorFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setOperatorFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setOperatorFeeAddress"`.
 */
export function usePrepareSethSetOperatorFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setOperatorFeeAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setOperatorFeeAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setOperatorFeeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setPoolFee"`.
 */
export function usePrepareSethSetPoolFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setPoolFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setPoolFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setPoolFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setPoolFeeAddress"`.
 */
export function usePrepareSethSetPoolFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setPoolFeeAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setPoolFeeAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setPoolFeeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setPoolModuleAddress"`.
 */
export function usePrepareSethSetPoolModuleAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setPoolModuleAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setPoolModuleAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setPoolModuleAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setStakeTogetherFee"`.
 */
export function usePrepareSethSetStakeTogetherFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setStakeTogetherFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setStakeTogetherFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setStakeTogetherFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setStakeTogetherFeeAddress"`.
 */
export function usePrepareSethSetStakeTogetherFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setStakeTogetherFeeAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setStakeTogetherFeeAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setStakeTogetherFeeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setValidatorFee"`.
 */
export function usePrepareSethSetValidatorFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setValidatorFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setValidatorFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setValidatorFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setValidatorFeeAddress"`.
 */
export function usePrepareSethSetValidatorFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setValidatorFeeAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setValidatorFeeAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setValidatorFeeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setValidatorModuleAddress"`.
 */
export function usePrepareSethSetValidatorModuleAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setValidatorModuleAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setValidatorModuleAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setValidatorModuleAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareSethTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareSethTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareSethTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferPoolShares"`.
 */
export function usePrepareSethTransferPoolShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'transferPoolShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'transferPoolShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'transferPoolShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferShares"`.
 */
export function usePrepareSethTransferShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'transferShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'transferShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'transferShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferSharesFrom"`.
 */
export function usePrepareSethTransferSharesFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'transferSharesFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'transferSharesFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'transferSharesFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareSethUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'unpause'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__.
 */
export function useSethEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof sethABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: sethABI, ...config } as UseContractEventConfig<
    typeof sethABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"AddPool"`.
 */
export function useSethAddPoolEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'AddPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'AddPool', ...config } as UseContractEventConfig<
    typeof sethABI,
    'AddPool'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"Approval"`.
 */
export function useSethApprovalEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof sethABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"Bootstrap"`.
 */
export function useSethBootstrapEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'Bootstrap'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'Bootstrap', ...config } as UseContractEventConfig<
    typeof sethABI,
    'Bootstrap'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"BurnPoolShares"`.
 */
export function useSethBurnPoolSharesEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'BurnPoolShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'BurnPoolShares',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'BurnPoolShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"BurnShares"`.
 */
export function useSethBurnSharesEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'BurnShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'BurnShares', ...config } as UseContractEventConfig<
    typeof sethABI,
    'BurnShares'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useSethEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"MintLoss"`.
 */
export function useSethMintLossEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'MintLoss'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'MintLoss', ...config } as UseContractEventConfig<
    typeof sethABI,
    'MintLoss'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"MintPoolShares"`.
 */
export function useSethMintPoolSharesEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'MintPoolShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'MintPoolShares',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'MintPoolShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"MintRewards"`.
 */
export function useSethMintRewardsEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'MintRewards'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'MintRewards', ...config } as UseContractEventConfig<
    typeof sethABI,
    'MintRewards'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"MintShares"`.
 */
export function useSethMintSharesEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'MintShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'MintShares', ...config } as UseContractEventConfig<
    typeof sethABI,
    'MintShares'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useSethOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"Paused"`.
 */
export function useSethPausedEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof sethABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"RemovePool"`.
 */
export function useSethRemovePoolEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'RemovePool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'RemovePool', ...config } as UseContractEventConfig<
    typeof sethABI,
    'RemovePool'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetLiquidityFeeAddress"`.
 */
export function useSethSetLiquidityFeeAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'SetLiquidityFeeAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'SetLiquidityFeeAddress',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'SetLiquidityFeeAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetMaxPools"`.
 */
export function useSethSetMaxPoolsEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'SetMaxPools'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'SetMaxPools', ...config } as UseContractEventConfig<
    typeof sethABI,
    'SetMaxPools'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetNewPoolFee"`.
 */
export function useSethSetNewPoolFeeEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'SetNewPoolFee'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'SetNewPoolFee',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'SetNewPoolFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetNewPoolFeeAddress"`.
 */
export function useSethSetNewPoolFeeAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'SetNewPoolFeeAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'SetNewPoolFeeAddress',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'SetNewPoolFeeAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetOperatorFee"`.
 */
export function useSethSetOperatorFeeEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'SetOperatorFee'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'SetOperatorFee',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'SetOperatorFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetOperatorFeeAddress"`.
 */
export function useSethSetOperatorFeeAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'SetOperatorFeeAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'SetOperatorFeeAddress',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'SetOperatorFeeAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetPoolFee"`.
 */
export function useSethSetPoolFeeEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'SetPoolFee'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'SetPoolFee', ...config } as UseContractEventConfig<
    typeof sethABI,
    'SetPoolFee'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetPoolModuleAddress"`.
 */
export function useSethSetPoolModuleAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'SetPoolModuleAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'SetPoolModuleAddress',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'SetPoolModuleAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetStakeTogetherFee"`.
 */
export function useSethSetStakeTogetherFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'SetStakeTogetherFee'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'SetStakeTogetherFee',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'SetStakeTogetherFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetStakeTogetherFeeAddress"`.
 */
export function useSethSetStakeTogetherFeeAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'SetStakeTogetherFeeAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'SetStakeTogetherFeeAddress',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'SetStakeTogetherFeeAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetValidatorFee"`.
 */
export function useSethSetValidatorFeeEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'SetValidatorFee'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'SetValidatorFee',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'SetValidatorFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetValidatorFeeAddress"`.
 */
export function useSethSetValidatorFeeAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'SetValidatorFeeAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'SetValidatorFeeAddress',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'SetValidatorFeeAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetValidatorModuleAddress"`.
 */
export function useSethSetValidatorModuleAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'SetValidatorModuleAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'SetValidatorModuleAddress',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'SetValidatorModuleAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"Transfer"`.
 */
export function useSethTransferEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof sethABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"TransferPoolShares"`.
 */
export function useSethTransferPoolSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'TransferPoolShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'TransferPoolShares',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'TransferPoolShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"TransferShares"`.
 */
export function useSethTransferSharesEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'TransferShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'TransferShares',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'TransferShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useSethUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof sethABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function useIDepositContractRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iDepositContractABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iDepositContractABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: iDepositContractABI, ...config } as UseContractReadConfig<
    typeof iDepositContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"get_deposit_count"`.
 */
export function useIDepositContractGetDepositCount<
  TFunctionName extends 'get_deposit_count',
  TSelectData = ReadContractResult<typeof iDepositContractABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iDepositContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iDepositContractABI,
    functionName: 'get_deposit_count',
    ...config
  } as UseContractReadConfig<typeof iDepositContractABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"get_deposit_root"`.
 */
export function useIDepositContractGetDepositRoot<
  TFunctionName extends 'get_deposit_root',
  TSelectData = ReadContractResult<typeof iDepositContractABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iDepositContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iDepositContractABI,
    functionName: 'get_deposit_root',
    ...config
  } as UseContractReadConfig<typeof iDepositContractABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function useIDepositContractWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iDepositContractABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iDepositContractABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof iDepositContractABI, TFunctionName, TMode>({
    abi: iDepositContractABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"deposit"`.
 */
export function useIDepositContractDeposit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iDepositContractABI, 'deposit'>['request']['abi'],
        'deposit',
        TMode
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<typeof iDepositContractABI, 'deposit', TMode> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any
) {
  return useContractWrite<typeof iDepositContractABI, 'deposit', TMode>({
    abi: iDepositContractABI,
    functionName: 'deposit',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function usePrepareIDepositContractWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iDepositContractABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({ abi: iDepositContractABI, ...config } as UsePrepareContractWriteConfig<
    typeof iDepositContractABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareIDepositContractDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iDepositContractABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iDepositContractABI,
    functionName: 'deposit',
    ...config
  } as UsePrepareContractWriteConfig<typeof iDepositContractABI, 'deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function useIDepositContractEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iDepositContractABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iDepositContractABI, ...config } as UseContractEventConfig<
    typeof iDepositContractABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iDepositContractABI}__ and `eventName` set to `"DepositEvent"`.
 */
export function useIDepositContractDepositEventEvent(
  config: Omit<
    UseContractEventConfig<typeof iDepositContractABI, 'DepositEvent'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iDepositContractABI,
    eventName: 'DepositEvent',
    ...config
  } as UseContractEventConfig<typeof iDepositContractABI, 'DepositEvent'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ownableABI, ...config } as UseContractReadConfig<
    typeof ownableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: ownableABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof ownableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ownableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ownableABI, TFunctionName, TMode>({ abi: ownableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof ownableABI, 'renounceOwnership', TMode>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof ownableABI, 'transferOwnership', TMode>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ownableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ownableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ownableABI, ...config } as UseContractEventConfig<
    typeof ownableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5267ABI}__.
 */
export function useIerc5267Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc5267ABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof ierc5267ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ierc5267ABI, ...config } as UseContractReadConfig<
    typeof ierc5267ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5267ABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useIerc5267Eip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof ierc5267ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc5267ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc5267ABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof ierc5267ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5267ABI}__.
 */
export function useIerc5267Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc5267ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc5267ABI, ...config } as UseContractEventConfig<
    typeof ierc5267ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5267ABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useIerc5267Eip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc5267ABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc5267ABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof ierc5267ABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pausableABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof pausableABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: pausableABI, ...config } as UseContractReadConfig<
    typeof pausableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableABI}__ and `functionName` set to `"paused"`.
 */
export function usePausablePaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof pausableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pausableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: pausableABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof pausableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof pausableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: pausableABI, ...config } as UseContractEventConfig<
    typeof pausableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__ and `eventName` set to `"Paused"`.
 */
export function usePausablePausedEvent(
  config: Omit<UseContractEventConfig<typeof pausableABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: pausableABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof pausableABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__ and `eventName` set to `"Unpaused"`.
 */
export function usePausableUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof pausableABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: pausableABI,
    eventName: 'Unpaused',
    ...config
  } as UseContractEventConfig<typeof pausableABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, TFunctionName, TMode>({ abi: erc20ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, 'approve', TMode>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof erc20ABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, 'decreaseAllowance', TMode>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof erc20ABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, 'increaseAllowance', TMode>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, 'transfer', TMode>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, 'transferFrom', TMode>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20ABI, ...config } as UseContractEventConfig<
    typeof erc20ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc20ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof erc20ABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<UseContractEventConfig<typeof erc20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc20ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof erc20ABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ierc20ABI, TFunctionName, TMode>({ abi: ierc20ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof ierc20ABI, 'approve', TMode>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof ierc20ABI, 'transfer', TMode>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof ierc20ABI, 'transferFrom', TMode>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc20ABI, ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc20ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc20ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eip712ABI}__.
 */
export function useEip712Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof eip712ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof eip712ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: eip712ABI, ...config } as UseContractReadConfig<
    typeof eip712ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eip712ABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useEip712Eip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof eip712ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof eip712ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: eip712ABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof eip712ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712ABI}__.
 */
export function useEip712Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof eip712ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: eip712ABI, ...config } as UseContractEventConfig<
    typeof eip712ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712ABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useEip712Eip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof eip712ABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: eip712ABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof eip712ABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: erc20BurnableABI, ...config } as UseContractReadConfig<
    typeof erc20BurnableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20BurnableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BurnableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20BurnableDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20BurnableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20BurnableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20BurnableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20BurnableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableABI, TFunctionName, TMode>({
    abi: erc20BurnableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20BurnableApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20BurnableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableABI, 'approve', TMode>({
    abi: erc20BurnableABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc20BurnableBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof erc20BurnableABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableABI, 'burn', TMode>({
    abi: erc20BurnableABI,
    functionName: 'burn',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useErc20BurnableBurnFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableABI, 'burnFrom'>['request']['abi'],
        'burnFrom',
        TMode
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<typeof erc20BurnableABI, 'burnFrom', TMode> & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableABI, 'burnFrom', TMode>({
    abi: erc20BurnableABI,
    functionName: 'burnFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20BurnableDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof erc20BurnableABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableABI, 'decreaseAllowance', TMode>({
    abi: erc20BurnableABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20BurnableIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof erc20BurnableABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableABI, 'increaseAllowance', TMode>({
    abi: erc20BurnableABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20BurnableTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20BurnableABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableABI, 'transfer', TMode>({
    abi: erc20BurnableABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20BurnableTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20BurnableABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableABI, 'transferFrom', TMode>({
    abi: erc20BurnableABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function usePrepareErc20BurnableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20BurnableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20BurnableABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20BurnableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20BurnableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc20BurnableBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'burn',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareErc20BurnableBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burnFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'burnFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20BurnableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20BurnableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20BurnableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20BurnableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20BurnableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20BurnableABI, ...config } as UseContractEventConfig<
    typeof erc20BurnableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20BurnableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof erc20BurnableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20BurnableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof erc20BurnableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc20PermitABI, ...config } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'nonces',
    ...config
  } as UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20PermitABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20PermitABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ierc20PermitABI, TFunctionName, TMode>({
    abi: ierc20PermitABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitPermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20PermitABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof ierc20PermitABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<typeof ierc20PermitABI, 'permit', TMode>({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function usePrepareIerc20PermitWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20PermitABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20PermitABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: erc20PermitABI, ...config } as UseContractReadConfig<
    typeof erc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20PermitDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20PermitAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20PermitBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20PermitDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useErc20PermitEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"name"`.
 */
export function useErc20PermitName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20PermitNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'nonces',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20PermitSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20PermitTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20PermitABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitABI, TFunctionName, TMode>({
    abi: erc20PermitABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20PermitApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20PermitABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitABI, 'approve', TMode>({
    abi: erc20PermitABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20PermitDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof erc20PermitABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitABI, 'decreaseAllowance', TMode>({
    abi: erc20PermitABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20PermitIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof erc20PermitABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitABI, 'increaseAllowance', TMode>({
    abi: erc20PermitABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20PermitPermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof erc20PermitABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitABI, 'permit', TMode>({
    abi: erc20PermitABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20PermitTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20PermitABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitABI, 'transfer', TMode>({
    abi: erc20PermitABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20PermitTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20PermitABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitABI, 'transferFrom', TMode>({
    abi: erc20PermitABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function usePrepareErc20PermitWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20PermitABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20PermitABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20PermitABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20PermitApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20PermitDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20PermitIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20PermitPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20PermitTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20PermitTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20PermitABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20PermitABI, ...config } as UseContractEventConfig<
    typeof erc20PermitABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20PermitApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc20PermitABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: erc20PermitABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof erc20PermitABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useErc20PermitEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20PermitABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof erc20PermitABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20PermitTransferEvent(
  config: Omit<UseContractEventConfig<typeof erc20PermitABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: erc20PermitABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof erc20PermitABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc20MetadataABI, ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20MetadataABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20MetadataABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ierc20MetadataABI, TFunctionName, TMode>({
    abi: ierc20MetadataABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20MetadataABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof ierc20MetadataABI, 'approve', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20MetadataABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof ierc20MetadataABI, 'transfer', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof ierc20MetadataABI, 'transferFrom', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20MetadataABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20MetadataABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc20MetadataABI, ...config } as UseContractEventConfig<
    typeof ierc20MetadataABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>)
}
