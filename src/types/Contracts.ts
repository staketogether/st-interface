// Generated by @wagmi/cli@0.1.15 on 5/19/2023 at 9:15:07 AM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CETH
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const cethABI = [
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'preDelegatedShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'postDelegatedShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'preTotalDelegatedShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'postTotalDelegatedShares', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnDelegatedShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'preRebaseTokenAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'postRebaseTokenAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'community', internalType: 'address', type: 'address', indexed: false }],
    name: 'CommunityAdded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'community', internalType: 'address', type: 'address', indexed: false }],
    name: 'CommunityRemoved'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address', indexed: true },
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'preDelegatedShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'postDelegatedShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'preTotalDelegatedShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'postTotalDelegatedShares', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintDelegatedShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'preTotalShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'postTotalShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'preRecipientShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'postRecipientShares', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'OwnershipTransferred'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesValue', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'community', internalType: 'address', type: 'address' }],
    name: 'addCommunity',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'communityFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'delegatedSharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCommunities',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'community', internalType: 'address', type: 'address' }],
    name: 'getCommunityByAddress',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'getDelegatesOf',
    outputs: [
      { name: '', internalType: 'address[]', type: 'address[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'getDelegationsOf',
    outputs: [
      { name: '', internalType: 'address[]', type: 'address[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'getPooledEthByShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_ethAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'getSharesByPooledEth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalDelegatedShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalPooledEther',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxDelegations',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorFeeRecipient',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'community', internalType: 'address', type: 'address' }],
    name: 'removeCommunity',
    outputs: []
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setCommunityFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setOperatorFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_recipient', internalType: 'address', type: 'address' }],
    name: 'setOperatorFeeRecipient',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setStakeTogetherFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_recipient', internalType: 'address', type: 'address' }],
    name: 'setStakeTogetherFeeRecipient',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'sharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogetherFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogetherFeeRecipient',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_recipient', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_sender', internalType: 'address', type: 'address' },
      { name: '_recipient', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferSharesFrom',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// STOracle
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stOracleABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'balance', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ConsensusApproved'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true }],
    name: 'ConsensusFail'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'node', internalType: 'address', type: 'address', indexed: false }],
    name: 'NodeAdded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'node', internalType: 'address', type: 'address', indexed: false }],
    name: 'NodeBlacklisted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'node', internalType: 'address', type: 'address', indexed: false }],
    name: 'NodeRemoved'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'address', type: 'address', indexed: true },
      { name: 'reportedBlock', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reportedBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'consensusBalance', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'NonConsensusValueReported'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'OwnershipTransferred'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newFrequency', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ReportMaxFrequencyChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newQuorum', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ReportQuorumChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'address', type: 'address' }],
    name: 'addNode',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'beaconBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'beaconLastReportBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'getNodeReportByBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'getNodeReports',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNodes',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'address', type: 'address' }],
    name: 'isNode',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'address', type: 'address' }],
    name: 'isNodeBlaclisted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'nodes',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'address', type: 'address' }],
    name: 'removeNode',
    outputs: []
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'reportBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'reportBalance', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'report',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reportFrequency',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reportNextBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reportQuorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newFrequency', internalType: 'uint256', type: 'uint256' }],
    name: 'setReportMaxFrequency',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newQuorum', internalType: 'uint256', type: 'uint256' }],
    name: 'setReportQuorum',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_stakeTogether', internalType: 'address', type: 'address' }],
    name: 'setStakeTogether',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogether',
    outputs: [{ name: '', internalType: 'contract StakeTogether', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// STValidator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stValidatorABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_depositContract', internalType: 'address', type: 'address' },
      { name: '_ssvNetwork', internalType: 'address', type: 'address' },
      { name: '_ssvToken', internalType: 'address', type: 'address' }
    ]
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'OwnershipTransferred'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: false },
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]', indexed: false },
      { name: 'clusterIndex', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'SSVNetworkLiquidated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'clusterIndex', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'SSVNetworkReactivated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'publicKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'clusterIndex', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'SSVNetworkRegistered'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'publicKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]', indexed: false },
      { name: 'clusterIndex', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'SSVNetworkRemoved'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'creator', internalType: 'address', type: 'address', indexed: true },
      { name: 'pubkey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'withdrawal_credentials', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'signature', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'deposit_data_root', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'ValidatorCreated'
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'approve', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'pubkey', internalType: 'bytes', type: 'bytes' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
      { name: 'deposit_data_root', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'createValidator',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'cluster',
        internalType: 'struct ISSVNetworkCore.Cluster',
        type: 'tuple',
        components: [
          { name: 'validatorCount', internalType: 'uint32', type: 'uint32' },
          { name: 'networkFeeIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'index', internalType: 'uint64', type: 'uint64' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' }
        ]
      }
    ],
    name: 'deposit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'depositContract',
    outputs: [{ name: '', internalType: 'contract IDepositContract', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getValidators',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pubkey', internalType: 'bytes', type: 'bytes' }],
    name: 'isValidator',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]' },
      {
        name: 'cluster',
        internalType: 'struct ISSVNetworkCore.Cluster',
        type: 'tuple',
        components: [
          { name: 'validatorCount', internalType: 'uint32', type: 'uint32' },
          { name: 'networkFeeIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'index', internalType: 'uint64', type: 'uint64' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' }
        ]
      }
    ],
    name: 'liquidateSSVNetwork',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'cluster',
        internalType: 'struct ISSVNetworkCore.Cluster',
        type: 'tuple',
        components: [
          { name: 'validatorCount', internalType: 'uint32', type: 'uint32' },
          { name: 'networkFeeIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'index', internalType: 'uint64', type: 'uint64' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' }
        ]
      }
    ],
    name: 'reactivateSSV',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'publicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]' },
      { name: 'sharesEncrypted', internalType: 'bytes', type: 'bytes' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'cluster',
        internalType: 'struct ISSVNetworkCore.Cluster',
        type: 'tuple',
        components: [
          { name: 'validatorCount', internalType: 'uint32', type: 'uint32' },
          { name: 'networkFeeIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'index', internalType: 'uint64', type: 'uint64' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' }
        ]
      }
    ],
    name: 'registerValidator',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'publicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]' },
      {
        name: 'cluster',
        internalType: 'struct ISSVNetworkCore.Cluster',
        type: 'tuple',
        components: [
          { name: 'validatorCount', internalType: 'uint32', type: 'uint32' },
          { name: 'networkFeeIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'index', internalType: 'uint64', type: 'uint64' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' }
        ]
      }
    ],
    name: 'removeValidator',
    outputs: []
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'setFeeRecipientAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_stakeTogether', internalType: 'address', type: 'address' }],
    name: 'setStakeTogether',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_withdrawalCredentials', internalType: 'bytes', type: 'bytes' }],
    name: 'setWithdrawalCredentials',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ssvNetwork',
    outputs: [{ name: '', internalType: 'contract ISSVNetwork', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ssvToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogether',
    outputs: [{ name: '', internalType: 'contract StakeTogether', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'validators',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'cluster',
        internalType: 'struct ISSVNetworkCore.Cluster',
        type: 'tuple',
        components: [
          { name: 'validatorCount', internalType: 'uint32', type: 'uint32' },
          { name: 'networkFeeIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'index', internalType: 'uint64', type: 'uint64' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' }
        ]
      }
    ],
    name: 'withdraw',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdrawAllEthToStakeTogether',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdrawSSVToken',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawalCredentials',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StakeTogether
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stakeTogetherABI = [
  {
    stateMutability: 'payable',
    type: 'constructor',
    inputs: [
      { name: '_oracle', internalType: 'address', type: 'address' },
      { name: '_validator', internalType: 'address', type: 'address' }
    ]
  },
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BufferDeposited'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BufferWithdrawn'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'preDelegatedShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'postDelegatedShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'preTotalDelegatedShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'postTotalDelegatedShares', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnDelegatedShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'preRebaseTokenAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'postRebaseTokenAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'community', internalType: 'address', type: 'address', indexed: false }],
    name: 'CommunityAdded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'community', internalType: 'address', type: 'address', indexed: false }],
    name: 'CommunityRemoved'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address', indexed: true },
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'preDelegatedShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'postDelegatedShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'preTotalDelegatedShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'postTotalDelegatedShares', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintDelegatedShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'preTotalShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'postTotalShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'preRecipientShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'postRecipientShares', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'OwnershipTransferred'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'delegated', internalType: 'address', type: 'address', indexed: false },
      { name: 'referral', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Referral'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Staked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesValue', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Unstaked'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'community', internalType: 'address', type: 'address' }],
    name: 'addCommunity',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'communityFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pubkey', internalType: 'bytes', type: 'bytes' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
      { name: 'deposit_data_root', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'createValidator',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'delegatedSharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'depositBuffer', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBufferBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCommunities',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'community', internalType: 'address', type: 'address' }],
    name: 'getCommunityByAddress',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'getDelegatesOf',
    outputs: [
      { name: '', internalType: 'address[]', type: 'address[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'getDelegationsOf',
    outputs: [
      { name: '', internalType: 'address[]', type: 'address[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPoolBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getPoolSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'getPooledEthByShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_ethAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'getSharesByPooledEth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalDelegatedShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalPooledEther',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getWithdrawalBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxDelegations',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorFeeRecipient',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'oracle',
    outputs: [{ name: '', internalType: 'contract STOracle', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'community', internalType: 'address', type: 'address' }],
    name: 'removeCommunity',
    outputs: []
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newBalance', internalType: 'uint256', type: 'uint256' }],
    name: 'setBeaconBalance',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setCommunityFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinimumStakeAmount',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setOperatorFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_recipient', internalType: 'address', type: 'address' }],
    name: 'setOperatorFeeRecipient',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setStakeTogetherFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_recipient', internalType: 'address', type: 'address' }],
    name: 'setStakeTogetherFeeRecipient',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'sharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_delegated', internalType: 'address', type: 'address' },
      { name: 'referral', internalType: 'address', type: 'address' }
    ],
    name: 'stake',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogetherFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogetherFeeRecipient',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_recipient', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_sender', internalType: 'address', type: 'address' },
      { name: '_recipient', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_recipient', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_sender', internalType: 'address', type: 'address' },
      { name: '_recipient', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferSharesFrom',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_delegated', internalType: 'address', type: 'address' }
    ],
    name: 'unstake',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'validator',
    outputs: [{ name: '', internalType: 'contract STValidator', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdrawBuffer',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDepositContract
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iDepositContractABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'pubkey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'withdrawal_credentials', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'amount', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'signature', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'index', internalType: 'bytes', type: 'bytes', indexed: false }
    ],
    name: 'DepositEvent'
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'pubkey', internalType: 'bytes', type: 'bytes' },
      { name: 'withdrawal_credentials', internalType: 'bytes', type: 'bytes' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
      { name: 'deposit_data_root', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'deposit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'get_deposit_count',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'get_deposit_root',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISSVNetworkCore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const issvNetworkCoreABI = [
  { type: 'error', inputs: [], name: 'ApprovalNotWithinTimeframe' },
  { type: 'error', inputs: [], name: 'CallerNotOwner' },
  { type: 'error', inputs: [], name: 'CallerNotWhitelisted' },
  { type: 'error', inputs: [], name: 'ClusterAlreadyEnabled' },
  { type: 'error', inputs: [], name: 'ClusterDoesNotExists' },
  { type: 'error', inputs: [], name: 'ClusterIsLiquidated' },
  { type: 'error', inputs: [], name: 'ClusterNotLiquidatable' },
  { type: 'error', inputs: [], name: 'ExceedValidatorLimit' },
  { type: 'error', inputs: [], name: 'FeeExceedsIncreaseLimit' },
  { type: 'error', inputs: [], name: 'FeeIncreaseNotAllowed' },
  { type: 'error', inputs: [], name: 'FeeTooLow' },
  { type: 'error', inputs: [], name: 'IncorrectClusterState' },
  { type: 'error', inputs: [], name: 'InsufficientBalance' },
  { type: 'error', inputs: [], name: 'InvalidOperatorIdsLength' },
  { type: 'error', inputs: [], name: 'InvalidPublicKeyLength' },
  { type: 'error', inputs: [], name: 'NewBlockPeriodIsBelowMinimum' },
  { type: 'error', inputs: [], name: 'NoFeeDelcared' },
  { type: 'error', inputs: [], name: 'OperatorDoesNotExist' },
  { type: 'error', inputs: [], name: 'SameFeeChangeNotAllowed' },
  { type: 'error', inputs: [], name: 'TokenTransferFailed' },
  { type: 'error', inputs: [], name: 'UnsortedOperatorsList' },
  { type: 'error', inputs: [], name: 'ValidatorAlreadyExists' },
  { type: 'error', inputs: [], name: 'ValidatorDoesNotExist' },
  { type: 'error', inputs: [], name: 'ValidatorOwnedByOtherAddress' }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISSVNetwork
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const issvNetworkABI = [
  { type: 'error', inputs: [], name: 'ApprovalNotWithinTimeframe' },
  { type: 'error', inputs: [], name: 'CallerNotOwner' },
  { type: 'error', inputs: [], name: 'CallerNotWhitelisted' },
  { type: 'error', inputs: [], name: 'ClusterAlreadyEnabled' },
  { type: 'error', inputs: [], name: 'ClusterDoesNotExists' },
  { type: 'error', inputs: [], name: 'ClusterIsLiquidated' },
  { type: 'error', inputs: [], name: 'ClusterNotLiquidatable' },
  { type: 'error', inputs: [], name: 'ExceedValidatorLimit' },
  { type: 'error', inputs: [], name: 'FeeExceedsIncreaseLimit' },
  { type: 'error', inputs: [], name: 'FeeIncreaseNotAllowed' },
  { type: 'error', inputs: [], name: 'FeeTooLow' },
  { type: 'error', inputs: [], name: 'IncorrectClusterState' },
  { type: 'error', inputs: [], name: 'InsufficientBalance' },
  { type: 'error', inputs: [], name: 'InvalidOperatorIdsLength' },
  { type: 'error', inputs: [], name: 'InvalidPublicKeyLength' },
  { type: 'error', inputs: [], name: 'NewBlockPeriodIsBelowMinimum' },
  { type: 'error', inputs: [], name: 'NoFeeDelcared' },
  { type: 'error', inputs: [], name: 'OperatorDoesNotExist' },
  { type: 'error', inputs: [], name: 'SameFeeChangeNotAllowed' },
  { type: 'error', inputs: [], name: 'TokenTransferFailed' },
  { type: 'error', inputs: [], name: 'UnsortedOperatorsList' },
  { type: 'error', inputs: [], name: 'ValidatorAlreadyExists' },
  { type: 'error', inputs: [], name: 'ValidatorDoesNotExist' },
  { type: 'error', inputs: [], name: 'ValidatorOwnedByOtherAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]', indexed: false },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'cluster',
        internalType: 'struct ISSVNetworkCore.Cluster',
        type: 'tuple',
        components: [
          { name: 'validatorCount', internalType: 'uint32', type: 'uint32' },
          { name: 'networkFeeIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'index', internalType: 'uint64', type: 'uint64' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' }
        ],
        indexed: false
      }
    ],
    name: 'ClusterDeposited'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]', indexed: false },
      {
        name: 'cluster',
        internalType: 'struct ISSVNetworkCore.Cluster',
        type: 'tuple',
        components: [
          { name: 'validatorCount', internalType: 'uint32', type: 'uint32' },
          { name: 'networkFeeIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'index', internalType: 'uint64', type: 'uint64' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' }
        ],
        indexed: false
      }
    ],
    name: 'ClusterLiquidated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]', indexed: false },
      {
        name: 'cluster',
        internalType: 'struct ISSVNetworkCore.Cluster',
        type: 'tuple',
        components: [
          { name: 'validatorCount', internalType: 'uint32', type: 'uint32' },
          { name: 'networkFeeIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'index', internalType: 'uint64', type: 'uint64' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' }
        ],
        indexed: false
      }
    ],
    name: 'ClusterReactivated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]', indexed: false },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'cluster',
        internalType: 'struct ISSVNetworkCore.Cluster',
        type: 'tuple',
        components: [
          { name: 'validatorCount', internalType: 'uint32', type: 'uint32' },
          { name: 'networkFeeIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'index', internalType: 'uint64', type: 'uint64' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' }
        ],
        indexed: false
      }
    ],
    name: 'ClusterWithdrawn'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'value', internalType: 'uint64', type: 'uint64', indexed: false }],
    name: 'DeclareOperatorFeePeriodUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'value', internalType: 'uint64', type: 'uint64', indexed: false }],
    name: 'ExecuteOperatorFeePeriodUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'recipientAddress', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'FeeRecipientAddressUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'value', internalType: 'uint64', type: 'uint64', indexed: false }],
    name: 'LiquidationThresholdPeriodUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'MinimumLiquidationCollateralUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'recipient', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'NetworkEarningsWithdrawn'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oldFee', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newFee', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'NetworkFeeUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operatorId', internalType: 'uint64', type: 'uint64', indexed: true },
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'publicKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'OperatorAdded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operatorId', internalType: 'uint64', type: 'uint64', indexed: true }
    ],
    name: 'OperatorFeeCancellationDeclared'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operatorId', internalType: 'uint64', type: 'uint64', indexed: true },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'OperatorFeeDeclared'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operatorId', internalType: 'uint64', type: 'uint64', indexed: true },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'OperatorFeeExecuted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'value', internalType: 'uint64', type: 'uint64', indexed: false }],
    name: 'OperatorFeeIncreaseLimitUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'operatorId', internalType: 'uint64', type: 'uint64', indexed: true }],
    name: 'OperatorRemoved'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operatorId', internalType: 'uint64', type: 'uint64', indexed: true },
      { name: 'whitelisted', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'OperatorWhitelistUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operatorId', internalType: 'uint64', type: 'uint64', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'OperatorWithdrawn'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]', indexed: false },
      { name: 'publicKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'shares', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'cluster',
        internalType: 'struct ISSVNetworkCore.Cluster',
        type: 'tuple',
        components: [
          { name: 'validatorCount', internalType: 'uint32', type: 'uint32' },
          { name: 'networkFeeIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'index', internalType: 'uint64', type: 'uint64' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' }
        ],
        indexed: false
      }
    ],
    name: 'ValidatorAdded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]', indexed: false },
      { name: 'publicKey', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'cluster',
        internalType: 'struct ISSVNetworkCore.Cluster',
        type: 'tuple',
        components: [
          { name: 'validatorCount', internalType: 'uint32', type: 'uint32' },
          { name: 'networkFeeIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'index', internalType: 'uint64', type: 'uint64' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' }
        ],
        indexed: false
      }
    ],
    name: 'ValidatorRemoved'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'operatorId', internalType: 'uint64', type: 'uint64' }],
    name: 'cancelDeclaredOperatorFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operatorId', internalType: 'uint64', type: 'uint64' },
      { name: 'fee', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'declareOperatorFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'cluster',
        internalType: 'struct ISSVNetworkCore.Cluster',
        type: 'tuple',
        components: [
          { name: 'validatorCount', internalType: 'uint32', type: 'uint32' },
          { name: 'networkFeeIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'index', internalType: 'uint64', type: 'uint64' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' }
        ]
      }
    ],
    name: 'deposit',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'operatorId', internalType: 'uint64', type: 'uint64' }],
    name: 'executeOperatorFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initialVersion_', internalType: 'string', type: 'string' },
      { name: 'token_', internalType: 'contract IERC20', type: 'address' },
      { name: 'operatorMaxFeeIncrease_', internalType: 'uint64', type: 'uint64' },
      { name: 'declareOperatorFeePeriod_', internalType: 'uint64', type: 'uint64' },
      { name: 'executeOperatorFeePeriod_', internalType: 'uint64', type: 'uint64' },
      { name: 'minimumBlocksBeforeLiquidation_', internalType: 'uint64', type: 'uint64' },
      { name: 'minimumLiquidationCollateral_', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'initialize',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]' },
      {
        name: 'cluster',
        internalType: 'struct ISSVNetworkCore.Cluster',
        type: 'tuple',
        components: [
          { name: 'validatorCount', internalType: 'uint32', type: 'uint32' },
          { name: 'networkFeeIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'index', internalType: 'uint64', type: 'uint64' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' }
        ]
      }
    ],
    name: 'liquidate',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'cluster',
        internalType: 'struct ISSVNetworkCore.Cluster',
        type: 'tuple',
        components: [
          { name: 'validatorCount', internalType: 'uint32', type: 'uint32' },
          { name: 'networkFeeIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'index', internalType: 'uint64', type: 'uint64' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' }
        ]
      }
    ],
    name: 'reactivate',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operatorId', internalType: 'uint64', type: 'uint64' },
      { name: 'fee', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'reduceOperatorFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'publicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'fee', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'registerOperator',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'publicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]' },
      { name: 'sharesEncrypted', internalType: 'bytes', type: 'bytes' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'cluster',
        internalType: 'struct ISSVNetworkCore.Cluster',
        type: 'tuple',
        components: [
          { name: 'validatorCount', internalType: 'uint32', type: 'uint32' },
          { name: 'networkFeeIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'index', internalType: 'uint64', type: 'uint64' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' }
        ]
      }
    ],
    name: 'registerValidator',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'operatorId', internalType: 'uint64', type: 'uint64' }],
    name: 'removeOperator',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'publicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]' },
      {
        name: 'cluster',
        internalType: 'struct ISSVNetworkCore.Cluster',
        type: 'tuple',
        components: [
          { name: 'validatorCount', internalType: 'uint32', type: 'uint32' },
          { name: 'networkFeeIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'index', internalType: 'uint64', type: 'uint64' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' }
        ]
      }
    ],
    name: 'removeValidator',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'feeRecipientAddress', internalType: 'address', type: 'address' }],
    name: 'setFeeRecipientAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operatorId', internalType: 'uint64', type: 'uint64' },
      { name: 'whitelisted', internalType: 'address', type: 'address' }
    ],
    name: 'setOperatorWhitelist',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newDeclareOperatorFeePeriod', internalType: 'uint64', type: 'uint64' }],
    name: 'updateDeclareOperatorFeePeriod',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newExecuteOperatorFeePeriod', internalType: 'uint64', type: 'uint64' }],
    name: 'updateExecuteOperatorFeePeriod',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'blocks', internalType: 'uint64', type: 'uint64' }],
    name: 'updateLiquidationThresholdPeriod',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'updateMinimumLiquidationCollateral',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'fee', internalType: 'uint256', type: 'uint256' }],
    name: 'updateNetworkFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOperatorMaxFeeIncrease', internalType: 'uint64', type: 'uint64' }],
    name: 'updateOperatorFeeIncreaseLimit',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operatorIds', internalType: 'uint64[]', type: 'uint64[]' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'cluster',
        internalType: 'struct ISSVNetworkCore.Cluster',
        type: 'tuple',
        components: [
          { name: 'validatorCount', internalType: 'uint32', type: 'uint32' },
          { name: 'networkFeeIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'index', internalType: 'uint64', type: 'uint64' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' }
        ]
      }
    ],
    name: 'withdraw',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdrawNetworkEarnings',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operatorId', internalType: 'uint64', type: 'uint64' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'withdrawOperatorEarnings',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'operatorId', internalType: 'uint64', type: 'uint64' }],
    name: 'withdrawOperatorEarnings',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC5267
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc5267ABI = [
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'OwnershipTransferred'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pausable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pausableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ShortStrings
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const shortStringsABI = [
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' }
    ]
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EIP712
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eip712ABI = [
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Burnable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20BurnableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'burnFrom',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20PermitABI = [
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link cethABI}__.
 */
export function useCeth(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: cethABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__.
 */
export function useCethRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof cethABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof cethABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: cethABI, ...config } as UseContractReadConfig<
    typeof cethABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useCethDomainSeparator<
  TSelectData = ReadContractResult<typeof cethABI, 'DOMAIN_SEPARATOR'>
>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'DOMAIN_SEPARATOR', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'DOMAIN_SEPARATOR', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"allowance"`.
 */
export function useCethAllowance<TSelectData = ReadContractResult<typeof cethABI, 'allowance'>>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: cethABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof cethABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useCethBalanceOf<TSelectData = ReadContractResult<typeof cethABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: cethABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof cethABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"communityFee"`.
 */
export function useCethCommunityFee<TSelectData = ReadContractResult<typeof cethABI, 'communityFee'>>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'communityFee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'communityFee',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'communityFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"decimals"`.
 */
export function useCethDecimals<TSelectData = ReadContractResult<typeof cethABI, 'decimals'>>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: cethABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof cethABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"delegatedSharesOf"`.
 */
export function useCethDelegatedSharesOf<
  TSelectData = ReadContractResult<typeof cethABI, 'delegatedSharesOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'delegatedSharesOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'delegatedSharesOf',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'delegatedSharesOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useCethEip712Domain<TSelectData = ReadContractResult<typeof cethABI, 'eip712Domain'>>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'eip712Domain', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'eip712Domain', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"getCommunities"`.
 */
export function useCethGetCommunities<TSelectData = ReadContractResult<typeof cethABI, 'getCommunities'>>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'getCommunities', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'getCommunities',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'getCommunities', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"getCommunityByAddress"`.
 */
export function useCethGetCommunityByAddress<
  TSelectData = ReadContractResult<typeof cethABI, 'getCommunityByAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'getCommunityByAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'getCommunityByAddress',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'getCommunityByAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"getDelegatesOf"`.
 */
export function useCethGetDelegatesOf<TSelectData = ReadContractResult<typeof cethABI, 'getDelegatesOf'>>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'getDelegatesOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'getDelegatesOf',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'getDelegatesOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"getDelegationsOf"`.
 */
export function useCethGetDelegationsOf<
  TSelectData = ReadContractResult<typeof cethABI, 'getDelegationsOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'getDelegationsOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'getDelegationsOf',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'getDelegationsOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"getPooledEthByShares"`.
 */
export function useCethGetPooledEthByShares<
  TSelectData = ReadContractResult<typeof cethABI, 'getPooledEthByShares'>
>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'getPooledEthByShares', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'getPooledEthByShares',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'getPooledEthByShares', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"getSharesByPooledEth"`.
 */
export function useCethGetSharesByPooledEth<
  TSelectData = ReadContractResult<typeof cethABI, 'getSharesByPooledEth'>
>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'getSharesByPooledEth', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'getSharesByPooledEth',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'getSharesByPooledEth', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"getTotalDelegatedShares"`.
 */
export function useCethGetTotalDelegatedShares<
  TSelectData = ReadContractResult<typeof cethABI, 'getTotalDelegatedShares'>
>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'getTotalDelegatedShares', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'getTotalDelegatedShares',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'getTotalDelegatedShares', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"getTotalPooledEther"`.
 */
export function useCethGetTotalPooledEther<
  TSelectData = ReadContractResult<typeof cethABI, 'getTotalPooledEther'>
>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'getTotalPooledEther', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'getTotalPooledEther',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'getTotalPooledEther', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"getTotalShares"`.
 */
export function useCethGetTotalShares<TSelectData = ReadContractResult<typeof cethABI, 'getTotalShares'>>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'getTotalShares', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'getTotalShares',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'getTotalShares', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"maxDelegations"`.
 */
export function useCethMaxDelegations<TSelectData = ReadContractResult<typeof cethABI, 'maxDelegations'>>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'maxDelegations', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'maxDelegations',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'maxDelegations', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"name"`.
 */
export function useCethName<TSelectData = ReadContractResult<typeof cethABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: cethABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof cethABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"nonces"`.
 */
export function useCethNonces<TSelectData = ReadContractResult<typeof cethABI, 'nonces'>>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: cethABI, functionName: 'nonces', ...config } as UseContractReadConfig<
    typeof cethABI,
    'nonces',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"operatorFee"`.
 */
export function useCethOperatorFee<TSelectData = ReadContractResult<typeof cethABI, 'operatorFee'>>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'operatorFee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'operatorFee',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'operatorFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"operatorFeeRecipient"`.
 */
export function useCethOperatorFeeRecipient<
  TSelectData = ReadContractResult<typeof cethABI, 'operatorFeeRecipient'>
>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'operatorFeeRecipient', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'operatorFeeRecipient',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'operatorFeeRecipient', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"owner"`.
 */
export function useCethOwner<TSelectData = ReadContractResult<typeof cethABI, 'owner'>>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: cethABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof cethABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"paused"`.
 */
export function useCethPaused<TSelectData = ReadContractResult<typeof cethABI, 'paused'>>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'paused', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: cethABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof cethABI,
    'paused',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"sharesOf"`.
 */
export function useCethSharesOf<TSelectData = ReadContractResult<typeof cethABI, 'sharesOf'>>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'sharesOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: cethABI, functionName: 'sharesOf', ...config } as UseContractReadConfig<
    typeof cethABI,
    'sharesOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"stakeTogetherFee"`.
 */
export function useCethStakeTogetherFee<
  TSelectData = ReadContractResult<typeof cethABI, 'stakeTogetherFee'>
>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'stakeTogetherFee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'stakeTogetherFee',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'stakeTogetherFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"stakeTogetherFeeRecipient"`.
 */
export function useCethStakeTogetherFeeRecipient<
  TSelectData = ReadContractResult<typeof cethABI, 'stakeTogetherFeeRecipient'>
>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'stakeTogetherFeeRecipient', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'stakeTogetherFeeRecipient',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'stakeTogetherFeeRecipient', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"symbol"`.
 */
export function useCethSymbol<TSelectData = ReadContractResult<typeof cethABI, 'symbol'>>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: cethABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof cethABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useCethTotalSupply<TSelectData = ReadContractResult<typeof cethABI, 'totalSupply'>>(
  config: Omit<
    UseContractReadConfig<typeof cethABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: cethABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof cethABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__.
 */
export function useCethWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof cethABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, TFunctionName>({ abi: cethABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"addCommunity"`.
 */
export function useCethAddCommunity<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'addCommunity'>['abi'],
        'addCommunity'
      > & { functionName?: 'addCommunity' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'addCommunity'> & {
        abi?: never
        functionName?: 'addCommunity'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'addCommunity'>({
    abi: cethABI,
    functionName: 'addCommunity',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"approve"`.
 */
export function useCethApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'approve'>({
    abi: cethABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useCethDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'decreaseAllowance'>({
    abi: cethABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useCethIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'increaseAllowance'>({
    abi: cethABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"pause"`.
 */
export function useCethPause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'pause'>['abi'],
        'pause'
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'pause'> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'pause'>({
    abi: cethABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"permit"`.
 */
export function useCethPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'permit'>['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'permit'>({
    abi: cethABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"removeCommunity"`.
 */
export function useCethRemoveCommunity<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'removeCommunity'>['abi'],
        'removeCommunity'
      > & { functionName?: 'removeCommunity' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'removeCommunity'> & {
        abi?: never
        functionName?: 'removeCommunity'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'removeCommunity'>({
    abi: cethABI,
    functionName: 'removeCommunity',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useCethRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'renounceOwnership'>({
    abi: cethABI,
    functionName: 'renounceOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"setCommunityFee"`.
 */
export function useCethSetCommunityFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'setCommunityFee'>['abi'],
        'setCommunityFee'
      > & { functionName?: 'setCommunityFee' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'setCommunityFee'> & {
        abi?: never
        functionName?: 'setCommunityFee'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'setCommunityFee'>({
    abi: cethABI,
    functionName: 'setCommunityFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"setOperatorFee"`.
 */
export function useCethSetOperatorFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'setOperatorFee'>['abi'],
        'setOperatorFee'
      > & { functionName?: 'setOperatorFee' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'setOperatorFee'> & {
        abi?: never
        functionName?: 'setOperatorFee'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'setOperatorFee'>({
    abi: cethABI,
    functionName: 'setOperatorFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"setOperatorFeeRecipient"`.
 */
export function useCethSetOperatorFeeRecipient<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'setOperatorFeeRecipient'>['abi'],
        'setOperatorFeeRecipient'
      > & { functionName?: 'setOperatorFeeRecipient' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'setOperatorFeeRecipient'> & {
        abi?: never
        functionName?: 'setOperatorFeeRecipient'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'setOperatorFeeRecipient'>({
    abi: cethABI,
    functionName: 'setOperatorFeeRecipient',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"setStakeTogetherFee"`.
 */
export function useCethSetStakeTogetherFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'setStakeTogetherFee'>['abi'],
        'setStakeTogetherFee'
      > & { functionName?: 'setStakeTogetherFee' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'setStakeTogetherFee'> & {
        abi?: never
        functionName?: 'setStakeTogetherFee'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'setStakeTogetherFee'>({
    abi: cethABI,
    functionName: 'setStakeTogetherFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"setStakeTogetherFeeRecipient"`.
 */
export function useCethSetStakeTogetherFeeRecipient<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'setStakeTogetherFeeRecipient'>['abi'],
        'setStakeTogetherFeeRecipient'
      > & { functionName?: 'setStakeTogetherFeeRecipient' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'setStakeTogetherFeeRecipient'> & {
        abi?: never
        functionName?: 'setStakeTogetherFeeRecipient'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'setStakeTogetherFeeRecipient'>({
    abi: cethABI,
    functionName: 'setStakeTogetherFeeRecipient',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"transfer"`.
 */
export function useCethTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'transfer'>({
    abi: cethABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useCethTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'transferFrom'>({
    abi: cethABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCethTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'transferOwnership'>({
    abi: cethABI,
    functionName: 'transferOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"transferShares"`.
 */
export function useCethTransferShares<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'transferShares'>['abi'],
        'transferShares'
      > & { functionName?: 'transferShares' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'transferShares'> & {
        abi?: never
        functionName?: 'transferShares'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'transferShares'>({
    abi: cethABI,
    functionName: 'transferShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"transferSharesFrom"`.
 */
export function useCethTransferSharesFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'transferSharesFrom'>['abi'],
        'transferSharesFrom'
      > & { functionName?: 'transferSharesFrom' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'transferSharesFrom'> & {
        abi?: never
        functionName?: 'transferSharesFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'transferSharesFrom'>({
    abi: cethABI,
    functionName: 'transferSharesFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"unpause"`.
 */
export function useCethUnpause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cethABI, 'unpause'>['abi'],
        'unpause'
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<TMode, typeof cethABI, 'unpause'> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cethABI, 'unpause'>({
    abi: cethABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__.
 */
export function usePrepareCethWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof cethABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: cethABI, ...config } as UsePrepareContractWriteConfig<
    typeof cethABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"addCommunity"`.
 */
export function usePrepareCethAddCommunity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cethABI, 'addCommunity'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'addCommunity',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'addCommunity'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareCethApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cethABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareCethDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cethABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareCethIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cethABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareCethPause(
  config: Omit<UsePrepareContractWriteConfig<typeof cethABI, 'pause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareCethPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cethABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"removeCommunity"`.
 */
export function usePrepareCethRemoveCommunity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cethABI, 'removeCommunity'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'removeCommunity',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'removeCommunity'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareCethRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cethABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"setCommunityFee"`.
 */
export function usePrepareCethSetCommunityFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cethABI, 'setCommunityFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'setCommunityFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'setCommunityFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"setOperatorFee"`.
 */
export function usePrepareCethSetOperatorFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cethABI, 'setOperatorFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'setOperatorFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'setOperatorFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"setOperatorFeeRecipient"`.
 */
export function usePrepareCethSetOperatorFeeRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cethABI, 'setOperatorFeeRecipient'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'setOperatorFeeRecipient',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'setOperatorFeeRecipient'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"setStakeTogetherFee"`.
 */
export function usePrepareCethSetStakeTogetherFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cethABI, 'setStakeTogetherFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'setStakeTogetherFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'setStakeTogetherFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"setStakeTogetherFeeRecipient"`.
 */
export function usePrepareCethSetStakeTogetherFeeRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cethABI, 'setStakeTogetherFeeRecipient'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'setStakeTogetherFeeRecipient',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'setStakeTogetherFeeRecipient'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareCethTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cethABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareCethTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cethABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCethTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cethABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"transferShares"`.
 */
export function usePrepareCethTransferShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cethABI, 'transferShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'transferShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'transferShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"transferSharesFrom"`.
 */
export function usePrepareCethTransferSharesFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cethABI, 'transferSharesFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'transferSharesFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'transferSharesFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cethABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareCethUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cethABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: cethABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof cethABI, 'unpause'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cethABI}__.
 */
export function useCethEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof cethABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: cethABI, ...config } as UseContractEventConfig<
    typeof cethABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cethABI}__ and `eventName` set to `"Approval"`.
 */
export function useCethApprovalEvent(
  config: Omit<UseContractEventConfig<typeof cethABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cethABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof cethABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cethABI}__ and `eventName` set to `"BurnDelegatedShares"`.
 */
export function useCethBurnDelegatedSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof cethABI, 'BurnDelegatedShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: cethABI,
    eventName: 'BurnDelegatedShares',
    ...config
  } as UseContractEventConfig<typeof cethABI, 'BurnDelegatedShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cethABI}__ and `eventName` set to `"BurnShares"`.
 */
export function useCethBurnSharesEvent(
  config: Omit<UseContractEventConfig<typeof cethABI, 'BurnShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cethABI, eventName: 'BurnShares', ...config } as UseContractEventConfig<
    typeof cethABI,
    'BurnShares'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cethABI}__ and `eventName` set to `"CommunityAdded"`.
 */
export function useCethCommunityAddedEvent(
  config: Omit<UseContractEventConfig<typeof cethABI, 'CommunityAdded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: cethABI,
    eventName: 'CommunityAdded',
    ...config
  } as UseContractEventConfig<typeof cethABI, 'CommunityAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cethABI}__ and `eventName` set to `"CommunityRemoved"`.
 */
export function useCethCommunityRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof cethABI, 'CommunityRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: cethABI,
    eventName: 'CommunityRemoved',
    ...config
  } as UseContractEventConfig<typeof cethABI, 'CommunityRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cethABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useCethEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof cethABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: cethABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof cethABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cethABI}__ and `eventName` set to `"MintDelegatedShares"`.
 */
export function useCethMintDelegatedSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof cethABI, 'MintDelegatedShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: cethABI,
    eventName: 'MintDelegatedShares',
    ...config
  } as UseContractEventConfig<typeof cethABI, 'MintDelegatedShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cethABI}__ and `eventName` set to `"MintShares"`.
 */
export function useCethMintSharesEvent(
  config: Omit<UseContractEventConfig<typeof cethABI, 'MintShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cethABI, eventName: 'MintShares', ...config } as UseContractEventConfig<
    typeof cethABI,
    'MintShares'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cethABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCethOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof cethABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: cethABI,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof cethABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cethABI}__ and `eventName` set to `"Paused"`.
 */
export function useCethPausedEvent(
  config: Omit<UseContractEventConfig<typeof cethABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cethABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof cethABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cethABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCethTransferEvent(
  config: Omit<UseContractEventConfig<typeof cethABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cethABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof cethABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cethABI}__ and `eventName` set to `"TransferShares"`.
 */
export function useCethTransferSharesEvent(
  config: Omit<UseContractEventConfig<typeof cethABI, 'TransferShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: cethABI,
    eventName: 'TransferShares',
    ...config
  } as UseContractEventConfig<typeof cethABI, 'TransferShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cethABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useCethUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof cethABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cethABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof cethABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link stOracleABI}__.
 */
export function useStOracle(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: stOracleABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__.
 */
export function useStOracleRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stOracleABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof stOracleABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: stOracleABI, ...config } as UseContractReadConfig<
    typeof stOracleABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"beaconBalance"`.
 */
export function useStOracleBeaconBalance<
  TSelectData = ReadContractResult<typeof stOracleABI, 'beaconBalance'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'beaconBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'beaconBalance',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'beaconBalance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"beaconLastReportBlock"`.
 */
export function useStOracleBeaconLastReportBlock<
  TSelectData = ReadContractResult<typeof stOracleABI, 'beaconLastReportBlock'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'beaconLastReportBlock', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'beaconLastReportBlock',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'beaconLastReportBlock', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"getNodeReportByBlock"`.
 */
export function useStOracleGetNodeReportByBlock<
  TSelectData = ReadContractResult<typeof stOracleABI, 'getNodeReportByBlock'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'getNodeReportByBlock', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'getNodeReportByBlock',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'getNodeReportByBlock', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"getNodeReports"`.
 */
export function useStOracleGetNodeReports<
  TSelectData = ReadContractResult<typeof stOracleABI, 'getNodeReports'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'getNodeReports', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'getNodeReports',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'getNodeReports', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"getNodes"`.
 */
export function useStOracleGetNodes<TSelectData = ReadContractResult<typeof stOracleABI, 'getNodes'>>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'getNodes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'getNodes',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'getNodes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"isNode"`.
 */
export function useStOracleIsNode<TSelectData = ReadContractResult<typeof stOracleABI, 'isNode'>>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'isNode', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stOracleABI, functionName: 'isNode', ...config } as UseContractReadConfig<
    typeof stOracleABI,
    'isNode',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"isNodeBlaclisted"`.
 */
export function useStOracleIsNodeBlaclisted<
  TSelectData = ReadContractResult<typeof stOracleABI, 'isNodeBlaclisted'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'isNodeBlaclisted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'isNodeBlaclisted',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'isNodeBlaclisted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"nodes"`.
 */
export function useStOracleNodes<TSelectData = ReadContractResult<typeof stOracleABI, 'nodes'>>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'nodes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stOracleABI, functionName: 'nodes', ...config } as UseContractReadConfig<
    typeof stOracleABI,
    'nodes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"owner"`.
 */
export function useStOracleOwner<TSelectData = ReadContractResult<typeof stOracleABI, 'owner'>>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stOracleABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof stOracleABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"paused"`.
 */
export function useStOraclePaused<TSelectData = ReadContractResult<typeof stOracleABI, 'paused'>>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'paused', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stOracleABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof stOracleABI,
    'paused',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"reportFrequency"`.
 */
export function useStOracleReportFrequency<
  TSelectData = ReadContractResult<typeof stOracleABI, 'reportFrequency'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'reportFrequency', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'reportFrequency',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'reportFrequency', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"reportNextBlock"`.
 */
export function useStOracleReportNextBlock<
  TSelectData = ReadContractResult<typeof stOracleABI, 'reportNextBlock'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'reportNextBlock', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'reportNextBlock',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'reportNextBlock', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"reportQuorum"`.
 */
export function useStOracleReportQuorum<
  TSelectData = ReadContractResult<typeof stOracleABI, 'reportQuorum'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'reportQuorum', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'reportQuorum',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'reportQuorum', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"stakeTogether"`.
 */
export function useStOracleStakeTogether<
  TSelectData = ReadContractResult<typeof stOracleABI, 'stakeTogether'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'stakeTogether', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'stakeTogether',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'stakeTogether', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stOracleABI}__.
 */
export function useStOracleWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stOracleABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof stOracleABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof stOracleABI, TFunctionName>({
    abi: stOracleABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"addNode"`.
 */
export function useStOracleAddNode<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stOracleABI, 'addNode'>['abi'],
        'addNode'
      > & { functionName?: 'addNode' }
    : UseContractWriteConfig<TMode, typeof stOracleABI, 'addNode'> & {
        abi?: never
        functionName?: 'addNode'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stOracleABI, 'addNode'>({
    abi: stOracleABI,
    functionName: 'addNode',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"removeNode"`.
 */
export function useStOracleRemoveNode<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stOracleABI, 'removeNode'>['abi'],
        'removeNode'
      > & { functionName?: 'removeNode' }
    : UseContractWriteConfig<TMode, typeof stOracleABI, 'removeNode'> & {
        abi?: never
        functionName?: 'removeNode'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stOracleABI, 'removeNode'>({
    abi: stOracleABI,
    functionName: 'removeNode',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useStOracleRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stOracleABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof stOracleABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stOracleABI, 'renounceOwnership'>({
    abi: stOracleABI,
    functionName: 'renounceOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"report"`.
 */
export function useStOracleReport<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stOracleABI, 'report'>['abi'],
        'report'
      > & { functionName?: 'report' }
    : UseContractWriteConfig<TMode, typeof stOracleABI, 'report'> & {
        abi?: never
        functionName?: 'report'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stOracleABI, 'report'>({
    abi: stOracleABI,
    functionName: 'report',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"setReportMaxFrequency"`.
 */
export function useStOracleSetReportMaxFrequency<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stOracleABI, 'setReportMaxFrequency'>['abi'],
        'setReportMaxFrequency'
      > & { functionName?: 'setReportMaxFrequency' }
    : UseContractWriteConfig<TMode, typeof stOracleABI, 'setReportMaxFrequency'> & {
        abi?: never
        functionName?: 'setReportMaxFrequency'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stOracleABI, 'setReportMaxFrequency'>({
    abi: stOracleABI,
    functionName: 'setReportMaxFrequency',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"setReportQuorum"`.
 */
export function useStOracleSetReportQuorum<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stOracleABI, 'setReportQuorum'>['abi'],
        'setReportQuorum'
      > & { functionName?: 'setReportQuorum' }
    : UseContractWriteConfig<TMode, typeof stOracleABI, 'setReportQuorum'> & {
        abi?: never
        functionName?: 'setReportQuorum'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stOracleABI, 'setReportQuorum'>({
    abi: stOracleABI,
    functionName: 'setReportQuorum',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function useStOracleSetStakeTogether<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stOracleABI, 'setStakeTogether'>['abi'],
        'setStakeTogether'
      > & { functionName?: 'setStakeTogether' }
    : UseContractWriteConfig<TMode, typeof stOracleABI, 'setStakeTogether'> & {
        abi?: never
        functionName?: 'setStakeTogether'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stOracleABI, 'setStakeTogether'>({
    abi: stOracleABI,
    functionName: 'setStakeTogether',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useStOracleTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stOracleABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof stOracleABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stOracleABI, 'transferOwnership'>({
    abi: stOracleABI,
    functionName: 'transferOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stOracleABI}__.
 */
export function usePrepareStOracleWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof stOracleABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: stOracleABI, ...config } as UsePrepareContractWriteConfig<
    typeof stOracleABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"addNode"`.
 */
export function usePrepareStOracleAddNode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stOracleABI, 'addNode'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stOracleABI,
    functionName: 'addNode',
    ...config
  } as UsePrepareContractWriteConfig<typeof stOracleABI, 'addNode'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"removeNode"`.
 */
export function usePrepareStOracleRemoveNode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stOracleABI, 'removeNode'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stOracleABI,
    functionName: 'removeNode',
    ...config
  } as UsePrepareContractWriteConfig<typeof stOracleABI, 'removeNode'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareStOracleRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stOracleABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stOracleABI,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof stOracleABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"report"`.
 */
export function usePrepareStOracleReport(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stOracleABI, 'report'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stOracleABI,
    functionName: 'report',
    ...config
  } as UsePrepareContractWriteConfig<typeof stOracleABI, 'report'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"setReportMaxFrequency"`.
 */
export function usePrepareStOracleSetReportMaxFrequency(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stOracleABI, 'setReportMaxFrequency'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stOracleABI,
    functionName: 'setReportMaxFrequency',
    ...config
  } as UsePrepareContractWriteConfig<typeof stOracleABI, 'setReportMaxFrequency'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"setReportQuorum"`.
 */
export function usePrepareStOracleSetReportQuorum(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stOracleABI, 'setReportQuorum'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stOracleABI,
    functionName: 'setReportQuorum',
    ...config
  } as UsePrepareContractWriteConfig<typeof stOracleABI, 'setReportQuorum'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function usePrepareStOracleSetStakeTogether(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stOracleABI, 'setStakeTogether'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stOracleABI,
    functionName: 'setStakeTogether',
    ...config
  } as UsePrepareContractWriteConfig<typeof stOracleABI, 'setStakeTogether'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareStOracleTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stOracleABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stOracleABI,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof stOracleABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__.
 */
export function useStOracleEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof stOracleABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: stOracleABI, ...config } as UseContractEventConfig<
    typeof stOracleABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"ConsensusApproved"`.
 */
export function useStOracleConsensusApprovedEvent(
  config: Omit<
    UseContractEventConfig<typeof stOracleABI, 'ConsensusApproved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'ConsensusApproved',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'ConsensusApproved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"ConsensusFail"`.
 */
export function useStOracleConsensusFailEvent(
  config: Omit<
    UseContractEventConfig<typeof stOracleABI, 'ConsensusFail'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'ConsensusFail',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'ConsensusFail'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"NodeAdded"`.
 */
export function useStOracleNodeAddedEvent(
  config: Omit<UseContractEventConfig<typeof stOracleABI, 'NodeAdded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'NodeAdded',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'NodeAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"NodeBlacklisted"`.
 */
export function useStOracleNodeBlacklistedEvent(
  config: Omit<
    UseContractEventConfig<typeof stOracleABI, 'NodeBlacklisted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'NodeBlacklisted',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'NodeBlacklisted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"NodeRemoved"`.
 */
export function useStOracleNodeRemovedEvent(
  config: Omit<UseContractEventConfig<typeof stOracleABI, 'NodeRemoved'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'NodeRemoved',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'NodeRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"NonConsensusValueReported"`.
 */
export function useStOracleNonConsensusValueReportedEvent(
  config: Omit<
    UseContractEventConfig<typeof stOracleABI, 'NonConsensusValueReported'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'NonConsensusValueReported',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'NonConsensusValueReported'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useStOracleOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof stOracleABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"Paused"`.
 */
export function useStOraclePausedEvent(
  config: Omit<UseContractEventConfig<typeof stOracleABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: stOracleABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof stOracleABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"ReportMaxFrequencyChanged"`.
 */
export function useStOracleReportMaxFrequencyChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof stOracleABI, 'ReportMaxFrequencyChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'ReportMaxFrequencyChanged',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'ReportMaxFrequencyChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"ReportQuorumChanged"`.
 */
export function useStOracleReportQuorumChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof stOracleABI, 'ReportQuorumChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'ReportQuorumChanged',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'ReportQuorumChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useStOracleUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof stOracleABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'Unpaused',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link stValidatorABI}__.
 */
export function useStValidator(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: stValidatorABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stValidatorABI}__.
 */
export function useStValidatorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stValidatorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stValidatorABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: stValidatorABI, ...config } as UseContractReadConfig<
    typeof stValidatorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"depositContract"`.
 */
export function useStValidatorDepositContract<
  TSelectData = ReadContractResult<typeof stValidatorABI, 'depositContract'>
>(
  config: Omit<
    UseContractReadConfig<typeof stValidatorABI, 'depositContract', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stValidatorABI,
    functionName: 'depositContract',
    ...config
  } as UseContractReadConfig<typeof stValidatorABI, 'depositContract', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"getValidators"`.
 */
export function useStValidatorGetValidators<
  TSelectData = ReadContractResult<typeof stValidatorABI, 'getValidators'>
>(
  config: Omit<
    UseContractReadConfig<typeof stValidatorABI, 'getValidators', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stValidatorABI,
    functionName: 'getValidators',
    ...config
  } as UseContractReadConfig<typeof stValidatorABI, 'getValidators', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"isValidator"`.
 */
export function useStValidatorIsValidator<
  TSelectData = ReadContractResult<typeof stValidatorABI, 'isValidator'>
>(
  config: Omit<
    UseContractReadConfig<typeof stValidatorABI, 'isValidator', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stValidatorABI,
    functionName: 'isValidator',
    ...config
  } as UseContractReadConfig<typeof stValidatorABI, 'isValidator', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"owner"`.
 */
export function useStValidatorOwner<TSelectData = ReadContractResult<typeof stValidatorABI, 'owner'>>(
  config: Omit<
    UseContractReadConfig<typeof stValidatorABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stValidatorABI,
    functionName: 'owner',
    ...config
  } as UseContractReadConfig<typeof stValidatorABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"ssvNetwork"`.
 */
export function useStValidatorSsvNetwork<
  TSelectData = ReadContractResult<typeof stValidatorABI, 'ssvNetwork'>
>(
  config: Omit<
    UseContractReadConfig<typeof stValidatorABI, 'ssvNetwork', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stValidatorABI,
    functionName: 'ssvNetwork',
    ...config
  } as UseContractReadConfig<typeof stValidatorABI, 'ssvNetwork', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"ssvToken"`.
 */
export function useStValidatorSsvToken<
  TSelectData = ReadContractResult<typeof stValidatorABI, 'ssvToken'>
>(
  config: Omit<
    UseContractReadConfig<typeof stValidatorABI, 'ssvToken', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stValidatorABI,
    functionName: 'ssvToken',
    ...config
  } as UseContractReadConfig<typeof stValidatorABI, 'ssvToken', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"stakeTogether"`.
 */
export function useStValidatorStakeTogether<
  TSelectData = ReadContractResult<typeof stValidatorABI, 'stakeTogether'>
>(
  config: Omit<
    UseContractReadConfig<typeof stValidatorABI, 'stakeTogether', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stValidatorABI,
    functionName: 'stakeTogether',
    ...config
  } as UseContractReadConfig<typeof stValidatorABI, 'stakeTogether', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"validators"`.
 */
export function useStValidatorValidators<
  TSelectData = ReadContractResult<typeof stValidatorABI, 'validators'>
>(
  config: Omit<
    UseContractReadConfig<typeof stValidatorABI, 'validators', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stValidatorABI,
    functionName: 'validators',
    ...config
  } as UseContractReadConfig<typeof stValidatorABI, 'validators', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"withdrawalCredentials"`.
 */
export function useStValidatorWithdrawalCredentials<
  TSelectData = ReadContractResult<typeof stValidatorABI, 'withdrawalCredentials'>
>(
  config: Omit<
    UseContractReadConfig<typeof stValidatorABI, 'withdrawalCredentials', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stValidatorABI,
    functionName: 'withdrawalCredentials',
    ...config
  } as UseContractReadConfig<typeof stValidatorABI, 'withdrawalCredentials', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stValidatorABI}__.
 */
export function useStValidatorWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stValidatorABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof stValidatorABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof stValidatorABI, TFunctionName>({
    abi: stValidatorABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"approve"`.
 */
export function useStValidatorApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stValidatorABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof stValidatorABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stValidatorABI, 'approve'>({
    abi: stValidatorABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"createValidator"`.
 */
export function useStValidatorCreateValidator<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stValidatorABI, 'createValidator'>['abi'],
        'createValidator'
      > & { functionName?: 'createValidator' }
    : UseContractWriteConfig<TMode, typeof stValidatorABI, 'createValidator'> & {
        abi?: never
        functionName?: 'createValidator'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stValidatorABI, 'createValidator'>({
    abi: stValidatorABI,
    functionName: 'createValidator',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"deposit"`.
 */
export function useStValidatorDeposit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stValidatorABI, 'deposit'>['abi'],
        'deposit'
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<TMode, typeof stValidatorABI, 'deposit'> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stValidatorABI, 'deposit'>({
    abi: stValidatorABI,
    functionName: 'deposit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"liquidateSSVNetwork"`.
 */
export function useStValidatorLiquidateSsvNetwork<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stValidatorABI, 'liquidateSSVNetwork'>['abi'],
        'liquidateSSVNetwork'
      > & { functionName?: 'liquidateSSVNetwork' }
    : UseContractWriteConfig<TMode, typeof stValidatorABI, 'liquidateSSVNetwork'> & {
        abi?: never
        functionName?: 'liquidateSSVNetwork'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stValidatorABI, 'liquidateSSVNetwork'>({
    abi: stValidatorABI,
    functionName: 'liquidateSSVNetwork',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"reactivateSSV"`.
 */
export function useStValidatorReactivateSsv<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stValidatorABI, 'reactivateSSV'>['abi'],
        'reactivateSSV'
      > & { functionName?: 'reactivateSSV' }
    : UseContractWriteConfig<TMode, typeof stValidatorABI, 'reactivateSSV'> & {
        abi?: never
        functionName?: 'reactivateSSV'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stValidatorABI, 'reactivateSSV'>({
    abi: stValidatorABI,
    functionName: 'reactivateSSV',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"registerValidator"`.
 */
export function useStValidatorRegisterValidator<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stValidatorABI, 'registerValidator'>['abi'],
        'registerValidator'
      > & { functionName?: 'registerValidator' }
    : UseContractWriteConfig<TMode, typeof stValidatorABI, 'registerValidator'> & {
        abi?: never
        functionName?: 'registerValidator'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stValidatorABI, 'registerValidator'>({
    abi: stValidatorABI,
    functionName: 'registerValidator',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"removeValidator"`.
 */
export function useStValidatorRemoveValidator<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stValidatorABI, 'removeValidator'>['abi'],
        'removeValidator'
      > & { functionName?: 'removeValidator' }
    : UseContractWriteConfig<TMode, typeof stValidatorABI, 'removeValidator'> & {
        abi?: never
        functionName?: 'removeValidator'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stValidatorABI, 'removeValidator'>({
    abi: stValidatorABI,
    functionName: 'removeValidator',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useStValidatorRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stValidatorABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof stValidatorABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stValidatorABI, 'renounceOwnership'>({
    abi: stValidatorABI,
    functionName: 'renounceOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"setFeeRecipientAddress"`.
 */
export function useStValidatorSetFeeRecipientAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stValidatorABI, 'setFeeRecipientAddress'>['abi'],
        'setFeeRecipientAddress'
      > & { functionName?: 'setFeeRecipientAddress' }
    : UseContractWriteConfig<TMode, typeof stValidatorABI, 'setFeeRecipientAddress'> & {
        abi?: never
        functionName?: 'setFeeRecipientAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stValidatorABI, 'setFeeRecipientAddress'>({
    abi: stValidatorABI,
    functionName: 'setFeeRecipientAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function useStValidatorSetStakeTogether<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stValidatorABI, 'setStakeTogether'>['abi'],
        'setStakeTogether'
      > & { functionName?: 'setStakeTogether' }
    : UseContractWriteConfig<TMode, typeof stValidatorABI, 'setStakeTogether'> & {
        abi?: never
        functionName?: 'setStakeTogether'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stValidatorABI, 'setStakeTogether'>({
    abi: stValidatorABI,
    functionName: 'setStakeTogether',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"setWithdrawalCredentials"`.
 */
export function useStValidatorSetWithdrawalCredentials<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stValidatorABI, 'setWithdrawalCredentials'>['abi'],
        'setWithdrawalCredentials'
      > & { functionName?: 'setWithdrawalCredentials' }
    : UseContractWriteConfig<TMode, typeof stValidatorABI, 'setWithdrawalCredentials'> & {
        abi?: never
        functionName?: 'setWithdrawalCredentials'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stValidatorABI, 'setWithdrawalCredentials'>({
    abi: stValidatorABI,
    functionName: 'setWithdrawalCredentials',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useStValidatorTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stValidatorABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof stValidatorABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stValidatorABI, 'transferOwnership'>({
    abi: stValidatorABI,
    functionName: 'transferOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"withdraw"`.
 */
export function useStValidatorWithdraw<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stValidatorABI, 'withdraw'>['abi'],
        'withdraw'
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<TMode, typeof stValidatorABI, 'withdraw'> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stValidatorABI, 'withdraw'>({
    abi: stValidatorABI,
    functionName: 'withdraw',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"withdrawAllEthToStakeTogether"`.
 */
export function useStValidatorWithdrawAllEthToStakeTogether<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stValidatorABI, 'withdrawAllEthToStakeTogether'>['abi'],
        'withdrawAllEthToStakeTogether'
      > & { functionName?: 'withdrawAllEthToStakeTogether' }
    : UseContractWriteConfig<TMode, typeof stValidatorABI, 'withdrawAllEthToStakeTogether'> & {
        abi?: never
        functionName?: 'withdrawAllEthToStakeTogether'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stValidatorABI, 'withdrawAllEthToStakeTogether'>({
    abi: stValidatorABI,
    functionName: 'withdrawAllEthToStakeTogether',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"withdrawSSVToken"`.
 */
export function useStValidatorWithdrawSsvToken<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stValidatorABI, 'withdrawSSVToken'>['abi'],
        'withdrawSSVToken'
      > & { functionName?: 'withdrawSSVToken' }
    : UseContractWriteConfig<TMode, typeof stValidatorABI, 'withdrawSSVToken'> & {
        abi?: never
        functionName?: 'withdrawSSVToken'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stValidatorABI, 'withdrawSSVToken'>({
    abi: stValidatorABI,
    functionName: 'withdrawSSVToken',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stValidatorABI}__.
 */
export function usePrepareStValidatorWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof stValidatorABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: stValidatorABI, ...config } as UsePrepareContractWriteConfig<
    typeof stValidatorABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareStValidatorApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stValidatorABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stValidatorABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof stValidatorABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"createValidator"`.
 */
export function usePrepareStValidatorCreateValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stValidatorABI, 'createValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stValidatorABI,
    functionName: 'createValidator',
    ...config
  } as UsePrepareContractWriteConfig<typeof stValidatorABI, 'createValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareStValidatorDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stValidatorABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stValidatorABI,
    functionName: 'deposit',
    ...config
  } as UsePrepareContractWriteConfig<typeof stValidatorABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"liquidateSSVNetwork"`.
 */
export function usePrepareStValidatorLiquidateSsvNetwork(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stValidatorABI, 'liquidateSSVNetwork'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stValidatorABI,
    functionName: 'liquidateSSVNetwork',
    ...config
  } as UsePrepareContractWriteConfig<typeof stValidatorABI, 'liquidateSSVNetwork'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"reactivateSSV"`.
 */
export function usePrepareStValidatorReactivateSsv(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stValidatorABI, 'reactivateSSV'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stValidatorABI,
    functionName: 'reactivateSSV',
    ...config
  } as UsePrepareContractWriteConfig<typeof stValidatorABI, 'reactivateSSV'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"registerValidator"`.
 */
export function usePrepareStValidatorRegisterValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stValidatorABI, 'registerValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stValidatorABI,
    functionName: 'registerValidator',
    ...config
  } as UsePrepareContractWriteConfig<typeof stValidatorABI, 'registerValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"removeValidator"`.
 */
export function usePrepareStValidatorRemoveValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stValidatorABI, 'removeValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stValidatorABI,
    functionName: 'removeValidator',
    ...config
  } as UsePrepareContractWriteConfig<typeof stValidatorABI, 'removeValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareStValidatorRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stValidatorABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stValidatorABI,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof stValidatorABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"setFeeRecipientAddress"`.
 */
export function usePrepareStValidatorSetFeeRecipientAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stValidatorABI, 'setFeeRecipientAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stValidatorABI,
    functionName: 'setFeeRecipientAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof stValidatorABI, 'setFeeRecipientAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function usePrepareStValidatorSetStakeTogether(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stValidatorABI, 'setStakeTogether'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stValidatorABI,
    functionName: 'setStakeTogether',
    ...config
  } as UsePrepareContractWriteConfig<typeof stValidatorABI, 'setStakeTogether'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"setWithdrawalCredentials"`.
 */
export function usePrepareStValidatorSetWithdrawalCredentials(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stValidatorABI, 'setWithdrawalCredentials'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stValidatorABI,
    functionName: 'setWithdrawalCredentials',
    ...config
  } as UsePrepareContractWriteConfig<typeof stValidatorABI, 'setWithdrawalCredentials'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareStValidatorTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stValidatorABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stValidatorABI,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof stValidatorABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareStValidatorWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stValidatorABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stValidatorABI,
    functionName: 'withdraw',
    ...config
  } as UsePrepareContractWriteConfig<typeof stValidatorABI, 'withdraw'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"withdrawAllEthToStakeTogether"`.
 */
export function usePrepareStValidatorWithdrawAllEthToStakeTogether(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stValidatorABI, 'withdrawAllEthToStakeTogether'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stValidatorABI,
    functionName: 'withdrawAllEthToStakeTogether',
    ...config
  } as UsePrepareContractWriteConfig<typeof stValidatorABI, 'withdrawAllEthToStakeTogether'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stValidatorABI}__ and `functionName` set to `"withdrawSSVToken"`.
 */
export function usePrepareStValidatorWithdrawSsvToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stValidatorABI, 'withdrawSSVToken'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stValidatorABI,
    functionName: 'withdrawSSVToken',
    ...config
  } as UsePrepareContractWriteConfig<typeof stValidatorABI, 'withdrawSSVToken'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stValidatorABI}__.
 */
export function useStValidatorEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof stValidatorABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: stValidatorABI, ...config } as UseContractEventConfig<
    typeof stValidatorABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stValidatorABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useStValidatorOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof stValidatorABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stValidatorABI,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof stValidatorABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stValidatorABI}__ and `eventName` set to `"SSVNetworkLiquidated"`.
 */
export function useStValidatorSsvNetworkLiquidatedEvent(
  config: Omit<
    UseContractEventConfig<typeof stValidatorABI, 'SSVNetworkLiquidated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stValidatorABI,
    eventName: 'SSVNetworkLiquidated',
    ...config
  } as UseContractEventConfig<typeof stValidatorABI, 'SSVNetworkLiquidated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stValidatorABI}__ and `eventName` set to `"SSVNetworkReactivated"`.
 */
export function useStValidatorSsvNetworkReactivatedEvent(
  config: Omit<
    UseContractEventConfig<typeof stValidatorABI, 'SSVNetworkReactivated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stValidatorABI,
    eventName: 'SSVNetworkReactivated',
    ...config
  } as UseContractEventConfig<typeof stValidatorABI, 'SSVNetworkReactivated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stValidatorABI}__ and `eventName` set to `"SSVNetworkRegistered"`.
 */
export function useStValidatorSsvNetworkRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof stValidatorABI, 'SSVNetworkRegistered'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stValidatorABI,
    eventName: 'SSVNetworkRegistered',
    ...config
  } as UseContractEventConfig<typeof stValidatorABI, 'SSVNetworkRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stValidatorABI}__ and `eventName` set to `"SSVNetworkRemoved"`.
 */
export function useStValidatorSsvNetworkRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof stValidatorABI, 'SSVNetworkRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stValidatorABI,
    eventName: 'SSVNetworkRemoved',
    ...config
  } as UseContractEventConfig<typeof stValidatorABI, 'SSVNetworkRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stValidatorABI}__ and `eventName` set to `"ValidatorCreated"`.
 */
export function useStValidatorValidatorCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof stValidatorABI, 'ValidatorCreated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stValidatorABI,
    eventName: 'ValidatorCreated',
    ...config
  } as UseContractEventConfig<typeof stValidatorABI, 'ValidatorCreated'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function useStakeTogether(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: stakeTogetherABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function useStakeTogetherRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useStakeTogetherDomainSeparator<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'DOMAIN_SEPARATOR'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'DOMAIN_SEPARATOR', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'DOMAIN_SEPARATOR', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"allowance"`.
 */
export function useStakeTogetherAllowance<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'allowance'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useStakeTogetherBalanceOf<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"communityFee"`.
 */
export function useStakeTogetherCommunityFee<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'communityFee'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'communityFee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'communityFee',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'communityFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"decimals"`.
 */
export function useStakeTogetherDecimals<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'decimals'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"delegatedSharesOf"`.
 */
export function useStakeTogetherDelegatedSharesOf<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'delegatedSharesOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'delegatedSharesOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'delegatedSharesOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'delegatedSharesOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useStakeTogetherEip712Domain<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'eip712Domain'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'eip712Domain', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'eip712Domain', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getBufferBalance"`.
 */
export function useStakeTogetherGetBufferBalance<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'getBufferBalance'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'getBufferBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getBufferBalance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'getBufferBalance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getCommunities"`.
 */
export function useStakeTogetherGetCommunities<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'getCommunities'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'getCommunities', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getCommunities',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'getCommunities', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getCommunityByAddress"`.
 */
export function useStakeTogetherGetCommunityByAddress<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'getCommunityByAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'getCommunityByAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getCommunityByAddress',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'getCommunityByAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getDelegatesOf"`.
 */
export function useStakeTogetherGetDelegatesOf<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'getDelegatesOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'getDelegatesOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getDelegatesOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'getDelegatesOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getDelegationsOf"`.
 */
export function useStakeTogetherGetDelegationsOf<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'getDelegationsOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'getDelegationsOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getDelegationsOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'getDelegationsOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getPoolBalance"`.
 */
export function useStakeTogetherGetPoolBalance<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'getPoolBalance'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'getPoolBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getPoolBalance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'getPoolBalance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getPoolSize"`.
 */
export function useStakeTogetherGetPoolSize<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'getPoolSize'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'getPoolSize', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getPoolSize',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'getPoolSize', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getPooledEthByShares"`.
 */
export function useStakeTogetherGetPooledEthByShares<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'getPooledEthByShares'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'getPooledEthByShares', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getPooledEthByShares',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'getPooledEthByShares', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getSharesByPooledEth"`.
 */
export function useStakeTogetherGetSharesByPooledEth<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'getSharesByPooledEth'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'getSharesByPooledEth', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getSharesByPooledEth',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'getSharesByPooledEth', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getTotalDelegatedShares"`.
 */
export function useStakeTogetherGetTotalDelegatedShares<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'getTotalDelegatedShares'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'getTotalDelegatedShares', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getTotalDelegatedShares',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'getTotalDelegatedShares', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getTotalPooledEther"`.
 */
export function useStakeTogetherGetTotalPooledEther<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'getTotalPooledEther'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'getTotalPooledEther', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getTotalPooledEther',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'getTotalPooledEther', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getTotalShares"`.
 */
export function useStakeTogetherGetTotalShares<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'getTotalShares'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'getTotalShares', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getTotalShares',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'getTotalShares', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getWithdrawalBalance"`.
 */
export function useStakeTogetherGetWithdrawalBalance<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'getWithdrawalBalance'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'getWithdrawalBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getWithdrawalBalance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'getWithdrawalBalance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"maxDelegations"`.
 */
export function useStakeTogetherMaxDelegations<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'maxDelegations'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'maxDelegations', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'maxDelegations',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'maxDelegations', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"name"`.
 */
export function useStakeTogetherName<TSelectData = ReadContractResult<typeof stakeTogetherABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"nonces"`.
 */
export function useStakeTogetherNonces<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'nonces'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'nonces',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'nonces', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"operatorFee"`.
 */
export function useStakeTogetherOperatorFee<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'operatorFee'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'operatorFee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'operatorFee',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'operatorFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"operatorFeeRecipient"`.
 */
export function useStakeTogetherOperatorFeeRecipient<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'operatorFeeRecipient'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'operatorFeeRecipient', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'operatorFeeRecipient',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'operatorFeeRecipient', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"oracle"`.
 */
export function useStakeTogetherOracle<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'oracle'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'oracle', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'oracle',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'oracle', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"owner"`.
 */
export function useStakeTogetherOwner<TSelectData = ReadContractResult<typeof stakeTogetherABI, 'owner'>>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'owner',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"paused"`.
 */
export function useStakeTogetherPaused<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'paused'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'paused', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'paused',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'paused', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"sharesOf"`.
 */
export function useStakeTogetherSharesOf<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'sharesOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'sharesOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'sharesOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'sharesOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"stakeTogetherFee"`.
 */
export function useStakeTogetherStakeTogetherFee<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'stakeTogetherFee'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'stakeTogetherFee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'stakeTogetherFee',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'stakeTogetherFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"stakeTogetherFeeRecipient"`.
 */
export function useStakeTogetherStakeTogetherFeeRecipient<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'stakeTogetherFeeRecipient'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'stakeTogetherFeeRecipient', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'stakeTogetherFeeRecipient',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'stakeTogetherFeeRecipient', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"symbol"`.
 */
export function useStakeTogetherSymbol<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'symbol'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useStakeTogetherTotalSupply<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'totalSupply'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"validator"`.
 */
export function useStakeTogetherValidator<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'validator'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'validator', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'validator',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'validator', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function useStakeTogetherWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, TFunctionName>({
    abi: stakeTogetherABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"addCommunity"`.
 */
export function useStakeTogetherAddCommunity<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'addCommunity'>['abi'],
        'addCommunity'
      > & { functionName?: 'addCommunity' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'addCommunity'> & {
        abi?: never
        functionName?: 'addCommunity'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'addCommunity'>({
    abi: stakeTogetherABI,
    functionName: 'addCommunity',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"approve"`.
 */
export function useStakeTogetherApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'approve'>({
    abi: stakeTogetherABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"createValidator"`.
 */
export function useStakeTogetherCreateValidator<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'createValidator'>['abi'],
        'createValidator'
      > & { functionName?: 'createValidator' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'createValidator'> & {
        abi?: never
        functionName?: 'createValidator'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'createValidator'>({
    abi: stakeTogetherABI,
    functionName: 'createValidator',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useStakeTogetherDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'decreaseAllowance'>({
    abi: stakeTogetherABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositBuffer"`.
 */
export function useStakeTogetherDepositBuffer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'depositBuffer'>['abi'],
        'depositBuffer'
      > & { functionName?: 'depositBuffer' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'depositBuffer'> & {
        abi?: never
        functionName?: 'depositBuffer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'depositBuffer'>({
    abi: stakeTogetherABI,
    functionName: 'depositBuffer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useStakeTogetherIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'increaseAllowance'>({
    abi: stakeTogetherABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"pause"`.
 */
export function useStakeTogetherPause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'pause'>['abi'],
        'pause'
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'pause'> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'pause'>({
    abi: stakeTogetherABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"permit"`.
 */
export function useStakeTogetherPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'permit'>['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'permit'>({
    abi: stakeTogetherABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"removeCommunity"`.
 */
export function useStakeTogetherRemoveCommunity<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'removeCommunity'>['abi'],
        'removeCommunity'
      > & { functionName?: 'removeCommunity' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'removeCommunity'> & {
        abi?: never
        functionName?: 'removeCommunity'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'removeCommunity'>({
    abi: stakeTogetherABI,
    functionName: 'removeCommunity',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useStakeTogetherRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'renounceOwnership'>({
    abi: stakeTogetherABI,
    functionName: 'renounceOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setBeaconBalance"`.
 */
export function useStakeTogetherSetBeaconBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setBeaconBalance'>['abi'],
        'setBeaconBalance'
      > & { functionName?: 'setBeaconBalance' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setBeaconBalance'> & {
        abi?: never
        functionName?: 'setBeaconBalance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setBeaconBalance'>({
    abi: stakeTogetherABI,
    functionName: 'setBeaconBalance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setCommunityFee"`.
 */
export function useStakeTogetherSetCommunityFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setCommunityFee'>['abi'],
        'setCommunityFee'
      > & { functionName?: 'setCommunityFee' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setCommunityFee'> & {
        abi?: never
        functionName?: 'setCommunityFee'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setCommunityFee'>({
    abi: stakeTogetherABI,
    functionName: 'setCommunityFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setMinimumStakeAmount"`.
 */
export function useStakeTogetherSetMinimumStakeAmount<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setMinimumStakeAmount'>['abi'],
        'setMinimumStakeAmount'
      > & { functionName?: 'setMinimumStakeAmount' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setMinimumStakeAmount'> & {
        abi?: never
        functionName?: 'setMinimumStakeAmount'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setMinimumStakeAmount'>({
    abi: stakeTogetherABI,
    functionName: 'setMinimumStakeAmount',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setOperatorFee"`.
 */
export function useStakeTogetherSetOperatorFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setOperatorFee'>['abi'],
        'setOperatorFee'
      > & { functionName?: 'setOperatorFee' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setOperatorFee'> & {
        abi?: never
        functionName?: 'setOperatorFee'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setOperatorFee'>({
    abi: stakeTogetherABI,
    functionName: 'setOperatorFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setOperatorFeeRecipient"`.
 */
export function useStakeTogetherSetOperatorFeeRecipient<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setOperatorFeeRecipient'>['abi'],
        'setOperatorFeeRecipient'
      > & { functionName?: 'setOperatorFeeRecipient' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setOperatorFeeRecipient'> & {
        abi?: never
        functionName?: 'setOperatorFeeRecipient'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setOperatorFeeRecipient'>({
    abi: stakeTogetherABI,
    functionName: 'setOperatorFeeRecipient',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setStakeTogetherFee"`.
 */
export function useStakeTogetherSetStakeTogetherFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setStakeTogetherFee'>['abi'],
        'setStakeTogetherFee'
      > & { functionName?: 'setStakeTogetherFee' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setStakeTogetherFee'> & {
        abi?: never
        functionName?: 'setStakeTogetherFee'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setStakeTogetherFee'>({
    abi: stakeTogetherABI,
    functionName: 'setStakeTogetherFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setStakeTogetherFeeRecipient"`.
 */
export function useStakeTogetherSetStakeTogetherFeeRecipient<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setStakeTogetherFeeRecipient'>['abi'],
        'setStakeTogetherFeeRecipient'
      > & { functionName?: 'setStakeTogetherFeeRecipient' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setStakeTogetherFeeRecipient'> & {
        abi?: never
        functionName?: 'setStakeTogetherFeeRecipient'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setStakeTogetherFeeRecipient'>({
    abi: stakeTogetherABI,
    functionName: 'setStakeTogetherFeeRecipient',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"stake"`.
 */
export function useStakeTogetherStake<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'stake'>['abi'],
        'stake'
      > & { functionName?: 'stake' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'stake'> & {
        abi?: never
        functionName?: 'stake'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'stake'>({
    abi: stakeTogetherABI,
    functionName: 'stake',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transfer"`.
 */
export function useStakeTogetherTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'transfer'>({
    abi: stakeTogetherABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useStakeTogetherTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'transferFrom'>({
    abi: stakeTogetherABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useStakeTogetherTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'transferOwnership'>({
    abi: stakeTogetherABI,
    functionName: 'transferOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferShares"`.
 */
export function useStakeTogetherTransferShares<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferShares'>['abi'],
        'transferShares'
      > & { functionName?: 'transferShares' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'transferShares'> & {
        abi?: never
        functionName?: 'transferShares'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'transferShares'>({
    abi: stakeTogetherABI,
    functionName: 'transferShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferSharesFrom"`.
 */
export function useStakeTogetherTransferSharesFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferSharesFrom'>['abi'],
        'transferSharesFrom'
      > & { functionName?: 'transferSharesFrom' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'transferSharesFrom'> & {
        abi?: never
        functionName?: 'transferSharesFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'transferSharesFrom'>({
    abi: stakeTogetherABI,
    functionName: 'transferSharesFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"unpause"`.
 */
export function useStakeTogetherUnpause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'unpause'>['abi'],
        'unpause'
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'unpause'> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'unpause'>({
    abi: stakeTogetherABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"unstake"`.
 */
export function useStakeTogetherUnstake<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'unstake'>['abi'],
        'unstake'
      > & { functionName?: 'unstake' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'unstake'> & {
        abi?: never
        functionName?: 'unstake'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'unstake'>({
    abi: stakeTogetherABI,
    functionName: 'unstake',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawBuffer"`.
 */
export function useStakeTogetherWithdrawBuffer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'withdrawBuffer'>['abi'],
        'withdrawBuffer'
      > & { functionName?: 'withdrawBuffer' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'withdrawBuffer'> & {
        abi?: never
        functionName?: 'withdrawBuffer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'withdrawBuffer'>({
    abi: stakeTogetherABI,
    functionName: 'withdrawBuffer',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function usePrepareStakeTogetherWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof stakeTogetherABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: stakeTogetherABI, ...config } as UsePrepareContractWriteConfig<
    typeof stakeTogetherABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"addCommunity"`.
 */
export function usePrepareStakeTogetherAddCommunity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'addCommunity'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'addCommunity',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'addCommunity'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareStakeTogetherApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"createValidator"`.
 */
export function usePrepareStakeTogetherCreateValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'createValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'createValidator',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'createValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareStakeTogetherDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositBuffer"`.
 */
export function usePrepareStakeTogetherDepositBuffer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'depositBuffer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'depositBuffer',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'depositBuffer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareStakeTogetherIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareStakeTogetherPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareStakeTogetherPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"removeCommunity"`.
 */
export function usePrepareStakeTogetherRemoveCommunity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'removeCommunity'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'removeCommunity',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'removeCommunity'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareStakeTogetherRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setBeaconBalance"`.
 */
export function usePrepareStakeTogetherSetBeaconBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setBeaconBalance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setBeaconBalance',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setBeaconBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setCommunityFee"`.
 */
export function usePrepareStakeTogetherSetCommunityFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setCommunityFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setCommunityFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setCommunityFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setMinimumStakeAmount"`.
 */
export function usePrepareStakeTogetherSetMinimumStakeAmount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setMinimumStakeAmount'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setMinimumStakeAmount',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setMinimumStakeAmount'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setOperatorFee"`.
 */
export function usePrepareStakeTogetherSetOperatorFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setOperatorFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setOperatorFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setOperatorFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setOperatorFeeRecipient"`.
 */
export function usePrepareStakeTogetherSetOperatorFeeRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setOperatorFeeRecipient'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setOperatorFeeRecipient',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setOperatorFeeRecipient'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setStakeTogetherFee"`.
 */
export function usePrepareStakeTogetherSetStakeTogetherFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setStakeTogetherFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setStakeTogetherFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setStakeTogetherFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setStakeTogetherFeeRecipient"`.
 */
export function usePrepareStakeTogetherSetStakeTogetherFeeRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setStakeTogetherFeeRecipient'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setStakeTogetherFeeRecipient',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setStakeTogetherFeeRecipient'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"stake"`.
 */
export function usePrepareStakeTogetherStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'stake'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'stake',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'stake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareStakeTogetherTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareStakeTogetherTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareStakeTogetherTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferShares"`.
 */
export function usePrepareStakeTogetherTransferShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferSharesFrom"`.
 */
export function usePrepareStakeTogetherTransferSharesFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferSharesFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferSharesFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferSharesFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareStakeTogetherUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"unstake"`.
 */
export function usePrepareStakeTogetherUnstake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'unstake'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'unstake',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'unstake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawBuffer"`.
 */
export function usePrepareStakeTogetherWithdrawBuffer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawBuffer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'withdrawBuffer',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawBuffer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function useStakeTogetherEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: stakeTogetherABI, ...config } as UseContractEventConfig<
    typeof stakeTogetherABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Approval"`.
 */
export function useStakeTogetherApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"BufferDeposited"`.
 */
export function useStakeTogetherBufferDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'BufferDeposited'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'BufferDeposited',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'BufferDeposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"BufferWithdrawn"`.
 */
export function useStakeTogetherBufferWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'BufferWithdrawn'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'BufferWithdrawn',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'BufferWithdrawn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"BurnDelegatedShares"`.
 */
export function useStakeTogetherBurnDelegatedSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'BurnDelegatedShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'BurnDelegatedShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'BurnDelegatedShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"BurnShares"`.
 */
export function useStakeTogetherBurnSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'BurnShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'BurnShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'BurnShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"CommunityAdded"`.
 */
export function useStakeTogetherCommunityAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'CommunityAdded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'CommunityAdded',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'CommunityAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"CommunityRemoved"`.
 */
export function useStakeTogetherCommunityRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'CommunityRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'CommunityRemoved',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'CommunityRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useStakeTogetherEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintDelegatedShares"`.
 */
export function useStakeTogetherMintDelegatedSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'MintDelegatedShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintDelegatedShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintDelegatedShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintShares"`.
 */
export function useStakeTogetherMintSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'MintShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useStakeTogetherOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Paused"`.
 */
export function useStakeTogetherPausedEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Paused',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Referral"`.
 */
export function useStakeTogetherReferralEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'Referral'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Referral',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Referral'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Staked"`.
 */
export function useStakeTogetherStakedEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'Staked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Staked',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Staked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Transfer"`.
 */
export function useStakeTogetherTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"TransferShares"`.
 */
export function useStakeTogetherTransferSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'TransferShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'TransferShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'TransferShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useStakeTogetherUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Unpaused',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Unstaked"`.
 */
export function useStakeTogetherUnstakedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'Unstaked'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Unstaked',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Unstaked'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function useIDepositContract(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iDepositContractABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function useIDepositContractRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iDepositContractABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iDepositContractABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: iDepositContractABI, ...config } as UseContractReadConfig<
    typeof iDepositContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"get_deposit_count"`.
 */
export function useIDepositContractGetDepositCount<
  TSelectData = ReadContractResult<typeof iDepositContractABI, 'get_deposit_count'>
>(
  config: Omit<
    UseContractReadConfig<typeof iDepositContractABI, 'get_deposit_count', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iDepositContractABI,
    functionName: 'get_deposit_count',
    ...config
  } as UseContractReadConfig<typeof iDepositContractABI, 'get_deposit_count', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"get_deposit_root"`.
 */
export function useIDepositContractGetDepositRoot<
  TSelectData = ReadContractResult<typeof iDepositContractABI, 'get_deposit_root'>
>(
  config: Omit<
    UseContractReadConfig<typeof iDepositContractABI, 'get_deposit_root', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iDepositContractABI,
    functionName: 'get_deposit_root',
    ...config
  } as UseContractReadConfig<typeof iDepositContractABI, 'get_deposit_root', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function useIDepositContractWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iDepositContractABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iDepositContractABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof iDepositContractABI, TFunctionName>({
    abi: iDepositContractABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"deposit"`.
 */
export function useIDepositContractDeposit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iDepositContractABI, 'deposit'>['abi'],
        'deposit'
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<TMode, typeof iDepositContractABI, 'deposit'> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iDepositContractABI, 'deposit'>({
    abi: iDepositContractABI,
    functionName: 'deposit',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function usePrepareIDepositContractWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iDepositContractABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({ abi: iDepositContractABI, ...config } as UsePrepareContractWriteConfig<
    typeof iDepositContractABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareIDepositContractDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iDepositContractABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iDepositContractABI,
    functionName: 'deposit',
    ...config
  } as UsePrepareContractWriteConfig<typeof iDepositContractABI, 'deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function useIDepositContractEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iDepositContractABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iDepositContractABI, ...config } as UseContractEventConfig<
    typeof iDepositContractABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iDepositContractABI}__ and `eventName` set to `"DepositEvent"`.
 */
export function useIDepositContractDepositEventEvent(
  config: Omit<
    UseContractEventConfig<typeof iDepositContractABI, 'DepositEvent'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iDepositContractABI,
    eventName: 'DepositEvent',
    ...config
  } as UseContractEventConfig<typeof iDepositContractABI, 'DepositEvent'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link issvNetworkCoreABI}__.
 */
export function useIssvNetworkCore(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: issvNetworkCoreABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link issvNetworkABI}__.
 */
export function useIssvNetwork(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: issvNetworkABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__.
 */
export function useIssvNetworkWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, TFunctionName>({
    abi: issvNetworkABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"cancelDeclaredOperatorFee"`.
 */
export function useIssvNetworkCancelDeclaredOperatorFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'cancelDeclaredOperatorFee'>['abi'],
        'cancelDeclaredOperatorFee'
      > & { functionName?: 'cancelDeclaredOperatorFee' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'cancelDeclaredOperatorFee'> & {
        abi?: never
        functionName?: 'cancelDeclaredOperatorFee'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'cancelDeclaredOperatorFee'>({
    abi: issvNetworkABI,
    functionName: 'cancelDeclaredOperatorFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"declareOperatorFee"`.
 */
export function useIssvNetworkDeclareOperatorFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'declareOperatorFee'>['abi'],
        'declareOperatorFee'
      > & { functionName?: 'declareOperatorFee' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'declareOperatorFee'> & {
        abi?: never
        functionName?: 'declareOperatorFee'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'declareOperatorFee'>({
    abi: issvNetworkABI,
    functionName: 'declareOperatorFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"deposit"`.
 */
export function useIssvNetworkDeposit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'deposit'>['abi'],
        'deposit'
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'deposit'> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'deposit'>({
    abi: issvNetworkABI,
    functionName: 'deposit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"executeOperatorFee"`.
 */
export function useIssvNetworkExecuteOperatorFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'executeOperatorFee'>['abi'],
        'executeOperatorFee'
      > & { functionName?: 'executeOperatorFee' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'executeOperatorFee'> & {
        abi?: never
        functionName?: 'executeOperatorFee'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'executeOperatorFee'>({
    abi: issvNetworkABI,
    functionName: 'executeOperatorFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"initialize"`.
 */
export function useIssvNetworkInitialize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'initialize'>['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'initialize'> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'initialize'>({
    abi: issvNetworkABI,
    functionName: 'initialize',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"liquidate"`.
 */
export function useIssvNetworkLiquidate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'liquidate'>['abi'],
        'liquidate'
      > & { functionName?: 'liquidate' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'liquidate'> & {
        abi?: never
        functionName?: 'liquidate'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'liquidate'>({
    abi: issvNetworkABI,
    functionName: 'liquidate',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"reactivate"`.
 */
export function useIssvNetworkReactivate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'reactivate'>['abi'],
        'reactivate'
      > & { functionName?: 'reactivate' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'reactivate'> & {
        abi?: never
        functionName?: 'reactivate'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'reactivate'>({
    abi: issvNetworkABI,
    functionName: 'reactivate',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"reduceOperatorFee"`.
 */
export function useIssvNetworkReduceOperatorFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'reduceOperatorFee'>['abi'],
        'reduceOperatorFee'
      > & { functionName?: 'reduceOperatorFee' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'reduceOperatorFee'> & {
        abi?: never
        functionName?: 'reduceOperatorFee'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'reduceOperatorFee'>({
    abi: issvNetworkABI,
    functionName: 'reduceOperatorFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"registerOperator"`.
 */
export function useIssvNetworkRegisterOperator<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'registerOperator'>['abi'],
        'registerOperator'
      > & { functionName?: 'registerOperator' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'registerOperator'> & {
        abi?: never
        functionName?: 'registerOperator'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'registerOperator'>({
    abi: issvNetworkABI,
    functionName: 'registerOperator',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"registerValidator"`.
 */
export function useIssvNetworkRegisterValidator<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'registerValidator'>['abi'],
        'registerValidator'
      > & { functionName?: 'registerValidator' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'registerValidator'> & {
        abi?: never
        functionName?: 'registerValidator'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'registerValidator'>({
    abi: issvNetworkABI,
    functionName: 'registerValidator',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"removeOperator"`.
 */
export function useIssvNetworkRemoveOperator<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'removeOperator'>['abi'],
        'removeOperator'
      > & { functionName?: 'removeOperator' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'removeOperator'> & {
        abi?: never
        functionName?: 'removeOperator'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'removeOperator'>({
    abi: issvNetworkABI,
    functionName: 'removeOperator',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"removeValidator"`.
 */
export function useIssvNetworkRemoveValidator<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'removeValidator'>['abi'],
        'removeValidator'
      > & { functionName?: 'removeValidator' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'removeValidator'> & {
        abi?: never
        functionName?: 'removeValidator'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'removeValidator'>({
    abi: issvNetworkABI,
    functionName: 'removeValidator',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"setFeeRecipientAddress"`.
 */
export function useIssvNetworkSetFeeRecipientAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'setFeeRecipientAddress'>['abi'],
        'setFeeRecipientAddress'
      > & { functionName?: 'setFeeRecipientAddress' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'setFeeRecipientAddress'> & {
        abi?: never
        functionName?: 'setFeeRecipientAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'setFeeRecipientAddress'>({
    abi: issvNetworkABI,
    functionName: 'setFeeRecipientAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"setOperatorWhitelist"`.
 */
export function useIssvNetworkSetOperatorWhitelist<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'setOperatorWhitelist'>['abi'],
        'setOperatorWhitelist'
      > & { functionName?: 'setOperatorWhitelist' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'setOperatorWhitelist'> & {
        abi?: never
        functionName?: 'setOperatorWhitelist'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'setOperatorWhitelist'>({
    abi: issvNetworkABI,
    functionName: 'setOperatorWhitelist',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"updateDeclareOperatorFeePeriod"`.
 */
export function useIssvNetworkUpdateDeclareOperatorFeePeriod<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'updateDeclareOperatorFeePeriod'>['abi'],
        'updateDeclareOperatorFeePeriod'
      > & { functionName?: 'updateDeclareOperatorFeePeriod' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'updateDeclareOperatorFeePeriod'> & {
        abi?: never
        functionName?: 'updateDeclareOperatorFeePeriod'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'updateDeclareOperatorFeePeriod'>({
    abi: issvNetworkABI,
    functionName: 'updateDeclareOperatorFeePeriod',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"updateExecuteOperatorFeePeriod"`.
 */
export function useIssvNetworkUpdateExecuteOperatorFeePeriod<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'updateExecuteOperatorFeePeriod'>['abi'],
        'updateExecuteOperatorFeePeriod'
      > & { functionName?: 'updateExecuteOperatorFeePeriod' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'updateExecuteOperatorFeePeriod'> & {
        abi?: never
        functionName?: 'updateExecuteOperatorFeePeriod'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'updateExecuteOperatorFeePeriod'>({
    abi: issvNetworkABI,
    functionName: 'updateExecuteOperatorFeePeriod',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"updateLiquidationThresholdPeriod"`.
 */
export function useIssvNetworkUpdateLiquidationThresholdPeriod<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'updateLiquidationThresholdPeriod'>['abi'],
        'updateLiquidationThresholdPeriod'
      > & { functionName?: 'updateLiquidationThresholdPeriod' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'updateLiquidationThresholdPeriod'> & {
        abi?: never
        functionName?: 'updateLiquidationThresholdPeriod'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'updateLiquidationThresholdPeriod'>({
    abi: issvNetworkABI,
    functionName: 'updateLiquidationThresholdPeriod',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"updateMinimumLiquidationCollateral"`.
 */
export function useIssvNetworkUpdateMinimumLiquidationCollateral<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'updateMinimumLiquidationCollateral'>['abi'],
        'updateMinimumLiquidationCollateral'
      > & { functionName?: 'updateMinimumLiquidationCollateral' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'updateMinimumLiquidationCollateral'> & {
        abi?: never
        functionName?: 'updateMinimumLiquidationCollateral'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'updateMinimumLiquidationCollateral'>({
    abi: issvNetworkABI,
    functionName: 'updateMinimumLiquidationCollateral',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"updateNetworkFee"`.
 */
export function useIssvNetworkUpdateNetworkFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'updateNetworkFee'>['abi'],
        'updateNetworkFee'
      > & { functionName?: 'updateNetworkFee' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'updateNetworkFee'> & {
        abi?: never
        functionName?: 'updateNetworkFee'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'updateNetworkFee'>({
    abi: issvNetworkABI,
    functionName: 'updateNetworkFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"updateOperatorFeeIncreaseLimit"`.
 */
export function useIssvNetworkUpdateOperatorFeeIncreaseLimit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'updateOperatorFeeIncreaseLimit'>['abi'],
        'updateOperatorFeeIncreaseLimit'
      > & { functionName?: 'updateOperatorFeeIncreaseLimit' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'updateOperatorFeeIncreaseLimit'> & {
        abi?: never
        functionName?: 'updateOperatorFeeIncreaseLimit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'updateOperatorFeeIncreaseLimit'>({
    abi: issvNetworkABI,
    functionName: 'updateOperatorFeeIncreaseLimit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"withdraw"`.
 */
export function useIssvNetworkWithdraw<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'withdraw'>['abi'],
        'withdraw'
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'withdraw'> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'withdraw'>({
    abi: issvNetworkABI,
    functionName: 'withdraw',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"withdrawNetworkEarnings"`.
 */
export function useIssvNetworkWithdrawNetworkEarnings<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'withdrawNetworkEarnings'>['abi'],
        'withdrawNetworkEarnings'
      > & { functionName?: 'withdrawNetworkEarnings' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'withdrawNetworkEarnings'> & {
        abi?: never
        functionName?: 'withdrawNetworkEarnings'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'withdrawNetworkEarnings'>({
    abi: issvNetworkABI,
    functionName: 'withdrawNetworkEarnings',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"withdrawOperatorEarnings"`.
 */
export function useIssvNetworkWithdrawOperatorEarnings<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof issvNetworkABI, 'withdrawOperatorEarnings'>['abi'],
        'withdrawOperatorEarnings'
      > & { functionName?: 'withdrawOperatorEarnings' }
    : UseContractWriteConfig<TMode, typeof issvNetworkABI, 'withdrawOperatorEarnings'> & {
        abi?: never
        functionName?: 'withdrawOperatorEarnings'
      } = {} as any
) {
  return useContractWrite<TMode, typeof issvNetworkABI, 'withdrawOperatorEarnings'>({
    abi: issvNetworkABI,
    functionName: 'withdrawOperatorEarnings',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__.
 */
export function usePrepareIssvNetworkWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof issvNetworkABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: issvNetworkABI, ...config } as UsePrepareContractWriteConfig<
    typeof issvNetworkABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"cancelDeclaredOperatorFee"`.
 */
export function usePrepareIssvNetworkCancelDeclaredOperatorFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'cancelDeclaredOperatorFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'cancelDeclaredOperatorFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'cancelDeclaredOperatorFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"declareOperatorFee"`.
 */
export function usePrepareIssvNetworkDeclareOperatorFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'declareOperatorFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'declareOperatorFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'declareOperatorFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareIssvNetworkDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'deposit',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"executeOperatorFee"`.
 */
export function usePrepareIssvNetworkExecuteOperatorFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'executeOperatorFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'executeOperatorFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'executeOperatorFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareIssvNetworkInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'initialize',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"liquidate"`.
 */
export function usePrepareIssvNetworkLiquidate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'liquidate'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'liquidate',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'liquidate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"reactivate"`.
 */
export function usePrepareIssvNetworkReactivate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'reactivate'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'reactivate',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'reactivate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"reduceOperatorFee"`.
 */
export function usePrepareIssvNetworkReduceOperatorFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'reduceOperatorFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'reduceOperatorFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'reduceOperatorFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"registerOperator"`.
 */
export function usePrepareIssvNetworkRegisterOperator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'registerOperator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'registerOperator',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'registerOperator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"registerValidator"`.
 */
export function usePrepareIssvNetworkRegisterValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'registerValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'registerValidator',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'registerValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"removeOperator"`.
 */
export function usePrepareIssvNetworkRemoveOperator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'removeOperator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'removeOperator',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'removeOperator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"removeValidator"`.
 */
export function usePrepareIssvNetworkRemoveValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'removeValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'removeValidator',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'removeValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"setFeeRecipientAddress"`.
 */
export function usePrepareIssvNetworkSetFeeRecipientAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'setFeeRecipientAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'setFeeRecipientAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'setFeeRecipientAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"setOperatorWhitelist"`.
 */
export function usePrepareIssvNetworkSetOperatorWhitelist(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'setOperatorWhitelist'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'setOperatorWhitelist',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'setOperatorWhitelist'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"updateDeclareOperatorFeePeriod"`.
 */
export function usePrepareIssvNetworkUpdateDeclareOperatorFeePeriod(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'updateDeclareOperatorFeePeriod'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'updateDeclareOperatorFeePeriod',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'updateDeclareOperatorFeePeriod'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"updateExecuteOperatorFeePeriod"`.
 */
export function usePrepareIssvNetworkUpdateExecuteOperatorFeePeriod(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'updateExecuteOperatorFeePeriod'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'updateExecuteOperatorFeePeriod',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'updateExecuteOperatorFeePeriod'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"updateLiquidationThresholdPeriod"`.
 */
export function usePrepareIssvNetworkUpdateLiquidationThresholdPeriod(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'updateLiquidationThresholdPeriod'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'updateLiquidationThresholdPeriod',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'updateLiquidationThresholdPeriod'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"updateMinimumLiquidationCollateral"`.
 */
export function usePrepareIssvNetworkUpdateMinimumLiquidationCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'updateMinimumLiquidationCollateral'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'updateMinimumLiquidationCollateral',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'updateMinimumLiquidationCollateral'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"updateNetworkFee"`.
 */
export function usePrepareIssvNetworkUpdateNetworkFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'updateNetworkFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'updateNetworkFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'updateNetworkFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"updateOperatorFeeIncreaseLimit"`.
 */
export function usePrepareIssvNetworkUpdateOperatorFeeIncreaseLimit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'updateOperatorFeeIncreaseLimit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'updateOperatorFeeIncreaseLimit',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'updateOperatorFeeIncreaseLimit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareIssvNetworkWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'withdraw',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'withdraw'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"withdrawNetworkEarnings"`.
 */
export function usePrepareIssvNetworkWithdrawNetworkEarnings(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'withdrawNetworkEarnings'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'withdrawNetworkEarnings',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'withdrawNetworkEarnings'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link issvNetworkABI}__ and `functionName` set to `"withdrawOperatorEarnings"`.
 */
export function usePrepareIssvNetworkWithdrawOperatorEarnings(
  config: Omit<
    UsePrepareContractWriteConfig<typeof issvNetworkABI, 'withdrawOperatorEarnings'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: issvNetworkABI,
    functionName: 'withdrawOperatorEarnings',
    ...config
  } as UsePrepareContractWriteConfig<typeof issvNetworkABI, 'withdrawOperatorEarnings'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__.
 */
export function useIssvNetworkEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof issvNetworkABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: issvNetworkABI, ...config } as UseContractEventConfig<
    typeof issvNetworkABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"ClusterDeposited"`.
 */
export function useIssvNetworkClusterDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'ClusterDeposited'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'ClusterDeposited',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'ClusterDeposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"ClusterLiquidated"`.
 */
export function useIssvNetworkClusterLiquidatedEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'ClusterLiquidated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'ClusterLiquidated',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'ClusterLiquidated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"ClusterReactivated"`.
 */
export function useIssvNetworkClusterReactivatedEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'ClusterReactivated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'ClusterReactivated',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'ClusterReactivated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"ClusterWithdrawn"`.
 */
export function useIssvNetworkClusterWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'ClusterWithdrawn'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'ClusterWithdrawn',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'ClusterWithdrawn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"DeclareOperatorFeePeriodUpdated"`.
 */
export function useIssvNetworkDeclareOperatorFeePeriodUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'DeclareOperatorFeePeriodUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'DeclareOperatorFeePeriodUpdated',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'DeclareOperatorFeePeriodUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"ExecuteOperatorFeePeriodUpdated"`.
 */
export function useIssvNetworkExecuteOperatorFeePeriodUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'ExecuteOperatorFeePeriodUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'ExecuteOperatorFeePeriodUpdated',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'ExecuteOperatorFeePeriodUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"FeeRecipientAddressUpdated"`.
 */
export function useIssvNetworkFeeRecipientAddressUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'FeeRecipientAddressUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'FeeRecipientAddressUpdated',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'FeeRecipientAddressUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"LiquidationThresholdPeriodUpdated"`.
 */
export function useIssvNetworkLiquidationThresholdPeriodUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'LiquidationThresholdPeriodUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'LiquidationThresholdPeriodUpdated',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'LiquidationThresholdPeriodUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"MinimumLiquidationCollateralUpdated"`.
 */
export function useIssvNetworkMinimumLiquidationCollateralUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'MinimumLiquidationCollateralUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'MinimumLiquidationCollateralUpdated',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'MinimumLiquidationCollateralUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"NetworkEarningsWithdrawn"`.
 */
export function useIssvNetworkNetworkEarningsWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'NetworkEarningsWithdrawn'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'NetworkEarningsWithdrawn',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'NetworkEarningsWithdrawn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"NetworkFeeUpdated"`.
 */
export function useIssvNetworkNetworkFeeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'NetworkFeeUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'NetworkFeeUpdated',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'NetworkFeeUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"OperatorAdded"`.
 */
export function useIssvNetworkOperatorAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'OperatorAdded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'OperatorAdded',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'OperatorAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"OperatorFeeCancellationDeclared"`.
 */
export function useIssvNetworkOperatorFeeCancellationDeclaredEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'OperatorFeeCancellationDeclared'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'OperatorFeeCancellationDeclared',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'OperatorFeeCancellationDeclared'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"OperatorFeeDeclared"`.
 */
export function useIssvNetworkOperatorFeeDeclaredEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'OperatorFeeDeclared'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'OperatorFeeDeclared',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'OperatorFeeDeclared'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"OperatorFeeExecuted"`.
 */
export function useIssvNetworkOperatorFeeExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'OperatorFeeExecuted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'OperatorFeeExecuted',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'OperatorFeeExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"OperatorFeeIncreaseLimitUpdated"`.
 */
export function useIssvNetworkOperatorFeeIncreaseLimitUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'OperatorFeeIncreaseLimitUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'OperatorFeeIncreaseLimitUpdated',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'OperatorFeeIncreaseLimitUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"OperatorRemoved"`.
 */
export function useIssvNetworkOperatorRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'OperatorRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'OperatorRemoved',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'OperatorRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"OperatorWhitelistUpdated"`.
 */
export function useIssvNetworkOperatorWhitelistUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'OperatorWhitelistUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'OperatorWhitelistUpdated',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'OperatorWhitelistUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"OperatorWithdrawn"`.
 */
export function useIssvNetworkOperatorWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'OperatorWithdrawn'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'OperatorWithdrawn',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'OperatorWithdrawn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"ValidatorAdded"`.
 */
export function useIssvNetworkValidatorAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'ValidatorAdded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'ValidatorAdded',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'ValidatorAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link issvNetworkABI}__ and `eventName` set to `"ValidatorRemoved"`.
 */
export function useIssvNetworkValidatorRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof issvNetworkABI, 'ValidatorRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: issvNetworkABI,
    eventName: 'ValidatorRemoved',
    ...config
  } as UseContractEventConfig<typeof issvNetworkABI, 'ValidatorRemoved'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc5267ABI}__.
 */
export function useIerc5267(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc5267ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5267ABI}__.
 */
export function useIerc5267Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc5267ABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof ierc5267ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ierc5267ABI, ...config } as UseContractReadConfig<
    typeof ierc5267ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5267ABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useIerc5267Eip712Domain<
  TSelectData = ReadContractResult<typeof ierc5267ABI, 'eip712Domain'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc5267ABI, 'eip712Domain', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc5267ABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof ierc5267ABI, 'eip712Domain', TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5267ABI}__.
 */
export function useIerc5267Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc5267ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc5267ABI, ...config } as UseContractEventConfig<
    typeof ierc5267ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5267ABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useIerc5267Eip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc5267ABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc5267ABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof ierc5267ABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ownableABI, ...config } as UseContractReadConfig<
    typeof ownableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<TSelectData = ReadContractResult<typeof ownableABI, 'owner'>>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: ownableABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof ownableABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ownableABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableABI, TFunctionName>({ abi: ownableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableABI, 'renounceOwnership'>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableABI, 'transferOwnership'>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ownableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ownableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ownableABI, ...config } as UseContractEventConfig<
    typeof ownableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: pausableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pausableABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof pausableABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: pausableABI, ...config } as UseContractReadConfig<
    typeof pausableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableABI}__ and `functionName` set to `"paused"`.
 */
export function usePausablePaused<TSelectData = ReadContractResult<typeof pausableABI, 'paused'>>(
  config: Omit<
    UseContractReadConfig<typeof pausableABI, 'paused', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: pausableABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof pausableABI,
    'paused',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof pausableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: pausableABI, ...config } as UseContractEventConfig<
    typeof pausableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__ and `eventName` set to `"Paused"`.
 */
export function usePausablePausedEvent(
  config: Omit<UseContractEventConfig<typeof pausableABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: pausableABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof pausableABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__ and `eventName` set to `"Unpaused"`.
 */
export function usePausableUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof pausableABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: pausableABI,
    eventName: 'Unpaused',
    ...config
  } as UseContractEventConfig<typeof pausableABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link shortStringsABI}__.
 */
export function useShortStrings(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: shortStringsABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<TSelectData = ReadContractResult<typeof erc20ABI, 'allowance'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<TSelectData = ReadContractResult<typeof erc20ABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<TSelectData = ReadContractResult<typeof erc20ABI, 'decimals'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<TSelectData = ReadContractResult<typeof erc20ABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<TSelectData = ReadContractResult<typeof erc20ABI, 'symbol'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<TSelectData = ReadContractResult<typeof erc20ABI, 'totalSupply'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({ abi: erc20ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'decreaseAllowance'>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'increaseAllowance'>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20ABI, ...config } as UseContractEventConfig<
    typeof erc20ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc20ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof erc20ABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<UseContractEventConfig<typeof erc20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc20ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof erc20ABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<TSelectData = ReadContractResult<typeof ierc20ABI, 'allowance'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof ierc20ABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<TSelectData = ReadContractResult<typeof ierc20ABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof ierc20ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<TSelectData = ReadContractResult<typeof ierc20ABI, 'totalSupply'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof ierc20ABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, TFunctionName>({ abi: ierc20ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'approve'>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transfer'>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transferFrom'>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc20ABI, ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc20ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc20ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link eip712ABI}__.
 */
export function useEip712(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: eip712ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eip712ABI}__.
 */
export function useEip712Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof eip712ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof eip712ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: eip712ABI, ...config } as UseContractReadConfig<
    typeof eip712ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eip712ABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useEip712Eip712Domain<TSelectData = ReadContractResult<typeof eip712ABI, 'eip712Domain'>>(
  config: Omit<
    UseContractReadConfig<typeof eip712ABI, 'eip712Domain', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: eip712ABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof eip712ABI, 'eip712Domain', TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712ABI}__.
 */
export function useEip712Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof eip712ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: eip712ABI, ...config } as UseContractEventConfig<
    typeof eip712ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712ABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useEip712Eip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof eip712ABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: eip712ABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof eip712ABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20Burnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20BurnableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: erc20BurnableABI, ...config } as UseContractReadConfig<
    typeof erc20BurnableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20BurnableAllowance<
  TSelectData = ReadContractResult<typeof erc20BurnableABI, 'allowance'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BurnableBalanceOf<
  TSelectData = ReadContractResult<typeof erc20BurnableABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20BurnableDecimals<
  TSelectData = ReadContractResult<typeof erc20BurnableABI, 'decimals'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20BurnableName<TSelectData = ReadContractResult<typeof erc20BurnableABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20BurnableSymbol<
  TSelectData = ReadContractResult<typeof erc20BurnableABI, 'symbol'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20BurnableTotalSupply<
  TSelectData = ReadContractResult<typeof erc20BurnableABI, 'totalSupply'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, TFunctionName>({
    abi: erc20BurnableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20BurnableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'approve'>({
    abi: erc20BurnableABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc20BurnableBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'burn'>({
    abi: erc20BurnableABI,
    functionName: 'burn',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useErc20BurnableBurnFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, 'burnFrom'>['abi'],
        'burnFrom'
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'burnFrom'> & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'burnFrom'>({
    abi: erc20BurnableABI,
    functionName: 'burnFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20BurnableDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'decreaseAllowance'>({
    abi: erc20BurnableABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20BurnableIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'increaseAllowance'>({
    abi: erc20BurnableABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20BurnableTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'transfer'>({
    abi: erc20BurnableABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20BurnableTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'transferFrom'>({
    abi: erc20BurnableABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function usePrepareErc20BurnableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20BurnableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20BurnableABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20BurnableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20BurnableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc20BurnableBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'burn',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareErc20BurnableBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burnFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'burnFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20BurnableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20BurnableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20BurnableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20BurnableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20BurnableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20BurnableABI, ...config } as UseContractEventConfig<
    typeof erc20BurnableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20BurnableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof erc20BurnableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20BurnableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof erc20BurnableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20Permit(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20PermitABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc20PermitABI, ...config } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitDomainSeparator<
  TSelectData = ReadContractResult<typeof ierc20PermitABI, 'DOMAIN_SEPARATOR'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, 'DOMAIN_SEPARATOR', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof ierc20PermitABI, 'DOMAIN_SEPARATOR', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitNonces<TSelectData = ReadContractResult<typeof ierc20PermitABI, 'nonces'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'nonces',
    ...config
  } as UseContractReadConfig<typeof ierc20PermitABI, 'nonces', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20PermitABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, TFunctionName>({
    abi: ierc20PermitABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20PermitABI, 'permit'>['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, 'permit'>({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function usePrepareIerc20PermitWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20PermitABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20PermitABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20Metadata(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20MetadataABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc20MetadataABI, ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'allowance'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'decimals'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'symbol'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'totalSupply'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, TFunctionName>({
    abi: ierc20MetadataABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'approve'>({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transfer'>({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transferFrom'>({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20MetadataABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20MetadataABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc20MetadataABI, ...config } as UseContractEventConfig<
    typeof ierc20MetadataABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20Permit(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20PermitABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: erc20PermitABI, ...config } as UseContractReadConfig<
    typeof erc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20PermitDomainSeparator<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'DOMAIN_SEPARATOR'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'DOMAIN_SEPARATOR', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, 'DOMAIN_SEPARATOR', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20PermitAllowance<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'allowance'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20PermitBalanceOf<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20PermitDecimals<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'decimals'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useErc20PermitEip712Domain<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'eip712Domain'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'eip712Domain', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, 'eip712Domain', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"name"`.
 */
export function useErc20PermitName<TSelectData = ReadContractResult<typeof erc20PermitABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20PermitNonces<TSelectData = ReadContractResult<typeof erc20PermitABI, 'nonces'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'nonces',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, 'nonces', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20PermitSymbol<TSelectData = ReadContractResult<typeof erc20PermitABI, 'symbol'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20PermitTotalSupply<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'totalSupply'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, TFunctionName>({
    abi: erc20PermitABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20PermitApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'approve'>({
    abi: erc20PermitABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20PermitDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'decreaseAllowance'>({
    abi: erc20PermitABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20PermitIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'increaseAllowance'>({
    abi: erc20PermitABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20PermitPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, 'permit'>['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'permit'>({
    abi: erc20PermitABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20PermitTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'transfer'>({
    abi: erc20PermitABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20PermitTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'transferFrom'>({
    abi: erc20PermitABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function usePrepareErc20PermitWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20PermitABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20PermitABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20PermitABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20PermitApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20PermitDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20PermitIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20PermitPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20PermitTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20PermitTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20PermitABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20PermitABI, ...config } as UseContractEventConfig<
    typeof erc20PermitABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20PermitApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc20PermitABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: erc20PermitABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof erc20PermitABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useErc20PermitEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20PermitABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof erc20PermitABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20PermitTransferEvent(
  config: Omit<UseContractEventConfig<typeof erc20PermitABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: erc20PermitABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof erc20PermitABI, 'Transfer'>)
}
