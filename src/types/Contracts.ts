// Generated by @wagmi/cli@0.1.15 on 6/6/2023 at 1:27:37 AM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SETH
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const sethABI = [
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'AddPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: false },
      { name: 'balance', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Bootstrap'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'delegated', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnDelegatedShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnShares'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'delegated', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintDelegatedShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintOperatorRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintPoolRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintStakeTogetherRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'OwnershipTransferred'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'preClBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'posClBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'rewards', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'growthFactor', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'stakeTogetherFee', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'operatorFee', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'poolFee', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'stakeTogetherFeeShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'operatorFeeShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'poolFeeShares', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ProcessRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'RemovePool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetOperatorFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetOperatorFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetPoolFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetPoolModuleAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetStakeTogetherFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetStakeTogetherFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetValidatorModuleAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'delegated', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferDelegatedShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'fromDelegated', internalType: 'address', type: 'address', indexed: true },
      { name: 'toDelegated', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferPoolDelegatedShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'addPool',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'basisPoints',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'beaconBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'delegatedSharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_delegate', internalType: 'address', type: 'address' }
    ],
    name: 'delegationSharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPools',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_ethAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'getSharesByPooledEth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxDelegations',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorFeeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poolFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poolModuleAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'pooledEthByShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'removePool',
    outputs: []
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_beaconBalance', internalType: 'uint256', type: 'uint256' }],
    name: 'setBeaconBalance',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setOperatorFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setOperatorFeeAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setPoolFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setPoolModuleAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setStakeTogetherFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setStakeTogetherFeeAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_transientBalance', internalType: 'uint256', type: 'uint256' }],
    name: 'setTransientBalance',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setValidatorModuleAddress',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'sharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogetherFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogetherFeeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalDelegatedShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalPooledEther',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_fromDelegated', internalType: 'address', type: 'address' },
      { name: '_toDelegated', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferPoolDelegatedShares',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferSharesFrom',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'transientBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'validatorModuleAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StakeTogether
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stakeTogetherABI = [
  {
    stateMutability: 'payable',
    type: 'constructor',
    inputs: [
      { name: '_stOracle', internalType: 'address', type: 'address' },
      { name: '_depositContract', internalType: 'address', type: 'address' }
    ]
  },
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'AddPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: false },
      { name: 'balance', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Bootstrap'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'delegated', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnDelegatedShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'creator', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'publicKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'withdrawalCredentials', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'signature', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'depositDataRoot', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'CreateValidator'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'DepositLiquidityBuffer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'delegated', internalType: 'address', type: 'address', indexed: false },
      { name: 'referral', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'DepositPool'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'EtherReceived'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'delegated', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintDelegatedShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintOperatorRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintPoolRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintStakeTogetherRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'OwnershipTransferred'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'preClBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'posClBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'rewards', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'growthFactor', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'stakeTogetherFee', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'operatorFee', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'poolFee', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'stakeTogetherFeeShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'operatorFeeShares', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'poolFeeShares', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ProcessRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'RemovePool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetBeaconBalance'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetMinDepositPoolAmount'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetOperatorFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetOperatorFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetPoolFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetPoolModuleAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetPoolSize'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetStakeTogetherFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetStakeTogetherFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetTransientBalance'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'to', internalType: 'address', type: 'address', indexed: true }],
    name: 'SetValidatorModuleAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'withdrawalCredentials', internalType: 'bytes', type: 'bytes', indexed: false }],
    name: 'SetWithdrawalCredentials'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'delegated', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferDelegatedShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'fromDelegated', internalType: 'address', type: 'address', indexed: true },
      { name: 'toDelegated', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferPoolDelegatedShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'WithdrawLiquidityBuffer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'delegated', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'WithdrawPool'
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'addPool',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'basisPoints',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'beaconBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_publicKey', internalType: 'bytes', type: 'bytes' },
      { name: '_signature', internalType: 'bytes', type: 'bytes' },
      { name: '_depositDataRoot', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'createValidator',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'delegatedSharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_delegate', internalType: 'address', type: 'address' }
    ],
    name: 'delegationSharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'depositContract',
    outputs: [{ name: '', internalType: 'contract IDepositContract', type: 'address' }]
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'depositLiquidityBuffer',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_delegated', internalType: 'address', type: 'address' },
      { name: '_referral', internalType: 'address', type: 'address' }
    ],
    name: 'depositPool',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPools',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_ethAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'getSharesByPooledEth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getValidators',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'publicKey', internalType: 'bytes', type: 'bytes' }],
    name: 'isValidator',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidityBufferBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxDelegations',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minDepositAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorFeeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poolBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poolFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poolModuleAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poolSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'pooledEthByShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'removePool',
    outputs: []
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_beaconBalance', internalType: 'uint256', type: 'uint256' }],
    name: 'setBeaconBalance',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinDepositPoolAmount',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setOperatorFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setOperatorFeeAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setPoolFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setPoolModuleAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setPoolSize',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setStakeTogetherFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setStakeTogetherFeeAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_transientBalance', internalType: 'uint256', type: 'uint256' }],
    name: 'setTransientBalance',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'setValidatorModuleAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_withdrawalCredentials', internalType: 'bytes', type: 'bytes' }],
    name: 'setWithdrawalCredentials',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'sharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stOracle',
    outputs: [{ name: '', internalType: 'contract STOracle', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogetherFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogetherFeeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalDelegatedShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalEtherSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalPooledEther',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalValidators',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_fromDelegated', internalType: 'address', type: 'address' },
      { name: '_toDelegated', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferPoolDelegatedShares',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferSharesFrom',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'transientBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'validatorModuleAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdrawLiquidityBuffer',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_delegated', internalType: 'address', type: 'address' }
    ],
    name: 'withdrawPool',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawalCredentials',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawalsBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'payable', type: 'receive' }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// STOracle
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stOracleABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'node', internalType: 'address', type: 'address', indexed: false }],
    name: 'AddNode'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'node', internalType: 'address', type: 'address', indexed: false }],
    name: 'BlacklistNode'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'transientBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'beaconBalance', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ConsensusApproved'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true }],
    name: 'ConsensusFail'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'node', internalType: 'address', type: 'address', indexed: true },
      { name: 'reportedBlock', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reportedBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'beaconBalance', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'NonConsensusValueReported'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'OwnershipTransferred'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'node', internalType: 'address', type: 'address', indexed: false }],
    name: 'RemoveNode'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true }],
    name: 'ReportQuorumNotAchieved'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newFrequency', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetReportMaxFrequency'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newQuorum', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetReportQuorum'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'address', type: 'address' }],
    name: 'addNode',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'beaconBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'getNodeReportByBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'node', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'getNodeReports',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNodes',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInConsensus',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'address', type: 'address' }],
    name: 'isNode',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'address', type: 'address' }],
    name: 'isNodeBlacklisted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'node', internalType: 'address', type: 'address' }],
    name: 'removeNode',
    outputs: []
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_reportBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: '_report',
        internalType: 'struct STOracle.Report',
        type: 'tuple',
        components: [
          { name: 'beaconBalance', internalType: 'uint256', type: 'uint256' },
          { name: 'transientBalance', internalType: 'uint256', type: 'uint256' },
          { name: 'totalBeaconValidators', internalType: 'uint256', type: 'uint256' },
          { name: 'totalTransientValidators', internalType: 'uint256', type: 'uint256' },
          { name: 'totalExitedValidators', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ],
    name: 'report',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reportFrequency',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reportLastBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reportNextBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reportQuorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newFrequency', internalType: 'uint256', type: 'uint256' }],
    name: 'setReportMaxFrequency',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newQuorum', internalType: 'uint256', type: 'uint256' }],
    name: 'setReportQuorum',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_stakeTogether', internalType: 'address', type: 'address' }],
    name: 'setStakeTogether',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogether',
    outputs: [{ name: '', internalType: 'contract StakeTogether', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'transientBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDepositContract
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iDepositContractABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'pubkey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'withdrawal_credentials', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'amount', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'signature', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'index', internalType: 'bytes', type: 'bytes', indexed: false }
    ],
    name: 'DepositEvent'
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'pubkey', internalType: 'bytes', type: 'bytes' },
      { name: 'withdrawal_credentials', internalType: 'bytes', type: 'bytes' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
      { name: 'deposit_data_root', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'deposit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'get_deposit_count',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'get_deposit_root',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'OwnershipTransferred'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC5267
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc5267ABI = [
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pausable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pausableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ShortStrings
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const shortStringsABI = [
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' }
    ]
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EIP712
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eip712ABI = [
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Burnable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20BurnableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'burnFrom',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20PermitABI = [
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  {
    type: 'error',
    inputs: [{ name: 'str', internalType: 'string', type: 'string' }],
    name: 'StringTooLong'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link sethABI}__.
 */
export function useSeth(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: sethABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__.
 */
export function useSethRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof sethABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof sethABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: sethABI, ...config } as UseContractReadConfig<
    typeof sethABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useSethDomainSeparator<
  TSelectData = ReadContractResult<typeof sethABI, 'DOMAIN_SEPARATOR'>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'DOMAIN_SEPARATOR', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'DOMAIN_SEPARATOR', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"allowance"`.
 */
export function useSethAllowance<TSelectData = ReadContractResult<typeof sethABI, 'allowance'>>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof sethABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useSethBalanceOf<TSelectData = ReadContractResult<typeof sethABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof sethABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"basisPoints"`.
 */
export function useSethBasisPoints<TSelectData = ReadContractResult<typeof sethABI, 'basisPoints'>>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'basisPoints', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'basisPoints',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'basisPoints', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"beaconBalance"`.
 */
export function useSethBeaconBalance<TSelectData = ReadContractResult<typeof sethABI, 'beaconBalance'>>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'beaconBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'beaconBalance',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'beaconBalance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"contractBalance"`.
 */
export function useSethContractBalance<
  TSelectData = ReadContractResult<typeof sethABI, 'contractBalance'>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'contractBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'contractBalance',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'contractBalance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"decimals"`.
 */
export function useSethDecimals<TSelectData = ReadContractResult<typeof sethABI, 'decimals'>>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof sethABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"delegatedSharesOf"`.
 */
export function useSethDelegatedSharesOf<
  TSelectData = ReadContractResult<typeof sethABI, 'delegatedSharesOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'delegatedSharesOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'delegatedSharesOf',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'delegatedSharesOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"delegationSharesOf"`.
 */
export function useSethDelegationSharesOf<
  TSelectData = ReadContractResult<typeof sethABI, 'delegationSharesOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'delegationSharesOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'delegationSharesOf',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'delegationSharesOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useSethEip712Domain<TSelectData = ReadContractResult<typeof sethABI, 'eip712Domain'>>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'eip712Domain', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'eip712Domain', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"getPools"`.
 */
export function useSethGetPools<TSelectData = ReadContractResult<typeof sethABI, 'getPools'>>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'getPools', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'getPools', ...config } as UseContractReadConfig<
    typeof sethABI,
    'getPools',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"getSharesByPooledEth"`.
 */
export function useSethGetSharesByPooledEth<
  TSelectData = ReadContractResult<typeof sethABI, 'getSharesByPooledEth'>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'getSharesByPooledEth', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'getSharesByPooledEth',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'getSharesByPooledEth', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"maxDelegations"`.
 */
export function useSethMaxDelegations<TSelectData = ReadContractResult<typeof sethABI, 'maxDelegations'>>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'maxDelegations', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'maxDelegations',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'maxDelegations', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"name"`.
 */
export function useSethName<TSelectData = ReadContractResult<typeof sethABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof sethABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"nonces"`.
 */
export function useSethNonces<TSelectData = ReadContractResult<typeof sethABI, 'nonces'>>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'nonces', ...config } as UseContractReadConfig<
    typeof sethABI,
    'nonces',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"operatorFee"`.
 */
export function useSethOperatorFee<TSelectData = ReadContractResult<typeof sethABI, 'operatorFee'>>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'operatorFee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'operatorFee',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'operatorFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"operatorFeeAddress"`.
 */
export function useSethOperatorFeeAddress<
  TSelectData = ReadContractResult<typeof sethABI, 'operatorFeeAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'operatorFeeAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'operatorFeeAddress',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'operatorFeeAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"owner"`.
 */
export function useSethOwner<TSelectData = ReadContractResult<typeof sethABI, 'owner'>>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof sethABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"paused"`.
 */
export function useSethPaused<TSelectData = ReadContractResult<typeof sethABI, 'paused'>>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'paused', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof sethABI,
    'paused',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"poolFee"`.
 */
export function useSethPoolFee<TSelectData = ReadContractResult<typeof sethABI, 'poolFee'>>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'poolFee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'poolFee', ...config } as UseContractReadConfig<
    typeof sethABI,
    'poolFee',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"poolModuleAddress"`.
 */
export function useSethPoolModuleAddress<
  TSelectData = ReadContractResult<typeof sethABI, 'poolModuleAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'poolModuleAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'poolModuleAddress',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'poolModuleAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"pooledEthByShares"`.
 */
export function useSethPooledEthByShares<
  TSelectData = ReadContractResult<typeof sethABI, 'pooledEthByShares'>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'pooledEthByShares', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'pooledEthByShares',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'pooledEthByShares', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"sharesOf"`.
 */
export function useSethSharesOf<TSelectData = ReadContractResult<typeof sethABI, 'sharesOf'>>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'sharesOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'sharesOf', ...config } as UseContractReadConfig<
    typeof sethABI,
    'sharesOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"stakeTogetherFee"`.
 */
export function useSethStakeTogetherFee<
  TSelectData = ReadContractResult<typeof sethABI, 'stakeTogetherFee'>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'stakeTogetherFee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'stakeTogetherFee',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'stakeTogetherFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"stakeTogetherFeeAddress"`.
 */
export function useSethStakeTogetherFeeAddress<
  TSelectData = ReadContractResult<typeof sethABI, 'stakeTogetherFeeAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'stakeTogetherFeeAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'stakeTogetherFeeAddress',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'stakeTogetherFeeAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"symbol"`.
 */
export function useSethSymbol<TSelectData = ReadContractResult<typeof sethABI, 'symbol'>>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sethABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof sethABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"totalDelegatedShares"`.
 */
export function useSethTotalDelegatedShares<
  TSelectData = ReadContractResult<typeof sethABI, 'totalDelegatedShares'>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'totalDelegatedShares', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'totalDelegatedShares',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'totalDelegatedShares', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"totalPooledEther"`.
 */
export function useSethTotalPooledEther<
  TSelectData = ReadContractResult<typeof sethABI, 'totalPooledEther'>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'totalPooledEther', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'totalPooledEther',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'totalPooledEther', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"totalShares"`.
 */
export function useSethTotalShares<TSelectData = ReadContractResult<typeof sethABI, 'totalShares'>>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'totalShares', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'totalShares',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'totalShares', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useSethTotalSupply<TSelectData = ReadContractResult<typeof sethABI, 'totalSupply'>>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transientBalance"`.
 */
export function useSethTransientBalance<
  TSelectData = ReadContractResult<typeof sethABI, 'transientBalance'>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'transientBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'transientBalance',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'transientBalance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"validatorModuleAddress"`.
 */
export function useSethValidatorModuleAddress<
  TSelectData = ReadContractResult<typeof sethABI, 'validatorModuleAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof sethABI, 'validatorModuleAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sethABI,
    functionName: 'validatorModuleAddress',
    ...config
  } as UseContractReadConfig<typeof sethABI, 'validatorModuleAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__.
 */
export function useSethWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof sethABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, TFunctionName>({ abi: sethABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"addPool"`.
 */
export function useSethAddPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'addPool'>['abi'],
        'addPool'
      > & { functionName?: 'addPool' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'addPool'> & {
        abi?: never
        functionName?: 'addPool'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'addPool'>({
    abi: sethABI,
    functionName: 'addPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"approve"`.
 */
export function useSethApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'approve'>({
    abi: sethABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useSethDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'decreaseAllowance'>({
    abi: sethABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useSethIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'increaseAllowance'>({
    abi: sethABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"pause"`.
 */
export function useSethPause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'pause'>['abi'],
        'pause'
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'pause'> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'pause'>({
    abi: sethABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"permit"`.
 */
export function useSethPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'permit'>['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'permit'>({
    abi: sethABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"removePool"`.
 */
export function useSethRemovePool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'removePool'>['abi'],
        'removePool'
      > & { functionName?: 'removePool' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'removePool'> & {
        abi?: never
        functionName?: 'removePool'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'removePool'>({
    abi: sethABI,
    functionName: 'removePool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useSethRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'renounceOwnership'>({
    abi: sethABI,
    functionName: 'renounceOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setBeaconBalance"`.
 */
export function useSethSetBeaconBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'setBeaconBalance'>['abi'],
        'setBeaconBalance'
      > & { functionName?: 'setBeaconBalance' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'setBeaconBalance'> & {
        abi?: never
        functionName?: 'setBeaconBalance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'setBeaconBalance'>({
    abi: sethABI,
    functionName: 'setBeaconBalance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setOperatorFee"`.
 */
export function useSethSetOperatorFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'setOperatorFee'>['abi'],
        'setOperatorFee'
      > & { functionName?: 'setOperatorFee' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'setOperatorFee'> & {
        abi?: never
        functionName?: 'setOperatorFee'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'setOperatorFee'>({
    abi: sethABI,
    functionName: 'setOperatorFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setOperatorFeeAddress"`.
 */
export function useSethSetOperatorFeeAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'setOperatorFeeAddress'>['abi'],
        'setOperatorFeeAddress'
      > & { functionName?: 'setOperatorFeeAddress' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'setOperatorFeeAddress'> & {
        abi?: never
        functionName?: 'setOperatorFeeAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'setOperatorFeeAddress'>({
    abi: sethABI,
    functionName: 'setOperatorFeeAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setPoolFee"`.
 */
export function useSethSetPoolFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'setPoolFee'>['abi'],
        'setPoolFee'
      > & { functionName?: 'setPoolFee' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'setPoolFee'> & {
        abi?: never
        functionName?: 'setPoolFee'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'setPoolFee'>({
    abi: sethABI,
    functionName: 'setPoolFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setPoolModuleAddress"`.
 */
export function useSethSetPoolModuleAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'setPoolModuleAddress'>['abi'],
        'setPoolModuleAddress'
      > & { functionName?: 'setPoolModuleAddress' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'setPoolModuleAddress'> & {
        abi?: never
        functionName?: 'setPoolModuleAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'setPoolModuleAddress'>({
    abi: sethABI,
    functionName: 'setPoolModuleAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setStakeTogetherFee"`.
 */
export function useSethSetStakeTogetherFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'setStakeTogetherFee'>['abi'],
        'setStakeTogetherFee'
      > & { functionName?: 'setStakeTogetherFee' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'setStakeTogetherFee'> & {
        abi?: never
        functionName?: 'setStakeTogetherFee'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'setStakeTogetherFee'>({
    abi: sethABI,
    functionName: 'setStakeTogetherFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setStakeTogetherFeeAddress"`.
 */
export function useSethSetStakeTogetherFeeAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'setStakeTogetherFeeAddress'>['abi'],
        'setStakeTogetherFeeAddress'
      > & { functionName?: 'setStakeTogetherFeeAddress' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'setStakeTogetherFeeAddress'> & {
        abi?: never
        functionName?: 'setStakeTogetherFeeAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'setStakeTogetherFeeAddress'>({
    abi: sethABI,
    functionName: 'setStakeTogetherFeeAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setTransientBalance"`.
 */
export function useSethSetTransientBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'setTransientBalance'>['abi'],
        'setTransientBalance'
      > & { functionName?: 'setTransientBalance' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'setTransientBalance'> & {
        abi?: never
        functionName?: 'setTransientBalance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'setTransientBalance'>({
    abi: sethABI,
    functionName: 'setTransientBalance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setValidatorModuleAddress"`.
 */
export function useSethSetValidatorModuleAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'setValidatorModuleAddress'>['abi'],
        'setValidatorModuleAddress'
      > & { functionName?: 'setValidatorModuleAddress' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'setValidatorModuleAddress'> & {
        abi?: never
        functionName?: 'setValidatorModuleAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'setValidatorModuleAddress'>({
    abi: sethABI,
    functionName: 'setValidatorModuleAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transfer"`.
 */
export function useSethTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'transfer'>({
    abi: sethABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useSethTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'transferFrom'>({
    abi: sethABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useSethTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'transferOwnership'>({
    abi: sethABI,
    functionName: 'transferOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferPoolDelegatedShares"`.
 */
export function useSethTransferPoolDelegatedShares<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'transferPoolDelegatedShares'>['abi'],
        'transferPoolDelegatedShares'
      > & { functionName?: 'transferPoolDelegatedShares' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'transferPoolDelegatedShares'> & {
        abi?: never
        functionName?: 'transferPoolDelegatedShares'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'transferPoolDelegatedShares'>({
    abi: sethABI,
    functionName: 'transferPoolDelegatedShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferShares"`.
 */
export function useSethTransferShares<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'transferShares'>['abi'],
        'transferShares'
      > & { functionName?: 'transferShares' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'transferShares'> & {
        abi?: never
        functionName?: 'transferShares'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'transferShares'>({
    abi: sethABI,
    functionName: 'transferShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferSharesFrom"`.
 */
export function useSethTransferSharesFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'transferSharesFrom'>['abi'],
        'transferSharesFrom'
      > & { functionName?: 'transferSharesFrom' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'transferSharesFrom'> & {
        abi?: never
        functionName?: 'transferSharesFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'transferSharesFrom'>({
    abi: sethABI,
    functionName: 'transferSharesFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"unpause"`.
 */
export function useSethUnpause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethABI, 'unpause'>['abi'],
        'unpause'
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<TMode, typeof sethABI, 'unpause'> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<TMode, typeof sethABI, 'unpause'>({
    abi: sethABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__.
 */
export function usePrepareSethWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof sethABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: sethABI, ...config } as UsePrepareContractWriteConfig<
    typeof sethABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"addPool"`.
 */
export function usePrepareSethAddPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'addPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'addPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'addPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareSethApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareSethDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareSethIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareSethPause(
  config: Omit<UsePrepareContractWriteConfig<typeof sethABI, 'pause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareSethPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"removePool"`.
 */
export function usePrepareSethRemovePool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'removePool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'removePool',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'removePool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareSethRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setBeaconBalance"`.
 */
export function usePrepareSethSetBeaconBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setBeaconBalance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setBeaconBalance',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setBeaconBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setOperatorFee"`.
 */
export function usePrepareSethSetOperatorFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setOperatorFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setOperatorFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setOperatorFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setOperatorFeeAddress"`.
 */
export function usePrepareSethSetOperatorFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setOperatorFeeAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setOperatorFeeAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setOperatorFeeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setPoolFee"`.
 */
export function usePrepareSethSetPoolFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setPoolFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setPoolFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setPoolFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setPoolModuleAddress"`.
 */
export function usePrepareSethSetPoolModuleAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setPoolModuleAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setPoolModuleAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setPoolModuleAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setStakeTogetherFee"`.
 */
export function usePrepareSethSetStakeTogetherFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setStakeTogetherFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setStakeTogetherFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setStakeTogetherFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setStakeTogetherFeeAddress"`.
 */
export function usePrepareSethSetStakeTogetherFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setStakeTogetherFeeAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setStakeTogetherFeeAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setStakeTogetherFeeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setTransientBalance"`.
 */
export function usePrepareSethSetTransientBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setTransientBalance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setTransientBalance',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setTransientBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"setValidatorModuleAddress"`.
 */
export function usePrepareSethSetValidatorModuleAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'setValidatorModuleAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'setValidatorModuleAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'setValidatorModuleAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareSethTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareSethTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareSethTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferPoolDelegatedShares"`.
 */
export function usePrepareSethTransferPoolDelegatedShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'transferPoolDelegatedShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'transferPoolDelegatedShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'transferPoolDelegatedShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferShares"`.
 */
export function usePrepareSethTransferShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'transferShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'transferShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'transferShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"transferSharesFrom"`.
 */
export function usePrepareSethTransferSharesFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'transferSharesFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'transferSharesFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'transferSharesFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareSethUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sethABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof sethABI, 'unpause'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__.
 */
export function useSethEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof sethABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: sethABI, ...config } as UseContractEventConfig<
    typeof sethABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"AddPool"`.
 */
export function useSethAddPoolEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'AddPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'AddPool', ...config } as UseContractEventConfig<
    typeof sethABI,
    'AddPool'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"Approval"`.
 */
export function useSethApprovalEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof sethABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"Bootstrap"`.
 */
export function useSethBootstrapEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'Bootstrap'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'Bootstrap', ...config } as UseContractEventConfig<
    typeof sethABI,
    'Bootstrap'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"BurnDelegatedShares"`.
 */
export function useSethBurnDelegatedSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'BurnDelegatedShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'BurnDelegatedShares',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'BurnDelegatedShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"BurnShares"`.
 */
export function useSethBurnSharesEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'BurnShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'BurnShares', ...config } as UseContractEventConfig<
    typeof sethABI,
    'BurnShares'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useSethEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"MintDelegatedShares"`.
 */
export function useSethMintDelegatedSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'MintDelegatedShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'MintDelegatedShares',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'MintDelegatedShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"MintOperatorRewards"`.
 */
export function useSethMintOperatorRewardsEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'MintOperatorRewards'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'MintOperatorRewards',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'MintOperatorRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"MintPoolRewards"`.
 */
export function useSethMintPoolRewardsEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'MintPoolRewards'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'MintPoolRewards',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'MintPoolRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"MintShares"`.
 */
export function useSethMintSharesEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'MintShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'MintShares', ...config } as UseContractEventConfig<
    typeof sethABI,
    'MintShares'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"MintStakeTogetherRewards"`.
 */
export function useSethMintStakeTogetherRewardsEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'MintStakeTogetherRewards'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'MintStakeTogetherRewards',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'MintStakeTogetherRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useSethOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"Paused"`.
 */
export function useSethPausedEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof sethABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"ProcessRewards"`.
 */
export function useSethProcessRewardsEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'ProcessRewards'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'ProcessRewards',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'ProcessRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"RemovePool"`.
 */
export function useSethRemovePoolEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'RemovePool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'RemovePool', ...config } as UseContractEventConfig<
    typeof sethABI,
    'RemovePool'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetOperatorFee"`.
 */
export function useSethSetOperatorFeeEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'SetOperatorFee'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'SetOperatorFee',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'SetOperatorFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetOperatorFeeAddress"`.
 */
export function useSethSetOperatorFeeAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'SetOperatorFeeAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'SetOperatorFeeAddress',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'SetOperatorFeeAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetPoolFee"`.
 */
export function useSethSetPoolFeeEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'SetPoolFee'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'SetPoolFee', ...config } as UseContractEventConfig<
    typeof sethABI,
    'SetPoolFee'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetPoolModuleAddress"`.
 */
export function useSethSetPoolModuleAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'SetPoolModuleAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'SetPoolModuleAddress',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'SetPoolModuleAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetStakeTogetherFee"`.
 */
export function useSethSetStakeTogetherFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'SetStakeTogetherFee'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'SetStakeTogetherFee',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'SetStakeTogetherFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetStakeTogetherFeeAddress"`.
 */
export function useSethSetStakeTogetherFeeAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'SetStakeTogetherFeeAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'SetStakeTogetherFeeAddress',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'SetStakeTogetherFeeAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"SetValidatorModuleAddress"`.
 */
export function useSethSetValidatorModuleAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'SetValidatorModuleAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'SetValidatorModuleAddress',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'SetValidatorModuleAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"Transfer"`.
 */
export function useSethTransferEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof sethABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"TransferDelegatedShares"`.
 */
export function useSethTransferDelegatedSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'TransferDelegatedShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'TransferDelegatedShares',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'TransferDelegatedShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"TransferPoolDelegatedShares"`.
 */
export function useSethTransferPoolDelegatedSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof sethABI, 'TransferPoolDelegatedShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'TransferPoolDelegatedShares',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'TransferPoolDelegatedShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"TransferShares"`.
 */
export function useSethTransferSharesEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'TransferShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sethABI,
    eventName: 'TransferShares',
    ...config
  } as UseContractEventConfig<typeof sethABI, 'TransferShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useSethUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof sethABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sethABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof sethABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function useStakeTogether(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: stakeTogetherABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function useStakeTogetherRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useStakeTogetherDomainSeparator<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'DOMAIN_SEPARATOR'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'DOMAIN_SEPARATOR', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'DOMAIN_SEPARATOR', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"allowance"`.
 */
export function useStakeTogetherAllowance<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'allowance'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useStakeTogetherBalanceOf<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"basisPoints"`.
 */
export function useStakeTogetherBasisPoints<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'basisPoints'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'basisPoints', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'basisPoints',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'basisPoints', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"beaconBalance"`.
 */
export function useStakeTogetherBeaconBalance<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'beaconBalance'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'beaconBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'beaconBalance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'beaconBalance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"contractBalance"`.
 */
export function useStakeTogetherContractBalance<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'contractBalance'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'contractBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'contractBalance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'contractBalance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"decimals"`.
 */
export function useStakeTogetherDecimals<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'decimals'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"delegatedSharesOf"`.
 */
export function useStakeTogetherDelegatedSharesOf<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'delegatedSharesOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'delegatedSharesOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'delegatedSharesOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'delegatedSharesOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"delegationSharesOf"`.
 */
export function useStakeTogetherDelegationSharesOf<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'delegationSharesOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'delegationSharesOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'delegationSharesOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'delegationSharesOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositContract"`.
 */
export function useStakeTogetherDepositContract<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'depositContract'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'depositContract', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'depositContract',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'depositContract', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useStakeTogetherEip712Domain<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'eip712Domain'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'eip712Domain', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'eip712Domain', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getPools"`.
 */
export function useStakeTogetherGetPools<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'getPools'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'getPools', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getPools',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'getPools', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getSharesByPooledEth"`.
 */
export function useStakeTogetherGetSharesByPooledEth<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'getSharesByPooledEth'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'getSharesByPooledEth', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getSharesByPooledEth',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'getSharesByPooledEth', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getValidators"`.
 */
export function useStakeTogetherGetValidators<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'getValidators'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'getValidators', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getValidators',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'getValidators', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"isValidator"`.
 */
export function useStakeTogetherIsValidator<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'isValidator'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'isValidator', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'isValidator',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'isValidator', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"liquidityBufferBalance"`.
 */
export function useStakeTogetherLiquidityBufferBalance<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'liquidityBufferBalance'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'liquidityBufferBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'liquidityBufferBalance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'liquidityBufferBalance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"maxDelegations"`.
 */
export function useStakeTogetherMaxDelegations<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'maxDelegations'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'maxDelegations', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'maxDelegations',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'maxDelegations', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"minDepositAmount"`.
 */
export function useStakeTogetherMinDepositAmount<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'minDepositAmount'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'minDepositAmount', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'minDepositAmount',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'minDepositAmount', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"name"`.
 */
export function useStakeTogetherName<TSelectData = ReadContractResult<typeof stakeTogetherABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"nonces"`.
 */
export function useStakeTogetherNonces<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'nonces'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'nonces',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'nonces', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"operatorFee"`.
 */
export function useStakeTogetherOperatorFee<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'operatorFee'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'operatorFee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'operatorFee',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'operatorFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"operatorFeeAddress"`.
 */
export function useStakeTogetherOperatorFeeAddress<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'operatorFeeAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'operatorFeeAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'operatorFeeAddress',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'operatorFeeAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"owner"`.
 */
export function useStakeTogetherOwner<TSelectData = ReadContractResult<typeof stakeTogetherABI, 'owner'>>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'owner',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"paused"`.
 */
export function useStakeTogetherPaused<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'paused'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'paused', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'paused',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'paused', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"poolBalance"`.
 */
export function useStakeTogetherPoolBalance<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'poolBalance'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'poolBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'poolBalance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'poolBalance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"poolFee"`.
 */
export function useStakeTogetherPoolFee<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'poolFee'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'poolFee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'poolFee',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'poolFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"poolModuleAddress"`.
 */
export function useStakeTogetherPoolModuleAddress<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'poolModuleAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'poolModuleAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'poolModuleAddress',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'poolModuleAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"poolSize"`.
 */
export function useStakeTogetherPoolSize<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'poolSize'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'poolSize', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'poolSize',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'poolSize', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"pooledEthByShares"`.
 */
export function useStakeTogetherPooledEthByShares<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'pooledEthByShares'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'pooledEthByShares', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'pooledEthByShares',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'pooledEthByShares', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"sharesOf"`.
 */
export function useStakeTogetherSharesOf<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'sharesOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'sharesOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'sharesOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'sharesOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"stOracle"`.
 */
export function useStakeTogetherStOracle<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'stOracle'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'stOracle', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'stOracle',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'stOracle', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"stakeTogetherFee"`.
 */
export function useStakeTogetherStakeTogetherFee<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'stakeTogetherFee'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'stakeTogetherFee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'stakeTogetherFee',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'stakeTogetherFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"stakeTogetherFeeAddress"`.
 */
export function useStakeTogetherStakeTogetherFeeAddress<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'stakeTogetherFeeAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'stakeTogetherFeeAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'stakeTogetherFeeAddress',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'stakeTogetherFeeAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"symbol"`.
 */
export function useStakeTogetherSymbol<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'symbol'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalDelegatedShares"`.
 */
export function useStakeTogetherTotalDelegatedShares<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'totalDelegatedShares'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'totalDelegatedShares', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalDelegatedShares',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'totalDelegatedShares', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalEtherSupply"`.
 */
export function useStakeTogetherTotalEtherSupply<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'totalEtherSupply'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'totalEtherSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalEtherSupply',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'totalEtherSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalPooledEther"`.
 */
export function useStakeTogetherTotalPooledEther<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'totalPooledEther'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'totalPooledEther', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalPooledEther',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'totalPooledEther', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalShares"`.
 */
export function useStakeTogetherTotalShares<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'totalShares'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'totalShares', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalShares',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'totalShares', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useStakeTogetherTotalSupply<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'totalSupply'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalValidators"`.
 */
export function useStakeTogetherTotalValidators<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'totalValidators'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'totalValidators', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalValidators',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'totalValidators', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transientBalance"`.
 */
export function useStakeTogetherTransientBalance<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'transientBalance'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'transientBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'transientBalance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'transientBalance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"validatorModuleAddress"`.
 */
export function useStakeTogetherValidatorModuleAddress<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'validatorModuleAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'validatorModuleAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'validatorModuleAddress',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'validatorModuleAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawalCredentials"`.
 */
export function useStakeTogetherWithdrawalCredentials<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'withdrawalCredentials'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'withdrawalCredentials', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'withdrawalCredentials',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'withdrawalCredentials', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawalsBalance"`.
 */
export function useStakeTogetherWithdrawalsBalance<
  TSelectData = ReadContractResult<typeof stakeTogetherABI, 'withdrawalsBalance'>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, 'withdrawalsBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'withdrawalsBalance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, 'withdrawalsBalance', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function useStakeTogetherWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, TFunctionName>({
    abi: stakeTogetherABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"addPool"`.
 */
export function useStakeTogetherAddPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'addPool'>['abi'],
        'addPool'
      > & { functionName?: 'addPool' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'addPool'> & {
        abi?: never
        functionName?: 'addPool'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'addPool'>({
    abi: stakeTogetherABI,
    functionName: 'addPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"approve"`.
 */
export function useStakeTogetherApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'approve'>({
    abi: stakeTogetherABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"createValidator"`.
 */
export function useStakeTogetherCreateValidator<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'createValidator'>['abi'],
        'createValidator'
      > & { functionName?: 'createValidator' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'createValidator'> & {
        abi?: never
        functionName?: 'createValidator'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'createValidator'>({
    abi: stakeTogetherABI,
    functionName: 'createValidator',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useStakeTogetherDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'decreaseAllowance'>({
    abi: stakeTogetherABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositLiquidityBuffer"`.
 */
export function useStakeTogetherDepositLiquidityBuffer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'depositLiquidityBuffer'>['abi'],
        'depositLiquidityBuffer'
      > & { functionName?: 'depositLiquidityBuffer' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'depositLiquidityBuffer'> & {
        abi?: never
        functionName?: 'depositLiquidityBuffer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'depositLiquidityBuffer'>({
    abi: stakeTogetherABI,
    functionName: 'depositLiquidityBuffer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositPool"`.
 */
export function useStakeTogetherDepositPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'depositPool'>['abi'],
        'depositPool'
      > & { functionName?: 'depositPool' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'depositPool'> & {
        abi?: never
        functionName?: 'depositPool'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'depositPool'>({
    abi: stakeTogetherABI,
    functionName: 'depositPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useStakeTogetherIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'increaseAllowance'>({
    abi: stakeTogetherABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"pause"`.
 */
export function useStakeTogetherPause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'pause'>['abi'],
        'pause'
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'pause'> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'pause'>({
    abi: stakeTogetherABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"permit"`.
 */
export function useStakeTogetherPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'permit'>['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'permit'>({
    abi: stakeTogetherABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"removePool"`.
 */
export function useStakeTogetherRemovePool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'removePool'>['abi'],
        'removePool'
      > & { functionName?: 'removePool' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'removePool'> & {
        abi?: never
        functionName?: 'removePool'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'removePool'>({
    abi: stakeTogetherABI,
    functionName: 'removePool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useStakeTogetherRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'renounceOwnership'>({
    abi: stakeTogetherABI,
    functionName: 'renounceOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setBeaconBalance"`.
 */
export function useStakeTogetherSetBeaconBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setBeaconBalance'>['abi'],
        'setBeaconBalance'
      > & { functionName?: 'setBeaconBalance' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setBeaconBalance'> & {
        abi?: never
        functionName?: 'setBeaconBalance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setBeaconBalance'>({
    abi: stakeTogetherABI,
    functionName: 'setBeaconBalance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setMinDepositPoolAmount"`.
 */
export function useStakeTogetherSetMinDepositPoolAmount<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setMinDepositPoolAmount'>['abi'],
        'setMinDepositPoolAmount'
      > & { functionName?: 'setMinDepositPoolAmount' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setMinDepositPoolAmount'> & {
        abi?: never
        functionName?: 'setMinDepositPoolAmount'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setMinDepositPoolAmount'>({
    abi: stakeTogetherABI,
    functionName: 'setMinDepositPoolAmount',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setOperatorFee"`.
 */
export function useStakeTogetherSetOperatorFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setOperatorFee'>['abi'],
        'setOperatorFee'
      > & { functionName?: 'setOperatorFee' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setOperatorFee'> & {
        abi?: never
        functionName?: 'setOperatorFee'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setOperatorFee'>({
    abi: stakeTogetherABI,
    functionName: 'setOperatorFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setOperatorFeeAddress"`.
 */
export function useStakeTogetherSetOperatorFeeAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setOperatorFeeAddress'>['abi'],
        'setOperatorFeeAddress'
      > & { functionName?: 'setOperatorFeeAddress' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setOperatorFeeAddress'> & {
        abi?: never
        functionName?: 'setOperatorFeeAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setOperatorFeeAddress'>({
    abi: stakeTogetherABI,
    functionName: 'setOperatorFeeAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setPoolFee"`.
 */
export function useStakeTogetherSetPoolFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setPoolFee'>['abi'],
        'setPoolFee'
      > & { functionName?: 'setPoolFee' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setPoolFee'> & {
        abi?: never
        functionName?: 'setPoolFee'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setPoolFee'>({
    abi: stakeTogetherABI,
    functionName: 'setPoolFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setPoolModuleAddress"`.
 */
export function useStakeTogetherSetPoolModuleAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setPoolModuleAddress'>['abi'],
        'setPoolModuleAddress'
      > & { functionName?: 'setPoolModuleAddress' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setPoolModuleAddress'> & {
        abi?: never
        functionName?: 'setPoolModuleAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setPoolModuleAddress'>({
    abi: stakeTogetherABI,
    functionName: 'setPoolModuleAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setPoolSize"`.
 */
export function useStakeTogetherSetPoolSize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setPoolSize'>['abi'],
        'setPoolSize'
      > & { functionName?: 'setPoolSize' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setPoolSize'> & {
        abi?: never
        functionName?: 'setPoolSize'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setPoolSize'>({
    abi: stakeTogetherABI,
    functionName: 'setPoolSize',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setStakeTogetherFee"`.
 */
export function useStakeTogetherSetStakeTogetherFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setStakeTogetherFee'>['abi'],
        'setStakeTogetherFee'
      > & { functionName?: 'setStakeTogetherFee' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setStakeTogetherFee'> & {
        abi?: never
        functionName?: 'setStakeTogetherFee'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setStakeTogetherFee'>({
    abi: stakeTogetherABI,
    functionName: 'setStakeTogetherFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setStakeTogetherFeeAddress"`.
 */
export function useStakeTogetherSetStakeTogetherFeeAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setStakeTogetherFeeAddress'>['abi'],
        'setStakeTogetherFeeAddress'
      > & { functionName?: 'setStakeTogetherFeeAddress' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setStakeTogetherFeeAddress'> & {
        abi?: never
        functionName?: 'setStakeTogetherFeeAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setStakeTogetherFeeAddress'>({
    abi: stakeTogetherABI,
    functionName: 'setStakeTogetherFeeAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setTransientBalance"`.
 */
export function useStakeTogetherSetTransientBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setTransientBalance'>['abi'],
        'setTransientBalance'
      > & { functionName?: 'setTransientBalance' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setTransientBalance'> & {
        abi?: never
        functionName?: 'setTransientBalance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setTransientBalance'>({
    abi: stakeTogetherABI,
    functionName: 'setTransientBalance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setValidatorModuleAddress"`.
 */
export function useStakeTogetherSetValidatorModuleAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setValidatorModuleAddress'>['abi'],
        'setValidatorModuleAddress'
      > & { functionName?: 'setValidatorModuleAddress' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setValidatorModuleAddress'> & {
        abi?: never
        functionName?: 'setValidatorModuleAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setValidatorModuleAddress'>({
    abi: stakeTogetherABI,
    functionName: 'setValidatorModuleAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setWithdrawalCredentials"`.
 */
export function useStakeTogetherSetWithdrawalCredentials<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setWithdrawalCredentials'>['abi'],
        'setWithdrawalCredentials'
      > & { functionName?: 'setWithdrawalCredentials' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'setWithdrawalCredentials'> & {
        abi?: never
        functionName?: 'setWithdrawalCredentials'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'setWithdrawalCredentials'>({
    abi: stakeTogetherABI,
    functionName: 'setWithdrawalCredentials',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transfer"`.
 */
export function useStakeTogetherTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'transfer'>({
    abi: stakeTogetherABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useStakeTogetherTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'transferFrom'>({
    abi: stakeTogetherABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useStakeTogetherTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'transferOwnership'>({
    abi: stakeTogetherABI,
    functionName: 'transferOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferPoolDelegatedShares"`.
 */
export function useStakeTogetherTransferPoolDelegatedShares<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferPoolDelegatedShares'>['abi'],
        'transferPoolDelegatedShares'
      > & { functionName?: 'transferPoolDelegatedShares' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'transferPoolDelegatedShares'> & {
        abi?: never
        functionName?: 'transferPoolDelegatedShares'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'transferPoolDelegatedShares'>({
    abi: stakeTogetherABI,
    functionName: 'transferPoolDelegatedShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferShares"`.
 */
export function useStakeTogetherTransferShares<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferShares'>['abi'],
        'transferShares'
      > & { functionName?: 'transferShares' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'transferShares'> & {
        abi?: never
        functionName?: 'transferShares'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'transferShares'>({
    abi: stakeTogetherABI,
    functionName: 'transferShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferSharesFrom"`.
 */
export function useStakeTogetherTransferSharesFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferSharesFrom'>['abi'],
        'transferSharesFrom'
      > & { functionName?: 'transferSharesFrom' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'transferSharesFrom'> & {
        abi?: never
        functionName?: 'transferSharesFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'transferSharesFrom'>({
    abi: stakeTogetherABI,
    functionName: 'transferSharesFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"unpause"`.
 */
export function useStakeTogetherUnpause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'unpause'>['abi'],
        'unpause'
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'unpause'> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'unpause'>({
    abi: stakeTogetherABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawLiquidityBuffer"`.
 */
export function useStakeTogetherWithdrawLiquidityBuffer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'withdrawLiquidityBuffer'>['abi'],
        'withdrawLiquidityBuffer'
      > & { functionName?: 'withdrawLiquidityBuffer' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'withdrawLiquidityBuffer'> & {
        abi?: never
        functionName?: 'withdrawLiquidityBuffer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'withdrawLiquidityBuffer'>({
    abi: stakeTogetherABI,
    functionName: 'withdrawLiquidityBuffer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawPool"`.
 */
export function useStakeTogetherWithdrawPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTogetherABI, 'withdrawPool'>['abi'],
        'withdrawPool'
      > & { functionName?: 'withdrawPool' }
    : UseContractWriteConfig<TMode, typeof stakeTogetherABI, 'withdrawPool'> & {
        abi?: never
        functionName?: 'withdrawPool'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakeTogetherABI, 'withdrawPool'>({
    abi: stakeTogetherABI,
    functionName: 'withdrawPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function usePrepareStakeTogetherWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof stakeTogetherABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: stakeTogetherABI, ...config } as UsePrepareContractWriteConfig<
    typeof stakeTogetherABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"addPool"`.
 */
export function usePrepareStakeTogetherAddPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'addPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'addPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'addPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareStakeTogetherApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"createValidator"`.
 */
export function usePrepareStakeTogetherCreateValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'createValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'createValidator',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'createValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareStakeTogetherDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositLiquidityBuffer"`.
 */
export function usePrepareStakeTogetherDepositLiquidityBuffer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'depositLiquidityBuffer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'depositLiquidityBuffer',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'depositLiquidityBuffer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositPool"`.
 */
export function usePrepareStakeTogetherDepositPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'depositPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'depositPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'depositPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareStakeTogetherIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareStakeTogetherPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareStakeTogetherPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"removePool"`.
 */
export function usePrepareStakeTogetherRemovePool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'removePool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'removePool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'removePool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareStakeTogetherRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setBeaconBalance"`.
 */
export function usePrepareStakeTogetherSetBeaconBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setBeaconBalance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setBeaconBalance',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setBeaconBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setMinDepositPoolAmount"`.
 */
export function usePrepareStakeTogetherSetMinDepositPoolAmount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setMinDepositPoolAmount'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setMinDepositPoolAmount',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setMinDepositPoolAmount'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setOperatorFee"`.
 */
export function usePrepareStakeTogetherSetOperatorFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setOperatorFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setOperatorFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setOperatorFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setOperatorFeeAddress"`.
 */
export function usePrepareStakeTogetherSetOperatorFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setOperatorFeeAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setOperatorFeeAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setOperatorFeeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setPoolFee"`.
 */
export function usePrepareStakeTogetherSetPoolFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setPoolFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setPoolFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setPoolFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setPoolModuleAddress"`.
 */
export function usePrepareStakeTogetherSetPoolModuleAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setPoolModuleAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setPoolModuleAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setPoolModuleAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setPoolSize"`.
 */
export function usePrepareStakeTogetherSetPoolSize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setPoolSize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setPoolSize',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setPoolSize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setStakeTogetherFee"`.
 */
export function usePrepareStakeTogetherSetStakeTogetherFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setStakeTogetherFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setStakeTogetherFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setStakeTogetherFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setStakeTogetherFeeAddress"`.
 */
export function usePrepareStakeTogetherSetStakeTogetherFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setStakeTogetherFeeAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setStakeTogetherFeeAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setStakeTogetherFeeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setTransientBalance"`.
 */
export function usePrepareStakeTogetherSetTransientBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setTransientBalance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setTransientBalance',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setTransientBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setValidatorModuleAddress"`.
 */
export function usePrepareStakeTogetherSetValidatorModuleAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setValidatorModuleAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setValidatorModuleAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setValidatorModuleAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setWithdrawalCredentials"`.
 */
export function usePrepareStakeTogetherSetWithdrawalCredentials(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setWithdrawalCredentials'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setWithdrawalCredentials',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setWithdrawalCredentials'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareStakeTogetherTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareStakeTogetherTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareStakeTogetherTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferPoolDelegatedShares"`.
 */
export function usePrepareStakeTogetherTransferPoolDelegatedShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferPoolDelegatedShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferPoolDelegatedShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferPoolDelegatedShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferShares"`.
 */
export function usePrepareStakeTogetherTransferShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferSharesFrom"`.
 */
export function usePrepareStakeTogetherTransferSharesFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferSharesFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferSharesFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferSharesFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareStakeTogetherUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawLiquidityBuffer"`.
 */
export function usePrepareStakeTogetherWithdrawLiquidityBuffer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawLiquidityBuffer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'withdrawLiquidityBuffer',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawLiquidityBuffer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawPool"`.
 */
export function usePrepareStakeTogetherWithdrawPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'withdrawPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function useStakeTogetherEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: stakeTogetherABI, ...config } as UseContractEventConfig<
    typeof stakeTogetherABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"AddPool"`.
 */
export function useStakeTogetherAddPoolEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'AddPool'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'AddPool',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'AddPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Approval"`.
 */
export function useStakeTogetherApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Bootstrap"`.
 */
export function useStakeTogetherBootstrapEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'Bootstrap'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Bootstrap',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Bootstrap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"BurnDelegatedShares"`.
 */
export function useStakeTogetherBurnDelegatedSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'BurnDelegatedShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'BurnDelegatedShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'BurnDelegatedShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"BurnShares"`.
 */
export function useStakeTogetherBurnSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'BurnShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'BurnShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'BurnShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"CreateValidator"`.
 */
export function useStakeTogetherCreateValidatorEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'CreateValidator'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'CreateValidator',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'CreateValidator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"DepositLiquidityBuffer"`.
 */
export function useStakeTogetherDepositLiquidityBufferEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'DepositLiquidityBuffer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'DepositLiquidityBuffer',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'DepositLiquidityBuffer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"DepositPool"`.
 */
export function useStakeTogetherDepositPoolEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'DepositPool'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'DepositPool',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'DepositPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useStakeTogetherEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"EtherReceived"`.
 */
export function useStakeTogetherEtherReceivedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'EtherReceived'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'EtherReceived',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'EtherReceived'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintDelegatedShares"`.
 */
export function useStakeTogetherMintDelegatedSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'MintDelegatedShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintDelegatedShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintDelegatedShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintOperatorRewards"`.
 */
export function useStakeTogetherMintOperatorRewardsEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'MintOperatorRewards'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintOperatorRewards',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintOperatorRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintPoolRewards"`.
 */
export function useStakeTogetherMintPoolRewardsEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'MintPoolRewards'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintPoolRewards',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintPoolRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintShares"`.
 */
export function useStakeTogetherMintSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'MintShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintStakeTogetherRewards"`.
 */
export function useStakeTogetherMintStakeTogetherRewardsEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'MintStakeTogetherRewards'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintStakeTogetherRewards',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintStakeTogetherRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useStakeTogetherOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Paused"`.
 */
export function useStakeTogetherPausedEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Paused',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"ProcessRewards"`.
 */
export function useStakeTogetherProcessRewardsEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'ProcessRewards'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'ProcessRewards',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'ProcessRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"RemovePool"`.
 */
export function useStakeTogetherRemovePoolEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'RemovePool'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'RemovePool',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'RemovePool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetBeaconBalance"`.
 */
export function useStakeTogetherSetBeaconBalanceEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetBeaconBalance'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetBeaconBalance',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetBeaconBalance'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetMinDepositPoolAmount"`.
 */
export function useStakeTogetherSetMinDepositPoolAmountEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetMinDepositPoolAmount'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetMinDepositPoolAmount',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetMinDepositPoolAmount'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetOperatorFee"`.
 */
export function useStakeTogetherSetOperatorFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetOperatorFee'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetOperatorFee',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetOperatorFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetOperatorFeeAddress"`.
 */
export function useStakeTogetherSetOperatorFeeAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetOperatorFeeAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetOperatorFeeAddress',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetOperatorFeeAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetPoolFee"`.
 */
export function useStakeTogetherSetPoolFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetPoolFee'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetPoolFee',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetPoolFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetPoolModuleAddress"`.
 */
export function useStakeTogetherSetPoolModuleAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetPoolModuleAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetPoolModuleAddress',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetPoolModuleAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetPoolSize"`.
 */
export function useStakeTogetherSetPoolSizeEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetPoolSize'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetPoolSize',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetPoolSize'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetStakeTogetherFee"`.
 */
export function useStakeTogetherSetStakeTogetherFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetStakeTogetherFee'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetStakeTogetherFee',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetStakeTogetherFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetStakeTogetherFeeAddress"`.
 */
export function useStakeTogetherSetStakeTogetherFeeAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetStakeTogetherFeeAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetStakeTogetherFeeAddress',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetStakeTogetherFeeAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetTransientBalance"`.
 */
export function useStakeTogetherSetTransientBalanceEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetTransientBalance'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetTransientBalance',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetTransientBalance'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetValidatorModuleAddress"`.
 */
export function useStakeTogetherSetValidatorModuleAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetValidatorModuleAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetValidatorModuleAddress',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetValidatorModuleAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetWithdrawalCredentials"`.
 */
export function useStakeTogetherSetWithdrawalCredentialsEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetWithdrawalCredentials'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetWithdrawalCredentials',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetWithdrawalCredentials'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Transfer"`.
 */
export function useStakeTogetherTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"TransferDelegatedShares"`.
 */
export function useStakeTogetherTransferDelegatedSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'TransferDelegatedShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'TransferDelegatedShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'TransferDelegatedShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"TransferPoolDelegatedShares"`.
 */
export function useStakeTogetherTransferPoolDelegatedSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'TransferPoolDelegatedShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'TransferPoolDelegatedShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'TransferPoolDelegatedShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"TransferShares"`.
 */
export function useStakeTogetherTransferSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'TransferShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'TransferShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'TransferShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useStakeTogetherUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Unpaused',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"WithdrawLiquidityBuffer"`.
 */
export function useStakeTogetherWithdrawLiquidityBufferEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawLiquidityBuffer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'WithdrawLiquidityBuffer',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawLiquidityBuffer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"WithdrawPool"`.
 */
export function useStakeTogetherWithdrawPoolEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawPool'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'WithdrawPool',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawPool'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link stOracleABI}__.
 */
export function useStOracle(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: stOracleABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__.
 */
export function useStOracleRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stOracleABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof stOracleABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: stOracleABI, ...config } as UseContractReadConfig<
    typeof stOracleABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"beaconBalance"`.
 */
export function useStOracleBeaconBalance<
  TSelectData = ReadContractResult<typeof stOracleABI, 'beaconBalance'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'beaconBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'beaconBalance',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'beaconBalance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"getNodeReportByBlock"`.
 */
export function useStOracleGetNodeReportByBlock<
  TSelectData = ReadContractResult<typeof stOracleABI, 'getNodeReportByBlock'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'getNodeReportByBlock', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'getNodeReportByBlock',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'getNodeReportByBlock', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"getNodeReports"`.
 */
export function useStOracleGetNodeReports<
  TSelectData = ReadContractResult<typeof stOracleABI, 'getNodeReports'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'getNodeReports', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'getNodeReports',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'getNodeReports', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"getNodes"`.
 */
export function useStOracleGetNodes<TSelectData = ReadContractResult<typeof stOracleABI, 'getNodes'>>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'getNodes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'getNodes',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'getNodes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"isInConsensus"`.
 */
export function useStOracleIsInConsensus<
  TSelectData = ReadContractResult<typeof stOracleABI, 'isInConsensus'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'isInConsensus', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'isInConsensus',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'isInConsensus', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"isNode"`.
 */
export function useStOracleIsNode<TSelectData = ReadContractResult<typeof stOracleABI, 'isNode'>>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'isNode', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stOracleABI, functionName: 'isNode', ...config } as UseContractReadConfig<
    typeof stOracleABI,
    'isNode',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"isNodeBlacklisted"`.
 */
export function useStOracleIsNodeBlacklisted<
  TSelectData = ReadContractResult<typeof stOracleABI, 'isNodeBlacklisted'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'isNodeBlacklisted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'isNodeBlacklisted',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'isNodeBlacklisted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"owner"`.
 */
export function useStOracleOwner<TSelectData = ReadContractResult<typeof stOracleABI, 'owner'>>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stOracleABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof stOracleABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"paused"`.
 */
export function useStOraclePaused<TSelectData = ReadContractResult<typeof stOracleABI, 'paused'>>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'paused', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stOracleABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof stOracleABI,
    'paused',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"reportFrequency"`.
 */
export function useStOracleReportFrequency<
  TSelectData = ReadContractResult<typeof stOracleABI, 'reportFrequency'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'reportFrequency', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'reportFrequency',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'reportFrequency', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"reportLastBlock"`.
 */
export function useStOracleReportLastBlock<
  TSelectData = ReadContractResult<typeof stOracleABI, 'reportLastBlock'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'reportLastBlock', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'reportLastBlock',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'reportLastBlock', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"reportNextBlock"`.
 */
export function useStOracleReportNextBlock<
  TSelectData = ReadContractResult<typeof stOracleABI, 'reportNextBlock'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'reportNextBlock', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'reportNextBlock',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'reportNextBlock', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"reportQuorum"`.
 */
export function useStOracleReportQuorum<
  TSelectData = ReadContractResult<typeof stOracleABI, 'reportQuorum'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'reportQuorum', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'reportQuorum',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'reportQuorum', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"stakeTogether"`.
 */
export function useStOracleStakeTogether<
  TSelectData = ReadContractResult<typeof stOracleABI, 'stakeTogether'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'stakeTogether', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'stakeTogether',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'stakeTogether', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"transientBalance"`.
 */
export function useStOracleTransientBalance<
  TSelectData = ReadContractResult<typeof stOracleABI, 'transientBalance'>
>(
  config: Omit<
    UseContractReadConfig<typeof stOracleABI, 'transientBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stOracleABI,
    functionName: 'transientBalance',
    ...config
  } as UseContractReadConfig<typeof stOracleABI, 'transientBalance', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stOracleABI}__.
 */
export function useStOracleWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stOracleABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof stOracleABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof stOracleABI, TFunctionName>({
    abi: stOracleABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"addNode"`.
 */
export function useStOracleAddNode<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stOracleABI, 'addNode'>['abi'],
        'addNode'
      > & { functionName?: 'addNode' }
    : UseContractWriteConfig<TMode, typeof stOracleABI, 'addNode'> & {
        abi?: never
        functionName?: 'addNode'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stOracleABI, 'addNode'>({
    abi: stOracleABI,
    functionName: 'addNode',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"removeNode"`.
 */
export function useStOracleRemoveNode<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stOracleABI, 'removeNode'>['abi'],
        'removeNode'
      > & { functionName?: 'removeNode' }
    : UseContractWriteConfig<TMode, typeof stOracleABI, 'removeNode'> & {
        abi?: never
        functionName?: 'removeNode'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stOracleABI, 'removeNode'>({
    abi: stOracleABI,
    functionName: 'removeNode',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useStOracleRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stOracleABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof stOracleABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stOracleABI, 'renounceOwnership'>({
    abi: stOracleABI,
    functionName: 'renounceOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"report"`.
 */
export function useStOracleReport<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stOracleABI, 'report'>['abi'],
        'report'
      > & { functionName?: 'report' }
    : UseContractWriteConfig<TMode, typeof stOracleABI, 'report'> & {
        abi?: never
        functionName?: 'report'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stOracleABI, 'report'>({
    abi: stOracleABI,
    functionName: 'report',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"setReportMaxFrequency"`.
 */
export function useStOracleSetReportMaxFrequency<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stOracleABI, 'setReportMaxFrequency'>['abi'],
        'setReportMaxFrequency'
      > & { functionName?: 'setReportMaxFrequency' }
    : UseContractWriteConfig<TMode, typeof stOracleABI, 'setReportMaxFrequency'> & {
        abi?: never
        functionName?: 'setReportMaxFrequency'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stOracleABI, 'setReportMaxFrequency'>({
    abi: stOracleABI,
    functionName: 'setReportMaxFrequency',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"setReportQuorum"`.
 */
export function useStOracleSetReportQuorum<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stOracleABI, 'setReportQuorum'>['abi'],
        'setReportQuorum'
      > & { functionName?: 'setReportQuorum' }
    : UseContractWriteConfig<TMode, typeof stOracleABI, 'setReportQuorum'> & {
        abi?: never
        functionName?: 'setReportQuorum'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stOracleABI, 'setReportQuorum'>({
    abi: stOracleABI,
    functionName: 'setReportQuorum',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function useStOracleSetStakeTogether<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stOracleABI, 'setStakeTogether'>['abi'],
        'setStakeTogether'
      > & { functionName?: 'setStakeTogether' }
    : UseContractWriteConfig<TMode, typeof stOracleABI, 'setStakeTogether'> & {
        abi?: never
        functionName?: 'setStakeTogether'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stOracleABI, 'setStakeTogether'>({
    abi: stOracleABI,
    functionName: 'setStakeTogether',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useStOracleTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stOracleABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof stOracleABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof stOracleABI, 'transferOwnership'>({
    abi: stOracleABI,
    functionName: 'transferOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stOracleABI}__.
 */
export function usePrepareStOracleWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof stOracleABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: stOracleABI, ...config } as UsePrepareContractWriteConfig<
    typeof stOracleABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"addNode"`.
 */
export function usePrepareStOracleAddNode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stOracleABI, 'addNode'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stOracleABI,
    functionName: 'addNode',
    ...config
  } as UsePrepareContractWriteConfig<typeof stOracleABI, 'addNode'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"removeNode"`.
 */
export function usePrepareStOracleRemoveNode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stOracleABI, 'removeNode'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stOracleABI,
    functionName: 'removeNode',
    ...config
  } as UsePrepareContractWriteConfig<typeof stOracleABI, 'removeNode'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareStOracleRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stOracleABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stOracleABI,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof stOracleABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"report"`.
 */
export function usePrepareStOracleReport(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stOracleABI, 'report'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stOracleABI,
    functionName: 'report',
    ...config
  } as UsePrepareContractWriteConfig<typeof stOracleABI, 'report'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"setReportMaxFrequency"`.
 */
export function usePrepareStOracleSetReportMaxFrequency(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stOracleABI, 'setReportMaxFrequency'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stOracleABI,
    functionName: 'setReportMaxFrequency',
    ...config
  } as UsePrepareContractWriteConfig<typeof stOracleABI, 'setReportMaxFrequency'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"setReportQuorum"`.
 */
export function usePrepareStOracleSetReportQuorum(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stOracleABI, 'setReportQuorum'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stOracleABI,
    functionName: 'setReportQuorum',
    ...config
  } as UsePrepareContractWriteConfig<typeof stOracleABI, 'setReportQuorum'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function usePrepareStOracleSetStakeTogether(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stOracleABI, 'setStakeTogether'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stOracleABI,
    functionName: 'setStakeTogether',
    ...config
  } as UsePrepareContractWriteConfig<typeof stOracleABI, 'setStakeTogether'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stOracleABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareStOracleTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stOracleABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stOracleABI,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof stOracleABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__.
 */
export function useStOracleEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof stOracleABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: stOracleABI, ...config } as UseContractEventConfig<
    typeof stOracleABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"AddNode"`.
 */
export function useStOracleAddNodeEvent(
  config: Omit<UseContractEventConfig<typeof stOracleABI, 'AddNode'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: stOracleABI, eventName: 'AddNode', ...config } as UseContractEventConfig<
    typeof stOracleABI,
    'AddNode'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"BlacklistNode"`.
 */
export function useStOracleBlacklistNodeEvent(
  config: Omit<
    UseContractEventConfig<typeof stOracleABI, 'BlacklistNode'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'BlacklistNode',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'BlacklistNode'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"ConsensusApproved"`.
 */
export function useStOracleConsensusApprovedEvent(
  config: Omit<
    UseContractEventConfig<typeof stOracleABI, 'ConsensusApproved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'ConsensusApproved',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'ConsensusApproved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"ConsensusFail"`.
 */
export function useStOracleConsensusFailEvent(
  config: Omit<
    UseContractEventConfig<typeof stOracleABI, 'ConsensusFail'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'ConsensusFail',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'ConsensusFail'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"NonConsensusValueReported"`.
 */
export function useStOracleNonConsensusValueReportedEvent(
  config: Omit<
    UseContractEventConfig<typeof stOracleABI, 'NonConsensusValueReported'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'NonConsensusValueReported',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'NonConsensusValueReported'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useStOracleOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof stOracleABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"Paused"`.
 */
export function useStOraclePausedEvent(
  config: Omit<UseContractEventConfig<typeof stOracleABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: stOracleABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof stOracleABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"RemoveNode"`.
 */
export function useStOracleRemoveNodeEvent(
  config: Omit<UseContractEventConfig<typeof stOracleABI, 'RemoveNode'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'RemoveNode',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'RemoveNode'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"ReportQuorumNotAchieved"`.
 */
export function useStOracleReportQuorumNotAchievedEvent(
  config: Omit<
    UseContractEventConfig<typeof stOracleABI, 'ReportQuorumNotAchieved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'ReportQuorumNotAchieved',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'ReportQuorumNotAchieved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"SetReportMaxFrequency"`.
 */
export function useStOracleSetReportMaxFrequencyEvent(
  config: Omit<
    UseContractEventConfig<typeof stOracleABI, 'SetReportMaxFrequency'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'SetReportMaxFrequency',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'SetReportMaxFrequency'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"SetReportQuorum"`.
 */
export function useStOracleSetReportQuorumEvent(
  config: Omit<
    UseContractEventConfig<typeof stOracleABI, 'SetReportQuorum'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'SetReportQuorum',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'SetReportQuorum'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useStOracleSetStakeTogetherEvent(
  config: Omit<
    UseContractEventConfig<typeof stOracleABI, 'SetStakeTogether'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stOracleABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useStOracleUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof stOracleABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stOracleABI,
    eventName: 'Unpaused',
    ...config
  } as UseContractEventConfig<typeof stOracleABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function useIDepositContract(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iDepositContractABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function useIDepositContractRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iDepositContractABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iDepositContractABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: iDepositContractABI, ...config } as UseContractReadConfig<
    typeof iDepositContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"get_deposit_count"`.
 */
export function useIDepositContractGetDepositCount<
  TSelectData = ReadContractResult<typeof iDepositContractABI, 'get_deposit_count'>
>(
  config: Omit<
    UseContractReadConfig<typeof iDepositContractABI, 'get_deposit_count', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iDepositContractABI,
    functionName: 'get_deposit_count',
    ...config
  } as UseContractReadConfig<typeof iDepositContractABI, 'get_deposit_count', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"get_deposit_root"`.
 */
export function useIDepositContractGetDepositRoot<
  TSelectData = ReadContractResult<typeof iDepositContractABI, 'get_deposit_root'>
>(
  config: Omit<
    UseContractReadConfig<typeof iDepositContractABI, 'get_deposit_root', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iDepositContractABI,
    functionName: 'get_deposit_root',
    ...config
  } as UseContractReadConfig<typeof iDepositContractABI, 'get_deposit_root', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function useIDepositContractWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iDepositContractABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iDepositContractABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof iDepositContractABI, TFunctionName>({
    abi: iDepositContractABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"deposit"`.
 */
export function useIDepositContractDeposit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iDepositContractABI, 'deposit'>['abi'],
        'deposit'
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<TMode, typeof iDepositContractABI, 'deposit'> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iDepositContractABI, 'deposit'>({
    abi: iDepositContractABI,
    functionName: 'deposit',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function usePrepareIDepositContractWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iDepositContractABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({ abi: iDepositContractABI, ...config } as UsePrepareContractWriteConfig<
    typeof iDepositContractABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareIDepositContractDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iDepositContractABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iDepositContractABI,
    functionName: 'deposit',
    ...config
  } as UsePrepareContractWriteConfig<typeof iDepositContractABI, 'deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function useIDepositContractEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iDepositContractABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iDepositContractABI, ...config } as UseContractEventConfig<
    typeof iDepositContractABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iDepositContractABI}__ and `eventName` set to `"DepositEvent"`.
 */
export function useIDepositContractDepositEventEvent(
  config: Omit<
    UseContractEventConfig<typeof iDepositContractABI, 'DepositEvent'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iDepositContractABI,
    eventName: 'DepositEvent',
    ...config
  } as UseContractEventConfig<typeof iDepositContractABI, 'DepositEvent'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ownableABI, ...config } as UseContractReadConfig<
    typeof ownableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<TSelectData = ReadContractResult<typeof ownableABI, 'owner'>>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: ownableABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof ownableABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ownableABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableABI, TFunctionName>({ abi: ownableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableABI, 'renounceOwnership'>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableABI, 'transferOwnership'>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ownableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ownableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ownableABI, ...config } as UseContractEventConfig<
    typeof ownableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc5267ABI}__.
 */
export function useIerc5267(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc5267ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5267ABI}__.
 */
export function useIerc5267Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc5267ABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof ierc5267ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ierc5267ABI, ...config } as UseContractReadConfig<
    typeof ierc5267ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5267ABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useIerc5267Eip712Domain<
  TSelectData = ReadContractResult<typeof ierc5267ABI, 'eip712Domain'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc5267ABI, 'eip712Domain', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc5267ABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof ierc5267ABI, 'eip712Domain', TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5267ABI}__.
 */
export function useIerc5267Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc5267ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc5267ABI, ...config } as UseContractEventConfig<
    typeof ierc5267ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5267ABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useIerc5267Eip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc5267ABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc5267ABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof ierc5267ABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: pausableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pausableABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof pausableABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: pausableABI, ...config } as UseContractReadConfig<
    typeof pausableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableABI}__ and `functionName` set to `"paused"`.
 */
export function usePausablePaused<TSelectData = ReadContractResult<typeof pausableABI, 'paused'>>(
  config: Omit<
    UseContractReadConfig<typeof pausableABI, 'paused', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: pausableABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof pausableABI,
    'paused',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof pausableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: pausableABI, ...config } as UseContractEventConfig<
    typeof pausableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__ and `eventName` set to `"Paused"`.
 */
export function usePausablePausedEvent(
  config: Omit<UseContractEventConfig<typeof pausableABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: pausableABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof pausableABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__ and `eventName` set to `"Unpaused"`.
 */
export function usePausableUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof pausableABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: pausableABI,
    eventName: 'Unpaused',
    ...config
  } as UseContractEventConfig<typeof pausableABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link shortStringsABI}__.
 */
export function useShortStrings(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: shortStringsABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<TSelectData = ReadContractResult<typeof erc20ABI, 'allowance'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<TSelectData = ReadContractResult<typeof erc20ABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<TSelectData = ReadContractResult<typeof erc20ABI, 'decimals'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<TSelectData = ReadContractResult<typeof erc20ABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<TSelectData = ReadContractResult<typeof erc20ABI, 'symbol'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<TSelectData = ReadContractResult<typeof erc20ABI, 'totalSupply'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({ abi: erc20ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'decreaseAllowance'>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'increaseAllowance'>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20ABI, ...config } as UseContractEventConfig<
    typeof erc20ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc20ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof erc20ABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<UseContractEventConfig<typeof erc20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc20ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof erc20ABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<TSelectData = ReadContractResult<typeof ierc20ABI, 'allowance'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof ierc20ABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<TSelectData = ReadContractResult<typeof ierc20ABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof ierc20ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<TSelectData = ReadContractResult<typeof ierc20ABI, 'totalSupply'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof ierc20ABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, TFunctionName>({ abi: ierc20ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'approve'>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transfer'>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transferFrom'>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc20ABI, ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc20ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc20ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link eip712ABI}__.
 */
export function useEip712(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: eip712ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eip712ABI}__.
 */
export function useEip712Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof eip712ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof eip712ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: eip712ABI, ...config } as UseContractReadConfig<
    typeof eip712ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eip712ABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useEip712Eip712Domain<TSelectData = ReadContractResult<typeof eip712ABI, 'eip712Domain'>>(
  config: Omit<
    UseContractReadConfig<typeof eip712ABI, 'eip712Domain', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: eip712ABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof eip712ABI, 'eip712Domain', TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712ABI}__.
 */
export function useEip712Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof eip712ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: eip712ABI, ...config } as UseContractEventConfig<
    typeof eip712ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712ABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useEip712Eip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof eip712ABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: eip712ABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof eip712ABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20Burnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20BurnableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: erc20BurnableABI, ...config } as UseContractReadConfig<
    typeof erc20BurnableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20BurnableAllowance<
  TSelectData = ReadContractResult<typeof erc20BurnableABI, 'allowance'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BurnableBalanceOf<
  TSelectData = ReadContractResult<typeof erc20BurnableABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20BurnableDecimals<
  TSelectData = ReadContractResult<typeof erc20BurnableABI, 'decimals'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20BurnableName<TSelectData = ReadContractResult<typeof erc20BurnableABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20BurnableSymbol<
  TSelectData = ReadContractResult<typeof erc20BurnableABI, 'symbol'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20BurnableTotalSupply<
  TSelectData = ReadContractResult<typeof erc20BurnableABI, 'totalSupply'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, TFunctionName>({
    abi: erc20BurnableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20BurnableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'approve'>({
    abi: erc20BurnableABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc20BurnableBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'burn'>({
    abi: erc20BurnableABI,
    functionName: 'burn',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useErc20BurnableBurnFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, 'burnFrom'>['abi'],
        'burnFrom'
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'burnFrom'> & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'burnFrom'>({
    abi: erc20BurnableABI,
    functionName: 'burnFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20BurnableDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'decreaseAllowance'>({
    abi: erc20BurnableABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20BurnableIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'increaseAllowance'>({
    abi: erc20BurnableABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20BurnableTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'transfer'>({
    abi: erc20BurnableABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20BurnableTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, 'transferFrom'>({
    abi: erc20BurnableABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function usePrepareErc20BurnableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20BurnableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20BurnableABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20BurnableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20BurnableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc20BurnableBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'burn',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareErc20BurnableBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burnFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'burnFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20BurnableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20BurnableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20BurnableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20BurnableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20BurnableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20BurnableABI, ...config } as UseContractEventConfig<
    typeof erc20BurnableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20BurnableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof erc20BurnableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20BurnableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof erc20BurnableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20Metadata(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20MetadataABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc20MetadataABI, ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'allowance'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'decimals'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'symbol'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'totalSupply'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, TFunctionName>({
    abi: ierc20MetadataABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'approve'>({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transfer'>({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transferFrom'>({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20MetadataABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20MetadataABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc20MetadataABI, ...config } as UseContractEventConfig<
    typeof ierc20MetadataABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20Permit(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20PermitABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: erc20PermitABI, ...config } as UseContractReadConfig<
    typeof erc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20PermitDomainSeparator<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'DOMAIN_SEPARATOR'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'DOMAIN_SEPARATOR', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, 'DOMAIN_SEPARATOR', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20PermitAllowance<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'allowance'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20PermitBalanceOf<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20PermitDecimals<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'decimals'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useErc20PermitEip712Domain<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'eip712Domain'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'eip712Domain', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, 'eip712Domain', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"name"`.
 */
export function useErc20PermitName<TSelectData = ReadContractResult<typeof erc20PermitABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20PermitNonces<TSelectData = ReadContractResult<typeof erc20PermitABI, 'nonces'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'nonces',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, 'nonces', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20PermitSymbol<TSelectData = ReadContractResult<typeof erc20PermitABI, 'symbol'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20PermitTotalSupply<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'totalSupply'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof erc20PermitABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, TFunctionName>({
    abi: erc20PermitABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20PermitApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'approve'>({
    abi: erc20PermitABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20PermitDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'decreaseAllowance'>({
    abi: erc20PermitABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20PermitIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'increaseAllowance'>({
    abi: erc20PermitABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20PermitPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, 'permit'>['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'permit'>({
    abi: erc20PermitABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20PermitTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'transfer'>({
    abi: erc20PermitABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20PermitTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'transferFrom'>({
    abi: erc20PermitABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function usePrepareErc20PermitWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20PermitABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20PermitABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20PermitABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20PermitApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20PermitDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20PermitIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20PermitPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20PermitTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20PermitTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20PermitABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20PermitABI, ...config } as UseContractEventConfig<
    typeof erc20PermitABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20PermitApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc20PermitABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: erc20PermitABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof erc20PermitABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useErc20PermitEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20PermitABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof erc20PermitABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20PermitTransferEvent(
  config: Omit<UseContractEventConfig<typeof erc20PermitABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: erc20PermitABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof erc20PermitABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20Permit(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20PermitABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc20PermitABI, ...config } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitDomainSeparator<
  TSelectData = ReadContractResult<typeof ierc20PermitABI, 'DOMAIN_SEPARATOR'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, 'DOMAIN_SEPARATOR', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof ierc20PermitABI, 'DOMAIN_SEPARATOR', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitNonces<TSelectData = ReadContractResult<typeof ierc20PermitABI, 'nonces'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'nonces',
    ...config
  } as UseContractReadConfig<typeof ierc20PermitABI, 'nonces', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20PermitABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, TFunctionName>({
    abi: ierc20PermitABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20PermitABI, 'permit'>['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, 'permit'>({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function usePrepareIerc20PermitWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20PermitABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20PermitABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>)
}
